//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./template_types');
//HELPER FUNCTIONS AND STRUCTURES

BaseTamplateServ_addStorehouse_args = function(args) {
  this.storehouse = null;
  if (args) {
    if (args.storehouse !== undefined) {
      this.storehouse = args.storehouse;
    }
  }
};
BaseTamplateServ_addStorehouse_args.prototype = {};
BaseTamplateServ_addStorehouse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.storehouse = new ttypes.Storehouse();
        this.storehouse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_addStorehouse_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_addStorehouse_args');
  if (this.storehouse !== null && this.storehouse !== undefined) {
    output.writeFieldBegin('storehouse', Thrift.Type.STRUCT, 1);
    this.storehouse.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_addStorehouse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_addStorehouse_result.prototype = {};
BaseTamplateServ_addStorehouse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_addStorehouse_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_addStorehouse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_updateStorehouse_args = function(args) {
  this.storehouse = null;
  if (args) {
    if (args.storehouse !== undefined) {
      this.storehouse = args.storehouse;
    }
  }
};
BaseTamplateServ_updateStorehouse_args.prototype = {};
BaseTamplateServ_updateStorehouse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.storehouse = new ttypes.Storehouse();
        this.storehouse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_updateStorehouse_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_updateStorehouse_args');
  if (this.storehouse !== null && this.storehouse !== undefined) {
    output.writeFieldBegin('storehouse', Thrift.Type.STRUCT, 1);
    this.storehouse.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_updateStorehouse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_updateStorehouse_result.prototype = {};
BaseTamplateServ_updateStorehouse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_updateStorehouse_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_updateStorehouse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouse_args = function(args) {
  this.sellerId = null;
  this.id = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
BaseTamplateServ_deleteStorehouse_args.prototype = {};
BaseTamplateServ_deleteStorehouse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouse_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deleteStorehouse_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_deleteStorehouse_result.prototype = {};
BaseTamplateServ_deleteStorehouse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouse_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deleteStorehouse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouseBatch_args = function(args) {
  this.storehouseList = null;
  if (args) {
    if (args.storehouseList !== undefined) {
      this.storehouseList = args.storehouseList;
    }
  }
};
BaseTamplateServ_deleteStorehouseBatch_args.prototype = {};
BaseTamplateServ_deleteStorehouseBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.storehouseList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Storehouse();
          elem22.read(input);
          this.storehouseList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouseBatch_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deleteStorehouseBatch_args');
  if (this.storehouseList !== null && this.storehouseList !== undefined) {
    output.writeFieldBegin('storehouseList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.storehouseList.length);
    for (var iter23 in this.storehouseList)
    {
      if (this.storehouseList.hasOwnProperty(iter23))
      {
        iter23 = this.storehouseList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouseBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_deleteStorehouseBatch_result.prototype = {};
BaseTamplateServ_deleteStorehouseBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deleteStorehouseBatch_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deleteStorehouseBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_queryStorehouse_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
BaseTamplateServ_queryStorehouse_args.prototype = {};
BaseTamplateServ_queryStorehouse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.StorehouseQureyParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_queryStorehouse_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_queryStorehouse_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_queryStorehouse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_queryStorehouse_result.prototype = {};
BaseTamplateServ_queryStorehouse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StorehouseResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_queryStorehouse_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_queryStorehouse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_addPostage_args = function(args) {
  this.postage = null;
  if (args) {
    if (args.postage !== undefined) {
      this.postage = args.postage;
    }
  }
};
BaseTamplateServ_addPostage_args.prototype = {};
BaseTamplateServ_addPostage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.postage = new ttypes.Postage();
        this.postage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_addPostage_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_addPostage_args');
  if (this.postage !== null && this.postage !== undefined) {
    output.writeFieldBegin('postage', Thrift.Type.STRUCT, 1);
    this.postage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_addPostage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_addPostage_result.prototype = {};
BaseTamplateServ_addPostage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_addPostage_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_addPostage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_updatePostage_args = function(args) {
  this.postage = null;
  if (args) {
    if (args.postage !== undefined) {
      this.postage = args.postage;
    }
  }
};
BaseTamplateServ_updatePostage_args.prototype = {};
BaseTamplateServ_updatePostage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.postage = new ttypes.Postage();
        this.postage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_updatePostage_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_updatePostage_args');
  if (this.postage !== null && this.postage !== undefined) {
    output.writeFieldBegin('postage', Thrift.Type.STRUCT, 1);
    this.postage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_updatePostage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_updatePostage_result.prototype = {};
BaseTamplateServ_updatePostage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_updatePostage_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_updatePostage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deletePostage_args = function(args) {
  this.sellerId = null;
  this.id = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
BaseTamplateServ_deletePostage_args.prototype = {};
BaseTamplateServ_deletePostage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deletePostage_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deletePostage_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deletePostage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_deletePostage_result.prototype = {};
BaseTamplateServ_deletePostage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deletePostage_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deletePostage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deletePostageBatch_args = function(args) {
  this.PostageList = null;
  if (args) {
    if (args.PostageList !== undefined) {
      this.PostageList = args.PostageList;
    }
  }
};
BaseTamplateServ_deletePostageBatch_args.prototype = {};
BaseTamplateServ_deletePostageBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.PostageList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Postage();
          elem30.read(input);
          this.PostageList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deletePostageBatch_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deletePostageBatch_args');
  if (this.PostageList !== null && this.PostageList !== undefined) {
    output.writeFieldBegin('PostageList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.PostageList.length);
    for (var iter31 in this.PostageList)
    {
      if (this.PostageList.hasOwnProperty(iter31))
      {
        iter31 = this.PostageList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_deletePostageBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_deletePostageBatch_result.prototype = {};
BaseTamplateServ_deletePostageBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_deletePostageBatch_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_deletePostageBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_queryPostage_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
BaseTamplateServ_queryPostage_args.prototype = {};
BaseTamplateServ_queryPostage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.PostageQureyParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_queryPostage_args.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_queryPostage_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServ_queryPostage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BaseTamplateServ_queryPostage_result.prototype = {};
BaseTamplateServ_queryPostage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StorehouseResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseTamplateServ_queryPostage_result.prototype.write = function(output) {
  output.writeStructBegin('BaseTamplateServ_queryPostage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseTamplateServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BaseTamplateServClient.prototype = {};
BaseTamplateServClient.prototype.seqid = function() { return this._seqid; }
BaseTamplateServClient.prototype.new_seqid = function() { return this._seqid += 1; }
BaseTamplateServClient.prototype.addStorehouse = function(storehouse, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addStorehouse(storehouse);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addStorehouse(storehouse);
  }
};

BaseTamplateServClient.prototype.send_addStorehouse = function(storehouse) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addStorehouse', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_addStorehouse_args();
  args.storehouse = storehouse;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_addStorehouse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_addStorehouse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addStorehouse failed: unknown result');
};
BaseTamplateServClient.prototype.updateStorehouse = function(storehouse, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateStorehouse(storehouse);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateStorehouse(storehouse);
  }
};

BaseTamplateServClient.prototype.send_updateStorehouse = function(storehouse) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateStorehouse', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_updateStorehouse_args();
  args.storehouse = storehouse;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_updateStorehouse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_updateStorehouse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateStorehouse failed: unknown result');
};
BaseTamplateServClient.prototype.deleteStorehouse = function(sellerId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteStorehouse(sellerId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteStorehouse(sellerId, id);
  }
};

BaseTamplateServClient.prototype.send_deleteStorehouse = function(sellerId, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteStorehouse', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_deleteStorehouse_args();
  args.sellerId = sellerId;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_deleteStorehouse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_deleteStorehouse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteStorehouse failed: unknown result');
};
BaseTamplateServClient.prototype.deleteStorehouseBatch = function(storehouseList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteStorehouseBatch(storehouseList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteStorehouseBatch(storehouseList);
  }
};

BaseTamplateServClient.prototype.send_deleteStorehouseBatch = function(storehouseList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteStorehouseBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_deleteStorehouseBatch_args();
  args.storehouseList = storehouseList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_deleteStorehouseBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_deleteStorehouseBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteStorehouseBatch failed: unknown result');
};
BaseTamplateServClient.prototype.queryStorehouse = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryStorehouse(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryStorehouse(param);
  }
};

BaseTamplateServClient.prototype.send_queryStorehouse = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryStorehouse', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_queryStorehouse_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_queryStorehouse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_queryStorehouse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryStorehouse failed: unknown result');
};
BaseTamplateServClient.prototype.addPostage = function(postage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addPostage(postage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addPostage(postage);
  }
};

BaseTamplateServClient.prototype.send_addPostage = function(postage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addPostage', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_addPostage_args();
  args.postage = postage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_addPostage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_addPostage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addPostage failed: unknown result');
};
BaseTamplateServClient.prototype.updatePostage = function(postage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updatePostage(postage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updatePostage(postage);
  }
};

BaseTamplateServClient.prototype.send_updatePostage = function(postage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updatePostage', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_updatePostage_args();
  args.postage = postage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_updatePostage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_updatePostage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updatePostage failed: unknown result');
};
BaseTamplateServClient.prototype.deletePostage = function(sellerId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePostage(sellerId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePostage(sellerId, id);
  }
};

BaseTamplateServClient.prototype.send_deletePostage = function(sellerId, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePostage', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_deletePostage_args();
  args.sellerId = sellerId;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_deletePostage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_deletePostage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePostage failed: unknown result');
};
BaseTamplateServClient.prototype.deletePostageBatch = function(PostageList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePostageBatch(PostageList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePostageBatch(PostageList);
  }
};

BaseTamplateServClient.prototype.send_deletePostageBatch = function(PostageList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePostageBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_deletePostageBatch_args();
  args.PostageList = PostageList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_deletePostageBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_deletePostageBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePostageBatch failed: unknown result');
};
BaseTamplateServClient.prototype.queryPostage = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryPostage(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryPostage(param);
  }
};

BaseTamplateServClient.prototype.send_queryPostage = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryPostage', Thrift.MessageType.CALL, this.seqid());
  var args = new BaseTamplateServ_queryPostage_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BaseTamplateServClient.prototype.recv_queryPostage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BaseTamplateServ_queryPostage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryPostage failed: unknown result');
};
BaseTamplateServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BaseTamplateServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BaseTamplateServProcessor.prototype.process_addStorehouse = function(seqid, input, output) {
  var args = new BaseTamplateServ_addStorehouse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addStorehouse.length === 1) {
    Q.fcall(this._handler.addStorehouse, args.storehouse)
      .then(function(result) {
        var result = new BaseTamplateServ_addStorehouse_result({success: result});
        output.writeMessageBegin("addStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_addStorehouse_result(err);
        output.writeMessageBegin("addStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addStorehouse(args.storehouse,  function (err, result) {
      var result = new BaseTamplateServ_addStorehouse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addStorehouse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_updateStorehouse = function(seqid, input, output) {
  var args = new BaseTamplateServ_updateStorehouse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateStorehouse.length === 1) {
    Q.fcall(this._handler.updateStorehouse, args.storehouse)
      .then(function(result) {
        var result = new BaseTamplateServ_updateStorehouse_result({success: result});
        output.writeMessageBegin("updateStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_updateStorehouse_result(err);
        output.writeMessageBegin("updateStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateStorehouse(args.storehouse,  function (err, result) {
      var result = new BaseTamplateServ_updateStorehouse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateStorehouse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_deleteStorehouse = function(seqid, input, output) {
  var args = new BaseTamplateServ_deleteStorehouse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteStorehouse.length === 2) {
    Q.fcall(this._handler.deleteStorehouse, args.sellerId, args.id)
      .then(function(result) {
        var result = new BaseTamplateServ_deleteStorehouse_result({success: result});
        output.writeMessageBegin("deleteStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_deleteStorehouse_result(err);
        output.writeMessageBegin("deleteStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteStorehouse(args.sellerId, args.id,  function (err, result) {
      var result = new BaseTamplateServ_deleteStorehouse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteStorehouse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_deleteStorehouseBatch = function(seqid, input, output) {
  var args = new BaseTamplateServ_deleteStorehouseBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteStorehouseBatch.length === 1) {
    Q.fcall(this._handler.deleteStorehouseBatch, args.storehouseList)
      .then(function(result) {
        var result = new BaseTamplateServ_deleteStorehouseBatch_result({success: result});
        output.writeMessageBegin("deleteStorehouseBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_deleteStorehouseBatch_result(err);
        output.writeMessageBegin("deleteStorehouseBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteStorehouseBatch(args.storehouseList,  function (err, result) {
      var result = new BaseTamplateServ_deleteStorehouseBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteStorehouseBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_queryStorehouse = function(seqid, input, output) {
  var args = new BaseTamplateServ_queryStorehouse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryStorehouse.length === 1) {
    Q.fcall(this._handler.queryStorehouse, args.param)
      .then(function(result) {
        var result = new BaseTamplateServ_queryStorehouse_result({success: result});
        output.writeMessageBegin("queryStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_queryStorehouse_result(err);
        output.writeMessageBegin("queryStorehouse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryStorehouse(args.param,  function (err, result) {
      var result = new BaseTamplateServ_queryStorehouse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryStorehouse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_addPostage = function(seqid, input, output) {
  var args = new BaseTamplateServ_addPostage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addPostage.length === 1) {
    Q.fcall(this._handler.addPostage, args.postage)
      .then(function(result) {
        var result = new BaseTamplateServ_addPostage_result({success: result});
        output.writeMessageBegin("addPostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_addPostage_result(err);
        output.writeMessageBegin("addPostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addPostage(args.postage,  function (err, result) {
      var result = new BaseTamplateServ_addPostage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addPostage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_updatePostage = function(seqid, input, output) {
  var args = new BaseTamplateServ_updatePostage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updatePostage.length === 1) {
    Q.fcall(this._handler.updatePostage, args.postage)
      .then(function(result) {
        var result = new BaseTamplateServ_updatePostage_result({success: result});
        output.writeMessageBegin("updatePostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_updatePostage_result(err);
        output.writeMessageBegin("updatePostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updatePostage(args.postage,  function (err, result) {
      var result = new BaseTamplateServ_updatePostage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updatePostage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_deletePostage = function(seqid, input, output) {
  var args = new BaseTamplateServ_deletePostage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePostage.length === 2) {
    Q.fcall(this._handler.deletePostage, args.sellerId, args.id)
      .then(function(result) {
        var result = new BaseTamplateServ_deletePostage_result({success: result});
        output.writeMessageBegin("deletePostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_deletePostage_result(err);
        output.writeMessageBegin("deletePostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePostage(args.sellerId, args.id,  function (err, result) {
      var result = new BaseTamplateServ_deletePostage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deletePostage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_deletePostageBatch = function(seqid, input, output) {
  var args = new BaseTamplateServ_deletePostageBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePostageBatch.length === 1) {
    Q.fcall(this._handler.deletePostageBatch, args.PostageList)
      .then(function(result) {
        var result = new BaseTamplateServ_deletePostageBatch_result({success: result});
        output.writeMessageBegin("deletePostageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_deletePostageBatch_result(err);
        output.writeMessageBegin("deletePostageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePostageBatch(args.PostageList,  function (err, result) {
      var result = new BaseTamplateServ_deletePostageBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deletePostageBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BaseTamplateServProcessor.prototype.process_queryPostage = function(seqid, input, output) {
  var args = new BaseTamplateServ_queryPostage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryPostage.length === 1) {
    Q.fcall(this._handler.queryPostage, args.param)
      .then(function(result) {
        var result = new BaseTamplateServ_queryPostage_result({success: result});
        output.writeMessageBegin("queryPostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BaseTamplateServ_queryPostage_result(err);
        output.writeMessageBegin("queryPostage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryPostage(args.param,  function (err, result) {
      var result = new BaseTamplateServ_queryPostage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryPostage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

