//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
SystemMessage = module.exports.SystemMessage = function(args) {
  this.id = null;
  this.title = null;
  this.content = null;
  this.beginDate = null;
  this.endDate = null;
  this.status = null;
  this.pushTarget = null;
  this.createTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.beginDate !== undefined) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined) {
      this.endDate = args.endDate;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.pushTarget !== undefined) {
      this.pushTarget = args.pushTarget;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
  }
};
SystemMessage.prototype = {};
SystemMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.beginDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pushTarget = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemMessage.prototype.write = function(output) {
  output.writeStructBegin('SystemMessage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.STRING, 4);
    output.writeString(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.STRING, 5);
    output.writeString(this.endDate);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 6);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.pushTarget !== null && this.pushTarget !== undefined) {
    output.writeFieldBegin('pushTarget', Thrift.Type.I32, 7);
    output.writeI32(this.pushTarget);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 8);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SystemMessageResult = module.exports.SystemMessageResult = function(args) {
  this.result = null;
  this.messages = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.messages !== undefined) {
      this.messages = args.messages;
    }
  }
};
SystemMessageResult.prototype = {};
SystemMessageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.messages = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.SystemMessage();
          elem6.read(input);
          this.messages.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemMessageResult.prototype.write = function(output) {
  output.writeStructBegin('SystemMessageResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.messages !== null && this.messages !== undefined) {
    output.writeFieldBegin('messages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
    for (var iter7 in this.messages)
    {
      if (this.messages.hasOwnProperty(iter7))
      {
        iter7 = this.messages[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushMessage = module.exports.PushMessage = function(args) {
  this.title = null;
  this.content = null;
  this.contentType = null;
  if (args) {
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
  }
};
PushMessage.prototype = {};
PushMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushMessage.prototype.write = function(output) {
  output.writeStructBegin('PushMessage');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.STRING, 3);
    output.writeString(this.contentType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppUpgradeInfo = module.exports.AppUpgradeInfo = function(args) {
  this.appType = null;
  this.version = null;
  this.minVersion = null;
  this.maxVersion = null;
  this.upgradeType = null;
  this.url = null;
  this.upgradeDesc = null;
  if (args) {
    if (args.appType !== undefined) {
      this.appType = args.appType;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.minVersion !== undefined) {
      this.minVersion = args.minVersion;
    }
    if (args.maxVersion !== undefined) {
      this.maxVersion = args.maxVersion;
    }
    if (args.upgradeType !== undefined) {
      this.upgradeType = args.upgradeType;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.upgradeDesc !== undefined) {
      this.upgradeDesc = args.upgradeDesc;
    }
  }
};
AppUpgradeInfo.prototype = {};
AppUpgradeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.minVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.upgradeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppUpgradeInfo.prototype.write = function(output) {
  output.writeStructBegin('AppUpgradeInfo');
  if (this.appType !== null && this.appType !== undefined) {
    output.writeFieldBegin('appType', Thrift.Type.I32, 1);
    output.writeI32(this.appType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.minVersion !== null && this.minVersion !== undefined) {
    output.writeFieldBegin('minVersion', Thrift.Type.I32, 3);
    output.writeI32(this.minVersion);
    output.writeFieldEnd();
  }
  if (this.maxVersion !== null && this.maxVersion !== undefined) {
    output.writeFieldBegin('maxVersion', Thrift.Type.I32, 4);
    output.writeI32(this.maxVersion);
    output.writeFieldEnd();
  }
  if (this.upgradeType !== null && this.upgradeType !== undefined) {
    output.writeFieldBegin('upgradeType', Thrift.Type.I32, 5);
    output.writeI32(this.upgradeType);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 6);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.upgradeDesc !== null && this.upgradeDesc !== undefined) {
    output.writeFieldBegin('upgradeDesc', Thrift.Type.STRING, 7);
    output.writeString(this.upgradeDesc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetUpgradeParam = module.exports.GetUpgradeParam = function(args) {
  this.appType = null;
  this.version = null;
  if (args) {
    if (args.appType !== undefined) {
      this.appType = args.appType;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
GetUpgradeParam.prototype = {};
GetUpgradeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetUpgradeParam.prototype.write = function(output) {
  output.writeStructBegin('GetUpgradeParam');
  if (this.appType !== null && this.appType !== undefined) {
    output.writeFieldBegin('appType', Thrift.Type.I32, 1);
    output.writeI32(this.appType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppUpgradeResult = module.exports.AppUpgradeResult = function(args) {
  this.result = null;
  this.upgradeInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.upgradeInfo !== undefined) {
      this.upgradeInfo = args.upgradeInfo;
    }
  }
};
AppUpgradeResult.prototype = {};
AppUpgradeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.upgradeInfo = new ttypes.AppUpgradeInfo();
        this.upgradeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppUpgradeResult.prototype.write = function(output) {
  output.writeStructBegin('AppUpgradeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.upgradeInfo !== null && this.upgradeInfo !== undefined) {
    output.writeFieldBegin('upgradeInfo', Thrift.Type.STRUCT, 2);
    this.upgradeInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

