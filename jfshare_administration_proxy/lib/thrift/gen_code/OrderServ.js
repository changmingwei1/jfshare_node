//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pay_ttypes = require('./pay_types')


var ttypes = require('./order_types');
//HELPER FUNCTIONS AND STRUCTURES

OrderServ_createOrder_args = function(args) {
  this.orderList = null;
  if (args) {
    if (args.orderList !== undefined) {
      this.orderList = args.orderList;
    }
  }
};
OrderServ_createOrder_args.prototype = {};
OrderServ_createOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.orderList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.Order();
          elem70.read(input);
          this.orderList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_createOrder_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_createOrder_args');
  if (this.orderList !== null && this.orderList !== undefined) {
    output.writeFieldBegin('orderList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.orderList.length);
    for (var iter71 in this.orderList)
    {
      if (this.orderList.hasOwnProperty(iter71))
      {
        iter71 = this.orderList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_createOrder_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_createOrder_result.prototype = {};
OrderServ_createOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_createOrder_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_createOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_updateDeliverInfo_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.deliverInfo = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.deliverInfo !== undefined) {
      this.deliverInfo = args.deliverInfo;
    }
  }
};
OrderServ_updateDeliverInfo_args.prototype = {};
OrderServ_updateDeliverInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.deliverInfo = new ttypes.DeliverInfo();
        this.deliverInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_updateDeliverInfo_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_updateDeliverInfo_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.deliverInfo !== null && this.deliverInfo !== undefined) {
    output.writeFieldBegin('deliverInfo', Thrift.Type.STRUCT, 3);
    this.deliverInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_updateDeliverInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_updateDeliverInfo_result.prototype = {};
OrderServ_updateDeliverInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_updateDeliverInfo_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_updateDeliverInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_deliver_args = function(args) {
  this.sellerId = null;
  this.deliverInfo = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.deliverInfo !== undefined) {
      this.deliverInfo = args.deliverInfo;
    }
  }
};
OrderServ_deliver_args.prototype = {};
OrderServ_deliver_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.deliverInfo = new ttypes.DeliverInfo();
        this.deliverInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_deliver_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_deliver_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.deliverInfo !== null && this.deliverInfo !== undefined) {
    output.writeFieldBegin('deliverInfo', Thrift.Type.STRUCT, 2);
    this.deliverInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_deliver_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_deliver_result.prototype = {};
OrderServ_deliver_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_deliver_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_deliver_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_deliverVir_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
OrderServ_deliverVir_args.prototype = {};
OrderServ_deliverVir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.DeliverVirParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_deliverVir_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_deliverVir_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_deliverVir_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_deliverVir_result.prototype = {};
OrderServ_deliverVir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_deliverVir_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_deliverVir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_updateExpressInfo_args = function(args) {
  this.sellerId = null;
  this.orderId = null;
  this.expressId = null;
  this.expressNo = null;
  this.expressName = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.expressId !== undefined) {
      this.expressId = args.expressId;
    }
    if (args.expressNo !== undefined) {
      this.expressNo = args.expressNo;
    }
    if (args.expressName !== undefined) {
      this.expressName = args.expressName;
    }
  }
};
OrderServ_updateExpressInfo_args.prototype = {};
OrderServ_updateExpressInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.expressId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.expressNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.expressName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_updateExpressInfo_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_updateExpressInfo_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.expressId !== null && this.expressId !== undefined) {
    output.writeFieldBegin('expressId', Thrift.Type.STRING, 3);
    output.writeString(this.expressId);
    output.writeFieldEnd();
  }
  if (this.expressNo !== null && this.expressNo !== undefined) {
    output.writeFieldBegin('expressNo', Thrift.Type.STRING, 4);
    output.writeString(this.expressNo);
    output.writeFieldEnd();
  }
  if (this.expressName !== null && this.expressName !== undefined) {
    output.writeFieldBegin('expressName', Thrift.Type.STRING, 5);
    output.writeString(this.expressName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_updateExpressInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_updateExpressInfo_result.prototype = {};
OrderServ_updateExpressInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_updateExpressInfo_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_updateExpressInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_confirmReceipt_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.orderId = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
OrderServ_confirmReceipt_args.prototype = {};
OrderServ_confirmReceipt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_confirmReceipt_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_confirmReceipt_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_confirmReceipt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_confirmReceipt_result.prototype = {};
OrderServ_confirmReceipt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_confirmReceipt_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_confirmReceipt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_cancelOrder_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.orderId = null;
  this.reason = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
  }
};
OrderServ_cancelOrder_args.prototype = {};
OrderServ_cancelOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_cancelOrder_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_cancelOrder_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.I32, 4);
    output.writeI32(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_cancelOrder_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_cancelOrder_result.prototype = {};
OrderServ_cancelOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_cancelOrder_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_cancelOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderProfileQuery_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.conditions = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
OrderServ_orderProfileQuery_args.prototype = {};
OrderServ_orderProfileQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.OrderQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderProfileQuery_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderProfileQuery_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 3);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderProfileQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_orderProfileQuery_result.prototype = {};
OrderServ_orderProfileQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderProfileQuery_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderProfileQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_queryOrderDetail_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.orderId = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
OrderServ_queryOrderDetail_args.prototype = {};
OrderServ_queryOrderDetail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_queryOrderDetail_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_queryOrderDetail_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_queryOrderDetail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_queryOrderDetail_result.prototype = {};
OrderServ_queryOrderDetail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderDetailResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_queryOrderDetail_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_queryOrderDetail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderStateQuery_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.conditions = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
OrderServ_orderStateQuery_args.prototype = {};
OrderServ_orderStateQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.OrderQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderStateQuery_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderStateQuery_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 3);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderStateQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_orderStateQuery_result.prototype = {};
OrderServ_orderStateQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderStateQuery_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderStateQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_payApply_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
OrderServ_payApply_args.prototype = {};
OrderServ_payApply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.PayParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_payApply_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_payApply_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_payApply_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_payApply_result.prototype = {};
OrderServ_payApply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_payApply_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_payApply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_payFinish_args = function(args) {
  this.payRes = null;
  if (args) {
    if (args.payRes !== undefined) {
      this.payRes = args.payRes;
    }
  }
};
OrderServ_payFinish_args.prototype = {};
OrderServ_payFinish_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payRes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_payFinish_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_payFinish_args');
  if (this.payRes !== null && this.payRes !== undefined) {
    output.writeFieldBegin('payRes', Thrift.Type.STRING, 1);
    output.writeString(this.payRes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_payFinish_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_payFinish_result.prototype = {};
OrderServ_payFinish_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_payFinish_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_payFinish_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_payState_args = function(args) {
  this.payState = null;
  if (args) {
    if (args.payState !== undefined) {
      this.payState = args.payState;
    }
  }
};
OrderServ_payState_args.prototype = {};
OrderServ_payState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payState = new ttypes.PayState();
        this.payState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_payState_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_payState_args');
  if (this.payState !== null && this.payState !== undefined) {
    output.writeFieldBegin('payState', Thrift.Type.STRUCT, 1);
    this.payState.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_payState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_payState_result.prototype = {};
OrderServ_payState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PayStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_payState_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_payState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_batchExportOrder_args = function(args) {
  this.sellerId = null;
  this.conditions = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
OrderServ_batchExportOrder_args.prototype = {};
OrderServ_batchExportOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.OrderQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_batchExportOrder_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_batchExportOrder_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 2);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_batchExportOrder_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_batchExportOrder_result.prototype = {};
OrderServ_batchExportOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_batchExportOrder_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_batchExportOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_batchExportOrderFull_args = function(args) {
  this.conditions = null;
  if (args) {
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
OrderServ_batchExportOrderFull_args.prototype = {};
OrderServ_batchExportOrderFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.OrderQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_batchExportOrderFull_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_batchExportOrderFull_args');
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 1);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_batchExportOrderFull_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_batchExportOrderFull_result.prototype = {};
OrderServ_batchExportOrderFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_batchExportOrderFull_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_batchExportOrderFull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_getExportOrderResult_args = function(args) {
  this.queryKey = null;
  if (args) {
    if (args.queryKey !== undefined) {
      this.queryKey = args.queryKey;
    }
  }
};
OrderServ_getExportOrderResult_args.prototype = {};
OrderServ_getExportOrderResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_getExportOrderResult_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_getExportOrderResult_args');
  if (this.queryKey !== null && this.queryKey !== undefined) {
    output.writeFieldBegin('queryKey', Thrift.Type.STRING, 1);
    output.writeString(this.queryKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_getExportOrderResult_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_getExportOrderResult_result.prototype = {};
OrderServ_getExportOrderResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_getExportOrderResult_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_getExportOrderResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_batchDeliverOrder_args = function(args) {
  this.sellerId = null;
  this.param = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
OrderServ_batchDeliverOrder_args.prototype = {};
OrderServ_batchDeliverOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.BatchDeliverParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_batchDeliverOrder_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_batchDeliverOrder_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_batchDeliverOrder_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_batchDeliverOrder_result.prototype = {};
OrderServ_batchDeliverOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BatchDeliverResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_batchDeliverOrder_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_batchDeliverOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderProfileQueryFull_args = function(args) {
  this.conditions = null;
  if (args) {
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
OrderServ_orderProfileQueryFull_args.prototype = {};
OrderServ_orderProfileQueryFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.OrderQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderProfileQueryFull_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderProfileQueryFull_args');
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 1);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderProfileQueryFull_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_orderProfileQueryFull_result.prototype = {};
OrderServ_orderProfileQueryFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderProfileQueryFull_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderProfileQueryFull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_queryOrderDetailOffline_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.orderId = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
OrderServ_queryOrderDetailOffline_args.prototype = {};
OrderServ_queryOrderDetailOffline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_queryOrderDetailOffline_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_queryOrderDetailOffline_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_queryOrderDetailOffline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_queryOrderDetailOffline_result.prototype = {};
OrderServ_queryOrderDetailOffline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderDetailResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_queryOrderDetailOffline_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_queryOrderDetailOffline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderProfileQueryOffline_args = function(args) {
  this.userType = null;
  this.userId = null;
  this.conditions = null;
  if (args) {
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
OrderServ_orderProfileQueryOffline_args.prototype = {};
OrderServ_orderProfileQueryOffline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.OrderQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderProfileQueryOffline_args.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderProfileQueryOffline_args');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 1);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 3);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServ_orderProfileQueryOffline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OrderServ_orderProfileQueryOffline_result.prototype = {};
OrderServ_orderProfileQueryOffline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderServ_orderProfileQueryOffline_result.prototype.write = function(output) {
  output.writeStructBegin('OrderServ_orderProfileQueryOffline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
OrderServClient.prototype = {};
OrderServClient.prototype.seqid = function() { return this._seqid; }
OrderServClient.prototype.new_seqid = function() { return this._seqid += 1; }
OrderServClient.prototype.createOrder = function(orderList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createOrder(orderList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createOrder(orderList);
  }
};

OrderServClient.prototype.send_createOrder = function(orderList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createOrder', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_createOrder_args();
  args.orderList = orderList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_createOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_createOrder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createOrder failed: unknown result');
};
OrderServClient.prototype.updateDeliverInfo = function(userType, userId, deliverInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDeliverInfo(userType, userId, deliverInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDeliverInfo(userType, userId, deliverInfo);
  }
};

OrderServClient.prototype.send_updateDeliverInfo = function(userType, userId, deliverInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDeliverInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_updateDeliverInfo_args();
  args.userType = userType;
  args.userId = userId;
  args.deliverInfo = deliverInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_updateDeliverInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_updateDeliverInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDeliverInfo failed: unknown result');
};
OrderServClient.prototype.deliver = function(sellerId, deliverInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deliver(sellerId, deliverInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deliver(sellerId, deliverInfo);
  }
};

OrderServClient.prototype.send_deliver = function(sellerId, deliverInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deliver', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_deliver_args();
  args.sellerId = sellerId;
  args.deliverInfo = deliverInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_deliver = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_deliver_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deliver failed: unknown result');
};
OrderServClient.prototype.deliverVir = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deliverVir(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deliverVir(param);
  }
};

OrderServClient.prototype.send_deliverVir = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deliverVir', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_deliverVir_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_deliverVir = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_deliverVir_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deliverVir failed: unknown result');
};
OrderServClient.prototype.updateExpressInfo = function(sellerId, orderId, expressId, expressNo, expressName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateExpressInfo(sellerId, orderId, expressId, expressNo, expressName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateExpressInfo(sellerId, orderId, expressId, expressNo, expressName);
  }
};

OrderServClient.prototype.send_updateExpressInfo = function(sellerId, orderId, expressId, expressNo, expressName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateExpressInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_updateExpressInfo_args();
  args.sellerId = sellerId;
  args.orderId = orderId;
  args.expressId = expressId;
  args.expressNo = expressNo;
  args.expressName = expressName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_updateExpressInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_updateExpressInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateExpressInfo failed: unknown result');
};
OrderServClient.prototype.confirmReceipt = function(userType, userId, orderId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirmReceipt(userType, userId, orderId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirmReceipt(userType, userId, orderId);
  }
};

OrderServClient.prototype.send_confirmReceipt = function(userType, userId, orderId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('confirmReceipt', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_confirmReceipt_args();
  args.userType = userType;
  args.userId = userId;
  args.orderId = orderId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_confirmReceipt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_confirmReceipt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirmReceipt failed: unknown result');
};
OrderServClient.prototype.cancelOrder = function(userType, userId, orderId, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelOrder(userType, userId, orderId, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelOrder(userType, userId, orderId, reason);
  }
};

OrderServClient.prototype.send_cancelOrder = function(userType, userId, orderId, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelOrder', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_cancelOrder_args();
  args.userType = userType;
  args.userId = userId;
  args.orderId = orderId;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_cancelOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_cancelOrder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cancelOrder failed: unknown result');
};
OrderServClient.prototype.orderProfileQuery = function(userType, userId, conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_orderProfileQuery(userType, userId, conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_orderProfileQuery(userType, userId, conditions);
  }
};

OrderServClient.prototype.send_orderProfileQuery = function(userType, userId, conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('orderProfileQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_orderProfileQuery_args();
  args.userType = userType;
  args.userId = userId;
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_orderProfileQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_orderProfileQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('orderProfileQuery failed: unknown result');
};
OrderServClient.prototype.queryOrderDetail = function(userType, userId, orderId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryOrderDetail(userType, userId, orderId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryOrderDetail(userType, userId, orderId);
  }
};

OrderServClient.prototype.send_queryOrderDetail = function(userType, userId, orderId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryOrderDetail', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_queryOrderDetail_args();
  args.userType = userType;
  args.userId = userId;
  args.orderId = orderId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_queryOrderDetail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_queryOrderDetail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryOrderDetail failed: unknown result');
};
OrderServClient.prototype.orderStateQuery = function(userType, userId, conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_orderStateQuery(userType, userId, conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_orderStateQuery(userType, userId, conditions);
  }
};

OrderServClient.prototype.send_orderStateQuery = function(userType, userId, conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('orderStateQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_orderStateQuery_args();
  args.userType = userType;
  args.userId = userId;
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_orderStateQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_orderStateQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('orderStateQuery failed: unknown result');
};
OrderServClient.prototype.payApply = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_payApply(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_payApply(param);
  }
};

OrderServClient.prototype.send_payApply = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('payApply', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_payApply_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_payApply = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_payApply_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('payApply failed: unknown result');
};
OrderServClient.prototype.payFinish = function(payRes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_payFinish(payRes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_payFinish(payRes);
  }
};

OrderServClient.prototype.send_payFinish = function(payRes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('payFinish', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_payFinish_args();
  args.payRes = payRes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_payFinish = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_payFinish_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('payFinish failed: unknown result');
};
OrderServClient.prototype.payState = function(payState, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_payState(payState);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_payState(payState);
  }
};

OrderServClient.prototype.send_payState = function(payState) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('payState', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_payState_args();
  args.payState = payState;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_payState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_payState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('payState failed: unknown result');
};
OrderServClient.prototype.batchExportOrder = function(sellerId, conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_batchExportOrder(sellerId, conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_batchExportOrder(sellerId, conditions);
  }
};

OrderServClient.prototype.send_batchExportOrder = function(sellerId, conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('batchExportOrder', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_batchExportOrder_args();
  args.sellerId = sellerId;
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_batchExportOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_batchExportOrder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('batchExportOrder failed: unknown result');
};
OrderServClient.prototype.batchExportOrderFull = function(conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_batchExportOrderFull(conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_batchExportOrderFull(conditions);
  }
};

OrderServClient.prototype.send_batchExportOrderFull = function(conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('batchExportOrderFull', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_batchExportOrderFull_args();
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_batchExportOrderFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_batchExportOrderFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('batchExportOrderFull failed: unknown result');
};
OrderServClient.prototype.getExportOrderResult = function(queryKey, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getExportOrderResult(queryKey);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getExportOrderResult(queryKey);
  }
};

OrderServClient.prototype.send_getExportOrderResult = function(queryKey) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExportOrderResult', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_getExportOrderResult_args();
  args.queryKey = queryKey;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_getExportOrderResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_getExportOrderResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExportOrderResult failed: unknown result');
};
OrderServClient.prototype.batchDeliverOrder = function(sellerId, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_batchDeliverOrder(sellerId, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_batchDeliverOrder(sellerId, param);
  }
};

OrderServClient.prototype.send_batchDeliverOrder = function(sellerId, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('batchDeliverOrder', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_batchDeliverOrder_args();
  args.sellerId = sellerId;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_batchDeliverOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_batchDeliverOrder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('batchDeliverOrder failed: unknown result');
};
OrderServClient.prototype.orderProfileQueryFull = function(conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_orderProfileQueryFull(conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_orderProfileQueryFull(conditions);
  }
};

OrderServClient.prototype.send_orderProfileQueryFull = function(conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('orderProfileQueryFull', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_orderProfileQueryFull_args();
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_orderProfileQueryFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_orderProfileQueryFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('orderProfileQueryFull failed: unknown result');
};
OrderServClient.prototype.queryOrderDetailOffline = function(userType, userId, orderId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryOrderDetailOffline(userType, userId, orderId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryOrderDetailOffline(userType, userId, orderId);
  }
};

OrderServClient.prototype.send_queryOrderDetailOffline = function(userType, userId, orderId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryOrderDetailOffline', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_queryOrderDetailOffline_args();
  args.userType = userType;
  args.userId = userId;
  args.orderId = orderId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_queryOrderDetailOffline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_queryOrderDetailOffline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryOrderDetailOffline failed: unknown result');
};
OrderServClient.prototype.orderProfileQueryOffline = function(userType, userId, conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_orderProfileQueryOffline(userType, userId, conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_orderProfileQueryOffline(userType, userId, conditions);
  }
};

OrderServClient.prototype.send_orderProfileQueryOffline = function(userType, userId, conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('orderProfileQueryOffline', Thrift.MessageType.CALL, this.seqid());
  var args = new OrderServ_orderProfileQueryOffline_args();
  args.userType = userType;
  args.userId = userId;
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

OrderServClient.prototype.recv_orderProfileQueryOffline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OrderServ_orderProfileQueryOffline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('orderProfileQueryOffline failed: unknown result');
};
OrderServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
OrderServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

OrderServProcessor.prototype.process_createOrder = function(seqid, input, output) {
  var args = new OrderServ_createOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createOrder.length === 1) {
    Q.fcall(this._handler.createOrder, args.orderList)
      .then(function(result) {
        var result = new OrderServ_createOrder_result({success: result});
        output.writeMessageBegin("createOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_createOrder_result(err);
        output.writeMessageBegin("createOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createOrder(args.orderList,  function (err, result) {
      var result = new OrderServ_createOrder_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createOrder", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_updateDeliverInfo = function(seqid, input, output) {
  var args = new OrderServ_updateDeliverInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDeliverInfo.length === 3) {
    Q.fcall(this._handler.updateDeliverInfo, args.userType, args.userId, args.deliverInfo)
      .then(function(result) {
        var result = new OrderServ_updateDeliverInfo_result({success: result});
        output.writeMessageBegin("updateDeliverInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_updateDeliverInfo_result(err);
        output.writeMessageBegin("updateDeliverInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDeliverInfo(args.userType, args.userId, args.deliverInfo,  function (err, result) {
      var result = new OrderServ_updateDeliverInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateDeliverInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_deliver = function(seqid, input, output) {
  var args = new OrderServ_deliver_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deliver.length === 2) {
    Q.fcall(this._handler.deliver, args.sellerId, args.deliverInfo)
      .then(function(result) {
        var result = new OrderServ_deliver_result({success: result});
        output.writeMessageBegin("deliver", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_deliver_result(err);
        output.writeMessageBegin("deliver", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deliver(args.sellerId, args.deliverInfo,  function (err, result) {
      var result = new OrderServ_deliver_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deliver", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_deliverVir = function(seqid, input, output) {
  var args = new OrderServ_deliverVir_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deliverVir.length === 1) {
    Q.fcall(this._handler.deliverVir, args.param)
      .then(function(result) {
        var result = new OrderServ_deliverVir_result({success: result});
        output.writeMessageBegin("deliverVir", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_deliverVir_result(err);
        output.writeMessageBegin("deliverVir", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deliverVir(args.param,  function (err, result) {
      var result = new OrderServ_deliverVir_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deliverVir", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_updateExpressInfo = function(seqid, input, output) {
  var args = new OrderServ_updateExpressInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateExpressInfo.length === 5) {
    Q.fcall(this._handler.updateExpressInfo, args.sellerId, args.orderId, args.expressId, args.expressNo, args.expressName)
      .then(function(result) {
        var result = new OrderServ_updateExpressInfo_result({success: result});
        output.writeMessageBegin("updateExpressInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_updateExpressInfo_result(err);
        output.writeMessageBegin("updateExpressInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateExpressInfo(args.sellerId, args.orderId, args.expressId, args.expressNo, args.expressName,  function (err, result) {
      var result = new OrderServ_updateExpressInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateExpressInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_confirmReceipt = function(seqid, input, output) {
  var args = new OrderServ_confirmReceipt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirmReceipt.length === 3) {
    Q.fcall(this._handler.confirmReceipt, args.userType, args.userId, args.orderId)
      .then(function(result) {
        var result = new OrderServ_confirmReceipt_result({success: result});
        output.writeMessageBegin("confirmReceipt", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_confirmReceipt_result(err);
        output.writeMessageBegin("confirmReceipt", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.confirmReceipt(args.userType, args.userId, args.orderId,  function (err, result) {
      var result = new OrderServ_confirmReceipt_result((err != null ? err : {success: result}));
      output.writeMessageBegin("confirmReceipt", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_cancelOrder = function(seqid, input, output) {
  var args = new OrderServ_cancelOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelOrder.length === 4) {
    Q.fcall(this._handler.cancelOrder, args.userType, args.userId, args.orderId, args.reason)
      .then(function(result) {
        var result = new OrderServ_cancelOrder_result({success: result});
        output.writeMessageBegin("cancelOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_cancelOrder_result(err);
        output.writeMessageBegin("cancelOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelOrder(args.userType, args.userId, args.orderId, args.reason,  function (err, result) {
      var result = new OrderServ_cancelOrder_result((err != null ? err : {success: result}));
      output.writeMessageBegin("cancelOrder", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_orderProfileQuery = function(seqid, input, output) {
  var args = new OrderServ_orderProfileQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.orderProfileQuery.length === 3) {
    Q.fcall(this._handler.orderProfileQuery, args.userType, args.userId, args.conditions)
      .then(function(result) {
        var result = new OrderServ_orderProfileQuery_result({success: result});
        output.writeMessageBegin("orderProfileQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_orderProfileQuery_result(err);
        output.writeMessageBegin("orderProfileQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.orderProfileQuery(args.userType, args.userId, args.conditions,  function (err, result) {
      var result = new OrderServ_orderProfileQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("orderProfileQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_queryOrderDetail = function(seqid, input, output) {
  var args = new OrderServ_queryOrderDetail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryOrderDetail.length === 3) {
    Q.fcall(this._handler.queryOrderDetail, args.userType, args.userId, args.orderId)
      .then(function(result) {
        var result = new OrderServ_queryOrderDetail_result({success: result});
        output.writeMessageBegin("queryOrderDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_queryOrderDetail_result(err);
        output.writeMessageBegin("queryOrderDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryOrderDetail(args.userType, args.userId, args.orderId,  function (err, result) {
      var result = new OrderServ_queryOrderDetail_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryOrderDetail", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_orderStateQuery = function(seqid, input, output) {
  var args = new OrderServ_orderStateQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.orderStateQuery.length === 3) {
    Q.fcall(this._handler.orderStateQuery, args.userType, args.userId, args.conditions)
      .then(function(result) {
        var result = new OrderServ_orderStateQuery_result({success: result});
        output.writeMessageBegin("orderStateQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_orderStateQuery_result(err);
        output.writeMessageBegin("orderStateQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.orderStateQuery(args.userType, args.userId, args.conditions,  function (err, result) {
      var result = new OrderServ_orderStateQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("orderStateQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_payApply = function(seqid, input, output) {
  var args = new OrderServ_payApply_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.payApply.length === 1) {
    Q.fcall(this._handler.payApply, args.param)
      .then(function(result) {
        var result = new OrderServ_payApply_result({success: result});
        output.writeMessageBegin("payApply", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_payApply_result(err);
        output.writeMessageBegin("payApply", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.payApply(args.param,  function (err, result) {
      var result = new OrderServ_payApply_result((err != null ? err : {success: result}));
      output.writeMessageBegin("payApply", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_payFinish = function(seqid, input, output) {
  var args = new OrderServ_payFinish_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.payFinish.length === 1) {
    Q.fcall(this._handler.payFinish, args.payRes)
      .then(function(result) {
        var result = new OrderServ_payFinish_result({success: result});
        output.writeMessageBegin("payFinish", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_payFinish_result(err);
        output.writeMessageBegin("payFinish", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.payFinish(args.payRes,  function (err, result) {
      var result = new OrderServ_payFinish_result((err != null ? err : {success: result}));
      output.writeMessageBegin("payFinish", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_payState = function(seqid, input, output) {
  var args = new OrderServ_payState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.payState.length === 1) {
    Q.fcall(this._handler.payState, args.payState)
      .then(function(result) {
        var result = new OrderServ_payState_result({success: result});
        output.writeMessageBegin("payState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_payState_result(err);
        output.writeMessageBegin("payState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.payState(args.payState,  function (err, result) {
      var result = new OrderServ_payState_result((err != null ? err : {success: result}));
      output.writeMessageBegin("payState", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_batchExportOrder = function(seqid, input, output) {
  var args = new OrderServ_batchExportOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.batchExportOrder.length === 2) {
    Q.fcall(this._handler.batchExportOrder, args.sellerId, args.conditions)
      .then(function(result) {
        var result = new OrderServ_batchExportOrder_result({success: result});
        output.writeMessageBegin("batchExportOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_batchExportOrder_result(err);
        output.writeMessageBegin("batchExportOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.batchExportOrder(args.sellerId, args.conditions,  function (err, result) {
      var result = new OrderServ_batchExportOrder_result((err != null ? err : {success: result}));
      output.writeMessageBegin("batchExportOrder", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_batchExportOrderFull = function(seqid, input, output) {
  var args = new OrderServ_batchExportOrderFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.batchExportOrderFull.length === 1) {
    Q.fcall(this._handler.batchExportOrderFull, args.conditions)
      .then(function(result) {
        var result = new OrderServ_batchExportOrderFull_result({success: result});
        output.writeMessageBegin("batchExportOrderFull", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_batchExportOrderFull_result(err);
        output.writeMessageBegin("batchExportOrderFull", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.batchExportOrderFull(args.conditions,  function (err, result) {
      var result = new OrderServ_batchExportOrderFull_result((err != null ? err : {success: result}));
      output.writeMessageBegin("batchExportOrderFull", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_getExportOrderResult = function(seqid, input, output) {
  var args = new OrderServ_getExportOrderResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getExportOrderResult.length === 1) {
    Q.fcall(this._handler.getExportOrderResult, args.queryKey)
      .then(function(result) {
        var result = new OrderServ_getExportOrderResult_result({success: result});
        output.writeMessageBegin("getExportOrderResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_getExportOrderResult_result(err);
        output.writeMessageBegin("getExportOrderResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getExportOrderResult(args.queryKey,  function (err, result) {
      var result = new OrderServ_getExportOrderResult_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getExportOrderResult", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_batchDeliverOrder = function(seqid, input, output) {
  var args = new OrderServ_batchDeliverOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.batchDeliverOrder.length === 2) {
    Q.fcall(this._handler.batchDeliverOrder, args.sellerId, args.param)
      .then(function(result) {
        var result = new OrderServ_batchDeliverOrder_result({success: result});
        output.writeMessageBegin("batchDeliverOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_batchDeliverOrder_result(err);
        output.writeMessageBegin("batchDeliverOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.batchDeliverOrder(args.sellerId, args.param,  function (err, result) {
      var result = new OrderServ_batchDeliverOrder_result((err != null ? err : {success: result}));
      output.writeMessageBegin("batchDeliverOrder", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_orderProfileQueryFull = function(seqid, input, output) {
  var args = new OrderServ_orderProfileQueryFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.orderProfileQueryFull.length === 1) {
    Q.fcall(this._handler.orderProfileQueryFull, args.conditions)
      .then(function(result) {
        var result = new OrderServ_orderProfileQueryFull_result({success: result});
        output.writeMessageBegin("orderProfileQueryFull", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_orderProfileQueryFull_result(err);
        output.writeMessageBegin("orderProfileQueryFull", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.orderProfileQueryFull(args.conditions,  function (err, result) {
      var result = new OrderServ_orderProfileQueryFull_result((err != null ? err : {success: result}));
      output.writeMessageBegin("orderProfileQueryFull", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_queryOrderDetailOffline = function(seqid, input, output) {
  var args = new OrderServ_queryOrderDetailOffline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryOrderDetailOffline.length === 3) {
    Q.fcall(this._handler.queryOrderDetailOffline, args.userType, args.userId, args.orderId)
      .then(function(result) {
        var result = new OrderServ_queryOrderDetailOffline_result({success: result});
        output.writeMessageBegin("queryOrderDetailOffline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_queryOrderDetailOffline_result(err);
        output.writeMessageBegin("queryOrderDetailOffline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryOrderDetailOffline(args.userType, args.userId, args.orderId,  function (err, result) {
      var result = new OrderServ_queryOrderDetailOffline_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryOrderDetailOffline", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

OrderServProcessor.prototype.process_orderProfileQueryOffline = function(seqid, input, output) {
  var args = new OrderServ_orderProfileQueryOffline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.orderProfileQueryOffline.length === 3) {
    Q.fcall(this._handler.orderProfileQueryOffline, args.userType, args.userId, args.conditions)
      .then(function(result) {
        var result = new OrderServ_orderProfileQueryOffline_result({success: result});
        output.writeMessageBegin("orderProfileQueryOffline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new OrderServ_orderProfileQueryOffline_result(err);
        output.writeMessageBegin("orderProfileQueryOffline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.orderProfileQueryOffline(args.userType, args.userId, args.conditions,  function (err, result) {
      var result = new OrderServ_orderProfileQueryOffline_result((err != null ? err : {success: result}));
      output.writeMessageBegin("orderProfileQueryOffline", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

