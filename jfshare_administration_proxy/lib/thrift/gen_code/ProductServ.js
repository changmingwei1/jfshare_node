//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./product_types');
//HELPER FUNCTIONS AND STRUCTURES

ProductServ_queryProduct_args = function(args) {
  this.productId = null;
  this.param = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryProduct_args.prototype = {};
ProductServ_queryProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProduct_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProduct_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProduct_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryProduct_result.prototype = {};
ProductServ_queryProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProduct_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductSku_args = function(args) {
  this.productId = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
ProductServ_queryProductSku_args.prototype = {};
ProductServ_queryProductSku_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductSku_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductSku_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductSku_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryProductSku_result.prototype = {};
ProductServ_queryProductSku_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSkuResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductSku_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductSku_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryHotSKU_args = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.param = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryHotSKU_args.prototype = {};
ProductServ_queryHotSKU_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryHotSKU_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryHotSKU_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 3);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryHotSKU_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryHotSKU_result.prototype = {};
ProductServ_queryHotSKU_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryHotSKU_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryHotSKU_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryHotSKUV1_args = function(args) {
  this.skuParam = null;
  this.param = null;
  if (args) {
    if (args.skuParam !== undefined) {
      this.skuParam = args.skuParam;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryHotSKUV1_args.prototype = {};
ProductServ_queryHotSKUV1_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.skuParam = new ttypes.ProductSkuParam();
        this.skuParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryHotSKUV1_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryHotSKUV1_args');
  if (this.skuParam !== null && this.skuParam !== undefined) {
    output.writeFieldBegin('skuParam', Thrift.Type.STRUCT, 1);
    this.skuParam.write(output);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryHotSKUV1_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryHotSKUV1_result.prototype = {};
ProductServ_queryHotSKUV1_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryHotSKUV1_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryHotSKUV1_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryHotSKUBatch_args = function(args) {
  this.skuParam = null;
  this.param = null;
  if (args) {
    if (args.skuParam !== undefined) {
      this.skuParam = args.skuParam;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryHotSKUBatch_args.prototype = {};
ProductServ_queryHotSKUBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.skuParam = new ttypes.ProductSkuBatchParam();
        this.skuParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryHotSKUBatch_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryHotSKUBatch_args');
  if (this.skuParam !== null && this.skuParam !== undefined) {
    output.writeFieldBegin('skuParam', Thrift.Type.STRUCT, 1);
    this.skuParam.write(output);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryHotSKUBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryHotSKUBatch_result.prototype = {};
ProductServ_queryHotSKUBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductBatchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryHotSKUBatch_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryHotSKUBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductDetail_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryProductDetail_args.prototype = {};
ProductServ_queryProductDetail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductDetailParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductDetail_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductDetail_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductDetail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryProductDetail_result.prototype = {};
ProductServ_queryProductDetail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductDetail_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductDetail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_addProduct_args = function(args) {
  this.product = null;
  if (args) {
    if (args.product !== undefined) {
      this.product = args.product;
    }
  }
};
ProductServ_addProduct_args.prototype = {};
ProductServ_addProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.Product();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_addProduct_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_addProduct_args');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 1);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_addProduct_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_addProduct_result.prototype = {};
ProductServ_addProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_addProduct_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_addProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_updateProduct_args = function(args) {
  this.product = null;
  if (args) {
    if (args.product !== undefined) {
      this.product = args.product;
    }
  }
};
ProductServ_updateProduct_args.prototype = {};
ProductServ_updateProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.Product();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_updateProduct_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_updateProduct_args');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 1);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_updateProduct_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_updateProduct_result.prototype = {};
ProductServ_updateProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_updateProduct_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_updateProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyQuery_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_productSurveyQuery_args.prototype = {};
ProductServ_productSurveyQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductSurveyQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyQuery_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyQuery_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_productSurveyQuery_result.prototype = {};
ProductServ_productSurveyQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSurveyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyQuery_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyQueryByClick_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_productSurveyQueryByClick_args.prototype = {};
ProductServ_productSurveyQueryByClick_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductSurveyQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyQueryByClick_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyQueryByClick_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyQueryByClick_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_productSurveyQueryByClick_result.prototype = {};
ProductServ_productSurveyQueryByClick_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSurveyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyQueryByClick_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyQueryByClick_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyBackendQuery_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_productSurveyBackendQuery_args.prototype = {};
ProductServ_productSurveyBackendQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductSurveyQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyBackendQuery_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyBackendQuery_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyBackendQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_productSurveyBackendQuery_result.prototype = {};
ProductServ_productSurveyBackendQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSurveyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyBackendQuery_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyBackendQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_setProductState_args = function(args) {
  this.productOpt = null;
  if (args) {
    if (args.productOpt !== undefined) {
      this.productOpt = args.productOpt;
    }
  }
};
ProductServ_setProductState_args.prototype = {};
ProductServ_setProductState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.productOpt = new ttypes.ProductOpt();
        this.productOpt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_setProductState_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_setProductState_args');
  if (this.productOpt !== null && this.productOpt !== undefined) {
    output.writeFieldBegin('productOpt', Thrift.Type.STRUCT, 1);
    this.productOpt.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_setProductState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_setProductState_result.prototype = {};
ProductServ_setProductState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_setProductState_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_setProductState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryFloorProduct_args = function(args) {
  this.floorId = null;
  if (args) {
    if (args.floorId !== undefined) {
      this.floorId = args.floorId;
    }
  }
};
ProductServ_queryFloorProduct_args.prototype = {};
ProductServ_queryFloorProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.floorId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryFloorProduct_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryFloorProduct_args');
  if (this.floorId !== null && this.floorId !== undefined) {
    output.writeFieldBegin('floorId', Thrift.Type.I32, 1);
    output.writeI32(this.floorId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryFloorProduct_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryFloorProduct_result.prototype = {};
ProductServ_queryFloorProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSurveyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryFloorProduct_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryFloorProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductSnap_args = function(args) {
  this.snapId = null;
  this.param = null;
  if (args) {
    if (args.snapId !== undefined) {
      this.snapId = args.snapId;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryProductSnap_args.prototype = {};
ProductServ_queryProductSnap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.snapId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductSnap_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductSnap_args');
  if (this.snapId !== null && this.snapId !== undefined) {
    output.writeFieldBegin('snapId', Thrift.Type.STRING, 1);
    output.writeString(this.snapId);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductSnap_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryProductSnap_result.prototype = {};
ProductServ_queryProductSnap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductSnap_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductSnap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyQueryBatch_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_productSurveyQueryBatch_args.prototype = {};
ProductServ_productSurveyQueryBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductSurveyQueryBatchParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyQueryBatch_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyQueryBatch_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_productSurveyQueryBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_productSurveyQueryBatch_result.prototype = {};
ProductServ_productSurveyQueryBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSurveyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_productSurveyQueryBatch_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_productSurveyQueryBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_importProductCard_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_importProductCard_args.prototype = {};
ProductServ_importProductCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductCardImportParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_importProductCard_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_importProductCard_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, -1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_importProductCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_importProductCard_result.prototype = {};
ProductServ_importProductCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_importProductCard_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_importProductCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_getProductCard_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_getProductCard_args.prototype = {};
ProductServ_getProductCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductCardParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_getProductCard_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_getProductCard_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_getProductCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_getProductCard_result.prototype = {};
ProductServ_getProductCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductCardResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_getProductCard_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_getProductCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductCard_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ProductServ_queryProductCard_args.prototype = {};
ProductServ_queryProductCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductCardParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductCard_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductCard_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryProductCard_result.prototype = {};
ProductServ_queryProductCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductCardResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductCard_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_statisticsProductCard_args = function(args) {
  this.param = null;
  this.pagination = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ProductServ_statisticsProductCard_args.prototype = {};
ProductServ_statisticsProductCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductCardStatisticsParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_statisticsProductCard_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_statisticsProductCard_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_statisticsProductCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_statisticsProductCard_result.prototype = {};
ProductServ_statisticsProductCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductCardStatisticsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_statisticsProductCard_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_statisticsProductCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductCardViewList_args = function(args) {
  this.param = null;
  this.pagination = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ProductServ_queryProductCardViewList_args.prototype = {};
ProductServ_queryProductCardViewList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ProductCardViewParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductCardViewList_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductCardViewList_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_queryProductCardViewList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_queryProductCardViewList_result.prototype = {};
ProductServ_queryProductCardViewList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductCardViewListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_queryProductCardViewList_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_queryProductCardViewList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_useProductCard_args = function(args) {
  this.productCard = null;
  if (args) {
    if (args.productCard !== undefined) {
      this.productCard = args.productCard;
    }
  }
};
ProductServ_useProductCard_args.prototype = {};
ProductServ_useProductCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.productCard = new ttypes.ProductCard();
        this.productCard.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_useProductCard_args.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_useProductCard_args');
  if (this.productCard !== null && this.productCard !== undefined) {
    output.writeFieldBegin('productCard', Thrift.Type.STRUCT, 1);
    this.productCard.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServ_useProductCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ProductServ_useProductCard_result.prototype = {};
ProductServ_useProductCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductServ_useProductCard_result.prototype.write = function(output) {
  output.writeStructBegin('ProductServ_useProductCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ProductServClient.prototype = {};
ProductServClient.prototype.seqid = function() { return this._seqid; }
ProductServClient.prototype.new_seqid = function() { return this._seqid += 1; }
ProductServClient.prototype.queryProduct = function(productId, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProduct(productId, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProduct(productId, param);
  }
};

ProductServClient.prototype.send_queryProduct = function(productId, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryProduct_args();
  args.productId = productId;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProduct failed: unknown result');
};
ProductServClient.prototype.queryProductSku = function(productId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProductSku(productId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProductSku(productId);
  }
};

ProductServClient.prototype.send_queryProductSku = function(productId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProductSku', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryProductSku_args();
  args.productId = productId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryProductSku = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryProductSku_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProductSku failed: unknown result');
};
ProductServClient.prototype.queryHotSKU = function(productId, skuNum, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryHotSKU(productId, skuNum, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryHotSKU(productId, skuNum, param);
  }
};

ProductServClient.prototype.send_queryHotSKU = function(productId, skuNum, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryHotSKU', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryHotSKU_args();
  args.productId = productId;
  args.skuNum = skuNum;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryHotSKU = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryHotSKU_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryHotSKU failed: unknown result');
};
ProductServClient.prototype.queryHotSKUV1 = function(skuParam, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryHotSKUV1(skuParam, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryHotSKUV1(skuParam, param);
  }
};

ProductServClient.prototype.send_queryHotSKUV1 = function(skuParam, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryHotSKUV1', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryHotSKUV1_args();
  args.skuParam = skuParam;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryHotSKUV1 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryHotSKUV1_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryHotSKUV1 failed: unknown result');
};
ProductServClient.prototype.queryHotSKUBatch = function(skuParam, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryHotSKUBatch(skuParam, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryHotSKUBatch(skuParam, param);
  }
};

ProductServClient.prototype.send_queryHotSKUBatch = function(skuParam, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryHotSKUBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryHotSKUBatch_args();
  args.skuParam = skuParam;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryHotSKUBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryHotSKUBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryHotSKUBatch failed: unknown result');
};
ProductServClient.prototype.queryProductDetail = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProductDetail(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProductDetail(param);
  }
};

ProductServClient.prototype.send_queryProductDetail = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProductDetail', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryProductDetail_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryProductDetail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryProductDetail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProductDetail failed: unknown result');
};
ProductServClient.prototype.addProduct = function(product, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addProduct(product);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addProduct(product);
  }
};

ProductServClient.prototype.send_addProduct = function(product) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_addProduct_args();
  args.product = product;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_addProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_addProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addProduct failed: unknown result');
};
ProductServClient.prototype.updateProduct = function(product, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateProduct(product);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateProduct(product);
  }
};

ProductServClient.prototype.send_updateProduct = function(product) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_updateProduct_args();
  args.product = product;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_updateProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_updateProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateProduct failed: unknown result');
};
ProductServClient.prototype.productSurveyQuery = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_productSurveyQuery(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_productSurveyQuery(param);
  }
};

ProductServClient.prototype.send_productSurveyQuery = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('productSurveyQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_productSurveyQuery_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_productSurveyQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_productSurveyQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('productSurveyQuery failed: unknown result');
};
ProductServClient.prototype.productSurveyQueryByClick = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_productSurveyQueryByClick(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_productSurveyQueryByClick(param);
  }
};

ProductServClient.prototype.send_productSurveyQueryByClick = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('productSurveyQueryByClick', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_productSurveyQueryByClick_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_productSurveyQueryByClick = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_productSurveyQueryByClick_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('productSurveyQueryByClick failed: unknown result');
};
ProductServClient.prototype.productSurveyBackendQuery = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_productSurveyBackendQuery(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_productSurveyBackendQuery(param);
  }
};

ProductServClient.prototype.send_productSurveyBackendQuery = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('productSurveyBackendQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_productSurveyBackendQuery_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_productSurveyBackendQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_productSurveyBackendQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('productSurveyBackendQuery failed: unknown result');
};
ProductServClient.prototype.setProductState = function(productOpt, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProductState(productOpt);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProductState(productOpt);
  }
};

ProductServClient.prototype.send_setProductState = function(productOpt) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProductState', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_setProductState_args();
  args.productOpt = productOpt;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_setProductState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_setProductState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setProductState failed: unknown result');
};
ProductServClient.prototype.queryFloorProduct = function(floorId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryFloorProduct(floorId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryFloorProduct(floorId);
  }
};

ProductServClient.prototype.send_queryFloorProduct = function(floorId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryFloorProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryFloorProduct_args();
  args.floorId = floorId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryFloorProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryFloorProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryFloorProduct failed: unknown result');
};
ProductServClient.prototype.queryProductSnap = function(snapId, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProductSnap(snapId, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProductSnap(snapId, param);
  }
};

ProductServClient.prototype.send_queryProductSnap = function(snapId, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProductSnap', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryProductSnap_args();
  args.snapId = snapId;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryProductSnap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryProductSnap_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProductSnap failed: unknown result');
};
ProductServClient.prototype.productSurveyQueryBatch = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_productSurveyQueryBatch(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_productSurveyQueryBatch(param);
  }
};

ProductServClient.prototype.send_productSurveyQueryBatch = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('productSurveyQueryBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_productSurveyQueryBatch_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_productSurveyQueryBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_productSurveyQueryBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('productSurveyQueryBatch failed: unknown result');
};
ProductServClient.prototype.importProductCard = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_importProductCard(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_importProductCard(param);
  }
};

ProductServClient.prototype.send_importProductCard = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importProductCard', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_importProductCard_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_importProductCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_importProductCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importProductCard failed: unknown result');
};
ProductServClient.prototype.getProductCard = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProductCard(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProductCard(param);
  }
};

ProductServClient.prototype.send_getProductCard = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProductCard', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_getProductCard_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_getProductCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_getProductCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProductCard failed: unknown result');
};
ProductServClient.prototype.queryProductCard = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProductCard(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProductCard(param);
  }
};

ProductServClient.prototype.send_queryProductCard = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProductCard', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryProductCard_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryProductCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryProductCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProductCard failed: unknown result');
};
ProductServClient.prototype.statisticsProductCard = function(param, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_statisticsProductCard(param, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_statisticsProductCard(param, pagination);
  }
};

ProductServClient.prototype.send_statisticsProductCard = function(param, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('statisticsProductCard', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_statisticsProductCard_args();
  args.param = param;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_statisticsProductCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_statisticsProductCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('statisticsProductCard failed: unknown result');
};
ProductServClient.prototype.queryProductCardViewList = function(param, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProductCardViewList(param, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProductCardViewList(param, pagination);
  }
};

ProductServClient.prototype.send_queryProductCardViewList = function(param, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProductCardViewList', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_queryProductCardViewList_args();
  args.param = param;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_queryProductCardViewList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_queryProductCardViewList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProductCardViewList failed: unknown result');
};
ProductServClient.prototype.useProductCard = function(productCard, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_useProductCard(productCard);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_useProductCard(productCard);
  }
};

ProductServClient.prototype.send_useProductCard = function(productCard) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('useProductCard', Thrift.MessageType.CALL, this.seqid());
  var args = new ProductServ_useProductCard_args();
  args.productCard = productCard;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ProductServClient.prototype.recv_useProductCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProductServ_useProductCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('useProductCard failed: unknown result');
};
ProductServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ProductServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ProductServProcessor.prototype.process_queryProduct = function(seqid, input, output) {
  var args = new ProductServ_queryProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProduct.length === 2) {
    Q.fcall(this._handler.queryProduct, args.productId, args.param)
      .then(function(result) {
        var result = new ProductServ_queryProduct_result({success: result});
        output.writeMessageBegin("queryProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryProduct_result(err);
        output.writeMessageBegin("queryProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProduct(args.productId, args.param,  function (err, result) {
      var result = new ProductServ_queryProduct_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryProduct", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryProductSku = function(seqid, input, output) {
  var args = new ProductServ_queryProductSku_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProductSku.length === 1) {
    Q.fcall(this._handler.queryProductSku, args.productId)
      .then(function(result) {
        var result = new ProductServ_queryProductSku_result({success: result});
        output.writeMessageBegin("queryProductSku", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryProductSku_result(err);
        output.writeMessageBegin("queryProductSku", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProductSku(args.productId,  function (err, result) {
      var result = new ProductServ_queryProductSku_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryProductSku", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryHotSKU = function(seqid, input, output) {
  var args = new ProductServ_queryHotSKU_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryHotSKU.length === 3) {
    Q.fcall(this._handler.queryHotSKU, args.productId, args.skuNum, args.param)
      .then(function(result) {
        var result = new ProductServ_queryHotSKU_result({success: result});
        output.writeMessageBegin("queryHotSKU", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryHotSKU_result(err);
        output.writeMessageBegin("queryHotSKU", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryHotSKU(args.productId, args.skuNum, args.param,  function (err, result) {
      var result = new ProductServ_queryHotSKU_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryHotSKU", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryHotSKUV1 = function(seqid, input, output) {
  var args = new ProductServ_queryHotSKUV1_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryHotSKUV1.length === 2) {
    Q.fcall(this._handler.queryHotSKUV1, args.skuParam, args.param)
      .then(function(result) {
        var result = new ProductServ_queryHotSKUV1_result({success: result});
        output.writeMessageBegin("queryHotSKUV1", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryHotSKUV1_result(err);
        output.writeMessageBegin("queryHotSKUV1", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryHotSKUV1(args.skuParam, args.param,  function (err, result) {
      var result = new ProductServ_queryHotSKUV1_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryHotSKUV1", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryHotSKUBatch = function(seqid, input, output) {
  var args = new ProductServ_queryHotSKUBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryHotSKUBatch.length === 2) {
    Q.fcall(this._handler.queryHotSKUBatch, args.skuParam, args.param)
      .then(function(result) {
        var result = new ProductServ_queryHotSKUBatch_result({success: result});
        output.writeMessageBegin("queryHotSKUBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryHotSKUBatch_result(err);
        output.writeMessageBegin("queryHotSKUBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryHotSKUBatch(args.skuParam, args.param,  function (err, result) {
      var result = new ProductServ_queryHotSKUBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryHotSKUBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryProductDetail = function(seqid, input, output) {
  var args = new ProductServ_queryProductDetail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProductDetail.length === 1) {
    Q.fcall(this._handler.queryProductDetail, args.param)
      .then(function(result) {
        var result = new ProductServ_queryProductDetail_result({success: result});
        output.writeMessageBegin("queryProductDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryProductDetail_result(err);
        output.writeMessageBegin("queryProductDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProductDetail(args.param,  function (err, result) {
      var result = new ProductServ_queryProductDetail_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryProductDetail", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_addProduct = function(seqid, input, output) {
  var args = new ProductServ_addProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addProduct.length === 1) {
    Q.fcall(this._handler.addProduct, args.product)
      .then(function(result) {
        var result = new ProductServ_addProduct_result({success: result});
        output.writeMessageBegin("addProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_addProduct_result(err);
        output.writeMessageBegin("addProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addProduct(args.product,  function (err, result) {
      var result = new ProductServ_addProduct_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addProduct", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_updateProduct = function(seqid, input, output) {
  var args = new ProductServ_updateProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateProduct.length === 1) {
    Q.fcall(this._handler.updateProduct, args.product)
      .then(function(result) {
        var result = new ProductServ_updateProduct_result({success: result});
        output.writeMessageBegin("updateProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_updateProduct_result(err);
        output.writeMessageBegin("updateProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateProduct(args.product,  function (err, result) {
      var result = new ProductServ_updateProduct_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateProduct", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_productSurveyQuery = function(seqid, input, output) {
  var args = new ProductServ_productSurveyQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.productSurveyQuery.length === 1) {
    Q.fcall(this._handler.productSurveyQuery, args.param)
      .then(function(result) {
        var result = new ProductServ_productSurveyQuery_result({success: result});
        output.writeMessageBegin("productSurveyQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_productSurveyQuery_result(err);
        output.writeMessageBegin("productSurveyQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.productSurveyQuery(args.param,  function (err, result) {
      var result = new ProductServ_productSurveyQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("productSurveyQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_productSurveyQueryByClick = function(seqid, input, output) {
  var args = new ProductServ_productSurveyQueryByClick_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.productSurveyQueryByClick.length === 1) {
    Q.fcall(this._handler.productSurveyQueryByClick, args.param)
      .then(function(result) {
        var result = new ProductServ_productSurveyQueryByClick_result({success: result});
        output.writeMessageBegin("productSurveyQueryByClick", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_productSurveyQueryByClick_result(err);
        output.writeMessageBegin("productSurveyQueryByClick", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.productSurveyQueryByClick(args.param,  function (err, result) {
      var result = new ProductServ_productSurveyQueryByClick_result((err != null ? err : {success: result}));
      output.writeMessageBegin("productSurveyQueryByClick", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_productSurveyBackendQuery = function(seqid, input, output) {
  var args = new ProductServ_productSurveyBackendQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.productSurveyBackendQuery.length === 1) {
    Q.fcall(this._handler.productSurveyBackendQuery, args.param)
      .then(function(result) {
        var result = new ProductServ_productSurveyBackendQuery_result({success: result});
        output.writeMessageBegin("productSurveyBackendQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_productSurveyBackendQuery_result(err);
        output.writeMessageBegin("productSurveyBackendQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.productSurveyBackendQuery(args.param,  function (err, result) {
      var result = new ProductServ_productSurveyBackendQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("productSurveyBackendQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_setProductState = function(seqid, input, output) {
  var args = new ProductServ_setProductState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProductState.length === 1) {
    Q.fcall(this._handler.setProductState, args.productOpt)
      .then(function(result) {
        var result = new ProductServ_setProductState_result({success: result});
        output.writeMessageBegin("setProductState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_setProductState_result(err);
        output.writeMessageBegin("setProductState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProductState(args.productOpt,  function (err, result) {
      var result = new ProductServ_setProductState_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setProductState", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryFloorProduct = function(seqid, input, output) {
  var args = new ProductServ_queryFloorProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryFloorProduct.length === 1) {
    Q.fcall(this._handler.queryFloorProduct, args.floorId)
      .then(function(result) {
        var result = new ProductServ_queryFloorProduct_result({success: result});
        output.writeMessageBegin("queryFloorProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryFloorProduct_result(err);
        output.writeMessageBegin("queryFloorProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryFloorProduct(args.floorId,  function (err, result) {
      var result = new ProductServ_queryFloorProduct_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryFloorProduct", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryProductSnap = function(seqid, input, output) {
  var args = new ProductServ_queryProductSnap_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProductSnap.length === 2) {
    Q.fcall(this._handler.queryProductSnap, args.snapId, args.param)
      .then(function(result) {
        var result = new ProductServ_queryProductSnap_result({success: result});
        output.writeMessageBegin("queryProductSnap", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryProductSnap_result(err);
        output.writeMessageBegin("queryProductSnap", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProductSnap(args.snapId, args.param,  function (err, result) {
      var result = new ProductServ_queryProductSnap_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryProductSnap", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_productSurveyQueryBatch = function(seqid, input, output) {
  var args = new ProductServ_productSurveyQueryBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.productSurveyQueryBatch.length === 1) {
    Q.fcall(this._handler.productSurveyQueryBatch, args.param)
      .then(function(result) {
        var result = new ProductServ_productSurveyQueryBatch_result({success: result});
        output.writeMessageBegin("productSurveyQueryBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_productSurveyQueryBatch_result(err);
        output.writeMessageBegin("productSurveyQueryBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.productSurveyQueryBatch(args.param,  function (err, result) {
      var result = new ProductServ_productSurveyQueryBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("productSurveyQueryBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_importProductCard = function(seqid, input, output) {
  var args = new ProductServ_importProductCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.importProductCard.length === 1) {
    Q.fcall(this._handler.importProductCard, args.param)
      .then(function(result) {
        var result = new ProductServ_importProductCard_result({success: result});
        output.writeMessageBegin("importProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_importProductCard_result(err);
        output.writeMessageBegin("importProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.importProductCard(args.param,  function (err, result) {
      var result = new ProductServ_importProductCard_result((err != null ? err : {success: result}));
      output.writeMessageBegin("importProductCard", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_getProductCard = function(seqid, input, output) {
  var args = new ProductServ_getProductCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProductCard.length === 1) {
    Q.fcall(this._handler.getProductCard, args.param)
      .then(function(result) {
        var result = new ProductServ_getProductCard_result({success: result});
        output.writeMessageBegin("getProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_getProductCard_result(err);
        output.writeMessageBegin("getProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProductCard(args.param,  function (err, result) {
      var result = new ProductServ_getProductCard_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getProductCard", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryProductCard = function(seqid, input, output) {
  var args = new ProductServ_queryProductCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProductCard.length === 1) {
    Q.fcall(this._handler.queryProductCard, args.param)
      .then(function(result) {
        var result = new ProductServ_queryProductCard_result({success: result});
        output.writeMessageBegin("queryProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryProductCard_result(err);
        output.writeMessageBegin("queryProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProductCard(args.param,  function (err, result) {
      var result = new ProductServ_queryProductCard_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryProductCard", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_statisticsProductCard = function(seqid, input, output) {
  var args = new ProductServ_statisticsProductCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.statisticsProductCard.length === 2) {
    Q.fcall(this._handler.statisticsProductCard, args.param, args.pagination)
      .then(function(result) {
        var result = new ProductServ_statisticsProductCard_result({success: result});
        output.writeMessageBegin("statisticsProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_statisticsProductCard_result(err);
        output.writeMessageBegin("statisticsProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.statisticsProductCard(args.param, args.pagination,  function (err, result) {
      var result = new ProductServ_statisticsProductCard_result((err != null ? err : {success: result}));
      output.writeMessageBegin("statisticsProductCard", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_queryProductCardViewList = function(seqid, input, output) {
  var args = new ProductServ_queryProductCardViewList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProductCardViewList.length === 2) {
    Q.fcall(this._handler.queryProductCardViewList, args.param, args.pagination)
      .then(function(result) {
        var result = new ProductServ_queryProductCardViewList_result({success: result});
        output.writeMessageBegin("queryProductCardViewList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_queryProductCardViewList_result(err);
        output.writeMessageBegin("queryProductCardViewList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProductCardViewList(args.param, args.pagination,  function (err, result) {
      var result = new ProductServ_queryProductCardViewList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryProductCardViewList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ProductServProcessor.prototype.process_useProductCard = function(seqid, input, output) {
  var args = new ProductServ_useProductCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.useProductCard.length === 1) {
    Q.fcall(this._handler.useProductCard, args.productCard)
      .then(function(result) {
        var result = new ProductServ_useProductCard_result({success: result});
        output.writeMessageBegin("useProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ProductServ_useProductCard_result(err);
        output.writeMessageBegin("useProductCard", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.useProductCard(args.productCard,  function (err, result) {
      var result = new ProductServ_useProductCard_result((err != null ? err : {success: result}));
      output.writeMessageBegin("useProductCard", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

