//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./RedPaperActivity_types');
//HELPER FUNCTIONS AND STRUCTURES

RedPaperServ_createRedPaperActivity_args = function(args) {
  this.activity = null;
  this.userId = null;
  if (args) {
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = new ttypes.Activity(args.activity);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
RedPaperServ_createRedPaperActivity_args.prototype = {};
RedPaperServ_createRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.Activity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_createRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_createRedPaperActivity_args');
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 1);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_createRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
RedPaperServ_createRedPaperActivity_result.prototype = {};
RedPaperServ_createRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_createRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_createRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_updateRedPaperActivity_args = function(args) {
  this.activity = null;
  this.userId = null;
  if (args) {
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = new ttypes.Activity(args.activity);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
RedPaperServ_updateRedPaperActivity_args.prototype = {};
RedPaperServ_updateRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.Activity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_updateRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_updateRedPaperActivity_args');
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 1);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_updateRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
RedPaperServ_updateRedPaperActivity_result.prototype = {};
RedPaperServ_updateRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_updateRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_updateRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_invalidRedPaperActivity_args = function(args) {
  this.activityId = null;
  this.userId = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
RedPaperServ_invalidRedPaperActivity_args.prototype = {};
RedPaperServ_invalidRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_invalidRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_invalidRedPaperActivity_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_invalidRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
RedPaperServ_invalidRedPaperActivity_result.prototype = {};
RedPaperServ_invalidRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_invalidRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_invalidRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_queryRedPaperActivityList_args = function(args) {
  this.activity = null;
  this.pagination = null;
  if (args) {
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = new ttypes.Activity(args.activity);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
  }
};
RedPaperServ_queryRedPaperActivityList_args.prototype = {};
RedPaperServ_queryRedPaperActivityList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.Activity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_queryRedPaperActivityList_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_queryRedPaperActivityList_args');
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 1);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_queryRedPaperActivityList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ActivityListResult(args.success);
    }
  }
};
RedPaperServ_queryRedPaperActivityList_result.prototype = {};
RedPaperServ_queryRedPaperActivityList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_queryRedPaperActivityList_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_queryRedPaperActivityList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_queryRedPaperReceivedList_args = function(args) {
  this.receiveRecoard = null;
  this.pagination = null;
  if (args) {
    if (args.receiveRecoard !== undefined && args.receiveRecoard !== null) {
      this.receiveRecoard = new ttypes.ReceiveRecoard(args.receiveRecoard);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
  }
};
RedPaperServ_queryRedPaperReceivedList_args.prototype = {};
RedPaperServ_queryRedPaperReceivedList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.receiveRecoard = new ttypes.ReceiveRecoard();
        this.receiveRecoard.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_queryRedPaperReceivedList_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_queryRedPaperReceivedList_args');
  if (this.receiveRecoard !== null && this.receiveRecoard !== undefined) {
    output.writeFieldBegin('receiveRecoard', Thrift.Type.STRUCT, 1);
    this.receiveRecoard.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_queryRedPaperReceivedList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ReceiveRecoardListResult(args.success);
    }
  }
};
RedPaperServ_queryRedPaperReceivedList_result.prototype = {};
RedPaperServ_queryRedPaperReceivedList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ReceiveRecoardListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_queryRedPaperReceivedList_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_queryRedPaperReceivedList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_exportRedPaperExcelForReceived_args = function(args) {
  this.activityId = null;
  this.receiveRecoard = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.receiveRecoard !== undefined && args.receiveRecoard !== null) {
      this.receiveRecoard = new ttypes.ReceiveRecoard(args.receiveRecoard);
    }
  }
};
RedPaperServ_exportRedPaperExcelForReceived_args.prototype = {};
RedPaperServ_exportRedPaperExcelForReceived_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.receiveRecoard = new ttypes.ReceiveRecoard();
        this.receiveRecoard.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_exportRedPaperExcelForReceived_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_exportRedPaperExcelForReceived_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.receiveRecoard !== null && this.receiveRecoard !== undefined) {
    output.writeFieldBegin('receiveRecoard', Thrift.Type.STRUCT, 2);
    this.receiveRecoard.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_exportRedPaperExcelForReceived_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result4Excel(args.success);
    }
  }
};
RedPaperServ_exportRedPaperExcelForReceived_result.prototype = {};
RedPaperServ_exportRedPaperExcelForReceived_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result4Excel();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_exportRedPaperExcelForReceived_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_exportRedPaperExcelForReceived_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_generateH5Url_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.GenerateParam(args.param);
    }
  }
};
RedPaperServ_generateH5Url_args.prototype = {};
RedPaperServ_generateH5Url_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.GenerateParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_generateH5Url_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_generateH5Url_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_generateH5Url_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.StringResult(args.success);
    }
  }
};
RedPaperServ_generateH5Url_result.prototype = {};
RedPaperServ_generateH5Url_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_generateH5Url_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_generateH5Url_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_receiveRedbag_args = function(args) {
  this.activityId = null;
  this.mobile = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.mobile !== undefined && args.mobile !== null) {
      this.mobile = args.mobile;
    }
  }
};
RedPaperServ_receiveRedbag_args.prototype = {};
RedPaperServ_receiveRedbag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_receiveRedbag_args.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_receiveRedbag_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServ_receiveRedbag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.StringResult(args.success);
    }
  }
};
RedPaperServ_receiveRedbag_result.prototype = {};
RedPaperServ_receiveRedbag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperServ_receiveRedbag_result.prototype.write = function(output) {
  output.writeStructBegin('RedPaperServ_receiveRedbag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RedPaperServClient.prototype = {};
RedPaperServClient.prototype.seqid = function() { return this._seqid; }
RedPaperServClient.prototype.new_seqid = function() { return this._seqid += 1; }
RedPaperServClient.prototype.createRedPaperActivity = function(activity, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createRedPaperActivity(activity, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createRedPaperActivity(activity, userId);
  }
};

RedPaperServClient.prototype.send_createRedPaperActivity = function(activity, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_createRedPaperActivity_args();
  args.activity = activity;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_createRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_createRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createRedPaperActivity failed: unknown result');
};
RedPaperServClient.prototype.updateRedPaperActivity = function(activity, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateRedPaperActivity(activity, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateRedPaperActivity(activity, userId);
  }
};

RedPaperServClient.prototype.send_updateRedPaperActivity = function(activity, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_updateRedPaperActivity_args();
  args.activity = activity;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_updateRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_updateRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateRedPaperActivity failed: unknown result');
};
RedPaperServClient.prototype.invalidRedPaperActivity = function(activityId, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_invalidRedPaperActivity(activityId, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_invalidRedPaperActivity(activityId, userId);
  }
};

RedPaperServClient.prototype.send_invalidRedPaperActivity = function(activityId, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invalidRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_invalidRedPaperActivity_args();
  args.activityId = activityId;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_invalidRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_invalidRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('invalidRedPaperActivity failed: unknown result');
};
RedPaperServClient.prototype.queryRedPaperActivityList = function(activity, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRedPaperActivityList(activity, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRedPaperActivityList(activity, pagination);
  }
};

RedPaperServClient.prototype.send_queryRedPaperActivityList = function(activity, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRedPaperActivityList', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_queryRedPaperActivityList_args();
  args.activity = activity;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_queryRedPaperActivityList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_queryRedPaperActivityList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRedPaperActivityList failed: unknown result');
};
RedPaperServClient.prototype.queryRedPaperReceivedList = function(receiveRecoard, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRedPaperReceivedList(receiveRecoard, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRedPaperReceivedList(receiveRecoard, pagination);
  }
};

RedPaperServClient.prototype.send_queryRedPaperReceivedList = function(receiveRecoard, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRedPaperReceivedList', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_queryRedPaperReceivedList_args();
  args.receiveRecoard = receiveRecoard;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_queryRedPaperReceivedList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_queryRedPaperReceivedList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRedPaperReceivedList failed: unknown result');
};
RedPaperServClient.prototype.exportRedPaperExcelForReceived = function(activityId, receiveRecoard, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportRedPaperExcelForReceived(activityId, receiveRecoard);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportRedPaperExcelForReceived(activityId, receiveRecoard);
  }
};

RedPaperServClient.prototype.send_exportRedPaperExcelForReceived = function(activityId, receiveRecoard) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportRedPaperExcelForReceived', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_exportRedPaperExcelForReceived_args();
  args.activityId = activityId;
  args.receiveRecoard = receiveRecoard;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_exportRedPaperExcelForReceived = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_exportRedPaperExcelForReceived_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportRedPaperExcelForReceived failed: unknown result');
};
RedPaperServClient.prototype.generateH5Url = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generateH5Url(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generateH5Url(param);
  }
};

RedPaperServClient.prototype.send_generateH5Url = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('generateH5Url', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_generateH5Url_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_generateH5Url = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_generateH5Url_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generateH5Url failed: unknown result');
};
RedPaperServClient.prototype.receiveRedbag = function(activityId, mobile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_receiveRedbag(activityId, mobile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_receiveRedbag(activityId, mobile);
  }
};

RedPaperServClient.prototype.send_receiveRedbag = function(activityId, mobile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('receiveRedbag', Thrift.MessageType.CALL, this.seqid());
  var args = new RedPaperServ_receiveRedbag_args();
  args.activityId = activityId;
  args.mobile = mobile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RedPaperServClient.prototype.recv_receiveRedbag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RedPaperServ_receiveRedbag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('receiveRedbag failed: unknown result');
};
RedPaperServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
RedPaperServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

RedPaperServProcessor.prototype.process_createRedPaperActivity = function(seqid, input, output) {
  var args = new RedPaperServ_createRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createRedPaperActivity.length === 2) {
    Q.fcall(this._handler.createRedPaperActivity, args.activity, args.userId)
      .then(function(result) {
        var result = new RedPaperServ_createRedPaperActivity_result({success: result});
        output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createRedPaperActivity(args.activity, args.userId, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_createRedPaperActivity_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_updateRedPaperActivity = function(seqid, input, output) {
  var args = new RedPaperServ_updateRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateRedPaperActivity.length === 2) {
    Q.fcall(this._handler.updateRedPaperActivity, args.activity, args.userId)
      .then(function(result) {
        var result = new RedPaperServ_updateRedPaperActivity_result({success: result});
        output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateRedPaperActivity(args.activity, args.userId, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_updateRedPaperActivity_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_invalidRedPaperActivity = function(seqid, input, output) {
  var args = new RedPaperServ_invalidRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.invalidRedPaperActivity.length === 2) {
    Q.fcall(this._handler.invalidRedPaperActivity, args.activityId, args.userId)
      .then(function(result) {
        var result = new RedPaperServ_invalidRedPaperActivity_result({success: result});
        output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.invalidRedPaperActivity(args.activityId, args.userId, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_invalidRedPaperActivity_result((err != null ? err : {success: result}));
        output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_queryRedPaperActivityList = function(seqid, input, output) {
  var args = new RedPaperServ_queryRedPaperActivityList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRedPaperActivityList.length === 2) {
    Q.fcall(this._handler.queryRedPaperActivityList, args.activity, args.pagination)
      .then(function(result) {
        var result = new RedPaperServ_queryRedPaperActivityList_result({success: result});
        output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRedPaperActivityList(args.activity, args.pagination, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_queryRedPaperActivityList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_queryRedPaperReceivedList = function(seqid, input, output) {
  var args = new RedPaperServ_queryRedPaperReceivedList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRedPaperReceivedList.length === 2) {
    Q.fcall(this._handler.queryRedPaperReceivedList, args.receiveRecoard, args.pagination)
      .then(function(result) {
        var result = new RedPaperServ_queryRedPaperReceivedList_result({success: result});
        output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRedPaperReceivedList(args.receiveRecoard, args.pagination, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_queryRedPaperReceivedList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_exportRedPaperExcelForReceived = function(seqid, input, output) {
  var args = new RedPaperServ_exportRedPaperExcelForReceived_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportRedPaperExcelForReceived.length === 2) {
    Q.fcall(this._handler.exportRedPaperExcelForReceived, args.activityId, args.receiveRecoard)
      .then(function(result) {
        var result = new RedPaperServ_exportRedPaperExcelForReceived_result({success: result});
        output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportRedPaperExcelForReceived(args.activityId, args.receiveRecoard, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_exportRedPaperExcelForReceived_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_generateH5Url = function(seqid, input, output) {
  var args = new RedPaperServ_generateH5Url_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generateH5Url.length === 1) {
    Q.fcall(this._handler.generateH5Url, args.param)
      .then(function(result) {
        var result = new RedPaperServ_generateH5Url_result({success: result});
        output.writeMessageBegin("generateH5Url", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generateH5Url", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.generateH5Url(args.param, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_generateH5Url_result((err != null ? err : {success: result}));
        output.writeMessageBegin("generateH5Url", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generateH5Url", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RedPaperServProcessor.prototype.process_receiveRedbag = function(seqid, input, output) {
  var args = new RedPaperServ_receiveRedbag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.receiveRedbag.length === 2) {
    Q.fcall(this._handler.receiveRedbag, args.activityId, args.mobile)
      .then(function(result) {
        var result = new RedPaperServ_receiveRedbag_result({success: result});
        output.writeMessageBegin("receiveRedbag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("receiveRedbag", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.receiveRedbag(args.activityId, args.mobile, function (err, result) {
      if (err == null) {
        var result = new RedPaperServ_receiveRedbag_result((err != null ? err : {success: result}));
        output.writeMessageBegin("receiveRedbag", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("receiveRedbag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

