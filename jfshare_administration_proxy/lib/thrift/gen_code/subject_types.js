//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var brand_ttypes = require('./brand_types')


var ttypes = module.exports = {};
SubjectNode = module.exports.SubjectNode = function(args) {
  this.id = null;
  this.name = null;
  this.img_key = null;
  this.pid = null;
  this.sorted = null;
  this.isLeaf = null;
  this.displayIds = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.img_key !== undefined) {
      this.img_key = args.img_key;
    }
    if (args.pid !== undefined) {
      this.pid = args.pid;
    }
    if (args.sorted !== undefined) {
      this.sorted = args.sorted;
    }
    if (args.isLeaf !== undefined) {
      this.isLeaf = args.isLeaf;
    }
    if (args.displayIds !== undefined) {
      this.displayIds = args.displayIds;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
SubjectNode.prototype = {};
SubjectNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.img_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sorted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.isLeaf = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.displayIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectNode.prototype.write = function(output) {
  output.writeStructBegin('SubjectNode');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.img_key !== null && this.img_key !== undefined) {
    output.writeFieldBegin('img_key', Thrift.Type.STRING, 3);
    output.writeString(this.img_key);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 4);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.sorted !== null && this.sorted !== undefined) {
    output.writeFieldBegin('sorted', Thrift.Type.I32, 5);
    output.writeI32(this.sorted);
    output.writeFieldEnd();
  }
  if (this.isLeaf !== null && this.isLeaf !== undefined) {
    output.writeFieldBegin('isLeaf', Thrift.Type.I32, 6);
    output.writeI32(this.isLeaf);
    output.writeFieldEnd();
  }
  if (this.displayIds !== null && this.displayIds !== undefined) {
    output.writeFieldBegin('displayIds', Thrift.Type.STRING, 7);
    output.writeString(this.displayIds);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 8);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectInfo = module.exports.SubjectInfo = function(args) {
  this.id = null;
  this.name = null;
  this.img_key = null;
  this.pid = null;
  this.sorted = null;
  this.level = null;
  this.isLeaf = null;
  this.demo = null;
  this.createTime = null;
  this.creator = null;
  this.updateTime = null;
  this.updater = null;
  this.status = null;
  this.deleted = null;
  this.path = null;
  this.attributes = null;
  this.displayIds = null;
  this.subjectNodes = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.img_key !== undefined) {
      this.img_key = args.img_key;
    }
    if (args.pid !== undefined) {
      this.pid = args.pid;
    }
    if (args.sorted !== undefined) {
      this.sorted = args.sorted;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.isLeaf !== undefined) {
      this.isLeaf = args.isLeaf;
    }
    if (args.demo !== undefined) {
      this.demo = args.demo;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.updater !== undefined) {
      this.updater = args.updater;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.displayIds !== undefined) {
      this.displayIds = args.displayIds;
    }
    if (args.subjectNodes !== undefined) {
      this.subjectNodes = args.subjectNodes;
    }
  }
};
SubjectInfo.prototype = {};
SubjectInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.img_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sorted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.isLeaf = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.demo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.creator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.updater = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.deleted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.attributes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.displayIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.subjectNodes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.SubjectNode();
          elem6.read(input);
          this.subjectNodes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectInfo.prototype.write = function(output) {
  output.writeStructBegin('SubjectInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.img_key !== null && this.img_key !== undefined) {
    output.writeFieldBegin('img_key', Thrift.Type.STRING, 3);
    output.writeString(this.img_key);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 4);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.sorted !== null && this.sorted !== undefined) {
    output.writeFieldBegin('sorted', Thrift.Type.I32, 5);
    output.writeI32(this.sorted);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 6);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.isLeaf !== null && this.isLeaf !== undefined) {
    output.writeFieldBegin('isLeaf', Thrift.Type.I32, 7);
    output.writeI32(this.isLeaf);
    output.writeFieldEnd();
  }
  if (this.demo !== null && this.demo !== undefined) {
    output.writeFieldBegin('demo', Thrift.Type.STRING, 8);
    output.writeString(this.demo);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 9);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I32, 10);
    output.writeI32(this.creator);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 11);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.updater !== null && this.updater !== undefined) {
    output.writeFieldBegin('updater', Thrift.Type.I32, 12);
    output.writeI32(this.updater);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 13);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I32, 14);
    output.writeI32(this.deleted);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 15);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRING, 16);
    output.writeString(this.attributes);
    output.writeFieldEnd();
  }
  if (this.displayIds !== null && this.displayIds !== undefined) {
    output.writeFieldBegin('displayIds', Thrift.Type.STRING, 17);
    output.writeString(this.displayIds);
    output.writeFieldEnd();
  }
  if (this.subjectNodes !== null && this.subjectNodes !== undefined) {
    output.writeFieldBegin('subjectNodes', Thrift.Type.LIST, 18);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjectNodes.length);
    for (var iter7 in this.subjectNodes)
    {
      if (this.subjectNodes.hasOwnProperty(iter7))
      {
        iter7 = this.subjectNodes[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectAttribute = module.exports.SubjectAttribute = function(args) {
  this.id = null;
  this.name = null;
  this.subjectId = null;
  this.rewriteId = null;
  this.type = null;
  this.value = null;
  this.beRequired = null;
  this.isSku = null;
  this.demo = null;
  this.createTime = null;
  this.creator = null;
  this.updateTime = null;
  this.updater = null;
  this.deleted = null;
  this.ext1 = null;
  this.ext2 = null;
  this.ext3 = null;
  this.ext4 = null;
  this.ext5 = null;
  this.ext6 = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.rewriteId !== undefined) {
      this.rewriteId = args.rewriteId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.beRequired !== undefined) {
      this.beRequired = args.beRequired;
    }
    if (args.isSku !== undefined) {
      this.isSku = args.isSku;
    }
    if (args.demo !== undefined) {
      this.demo = args.demo;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.updater !== undefined) {
      this.updater = args.updater;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.ext1 !== undefined) {
      this.ext1 = args.ext1;
    }
    if (args.ext2 !== undefined) {
      this.ext2 = args.ext2;
    }
    if (args.ext3 !== undefined) {
      this.ext3 = args.ext3;
    }
    if (args.ext4 !== undefined) {
      this.ext4 = args.ext4;
    }
    if (args.ext5 !== undefined) {
      this.ext5 = args.ext5;
    }
    if (args.ext6 !== undefined) {
      this.ext6 = args.ext6;
    }
  }
};
SubjectAttribute.prototype = {};
SubjectAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rewriteId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.beRequired = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.isSku = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.demo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.creator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.updater = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.deleted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.ext1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.ext2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.ext3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.ext4 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.ext5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.ext6 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectAttribute.prototype.write = function(output) {
  output.writeStructBegin('SubjectAttribute');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 3);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.rewriteId !== null && this.rewriteId !== undefined) {
    output.writeFieldBegin('rewriteId', Thrift.Type.I32, 4);
    output.writeI32(this.rewriteId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 6);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.beRequired !== null && this.beRequired !== undefined) {
    output.writeFieldBegin('beRequired', Thrift.Type.I32, 7);
    output.writeI32(this.beRequired);
    output.writeFieldEnd();
  }
  if (this.isSku !== null && this.isSku !== undefined) {
    output.writeFieldBegin('isSku', Thrift.Type.I32, 8);
    output.writeI32(this.isSku);
    output.writeFieldEnd();
  }
  if (this.demo !== null && this.demo !== undefined) {
    output.writeFieldBegin('demo', Thrift.Type.STRING, 9);
    output.writeString(this.demo);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 10);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I32, 11);
    output.writeI32(this.creator);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 12);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.updater !== null && this.updater !== undefined) {
    output.writeFieldBegin('updater', Thrift.Type.I32, 13);
    output.writeI32(this.updater);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I32, 14);
    output.writeI32(this.deleted);
    output.writeFieldEnd();
  }
  if (this.ext1 !== null && this.ext1 !== undefined) {
    output.writeFieldBegin('ext1', Thrift.Type.STRING, 15);
    output.writeString(this.ext1);
    output.writeFieldEnd();
  }
  if (this.ext2 !== null && this.ext2 !== undefined) {
    output.writeFieldBegin('ext2', Thrift.Type.STRING, 16);
    output.writeString(this.ext2);
    output.writeFieldEnd();
  }
  if (this.ext3 !== null && this.ext3 !== undefined) {
    output.writeFieldBegin('ext3', Thrift.Type.STRING, 17);
    output.writeString(this.ext3);
    output.writeFieldEnd();
  }
  if (this.ext4 !== null && this.ext4 !== undefined) {
    output.writeFieldBegin('ext4', Thrift.Type.STRING, 18);
    output.writeString(this.ext4);
    output.writeFieldEnd();
  }
  if (this.ext5 !== null && this.ext5 !== undefined) {
    output.writeFieldBegin('ext5', Thrift.Type.STRING, 19);
    output.writeString(this.ext5);
    output.writeFieldEnd();
  }
  if (this.ext6 !== null && this.ext6 !== undefined) {
    output.writeFieldBegin('ext6', Thrift.Type.STRING, 20);
    output.writeString(this.ext6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectInfoResult = module.exports.SubjectInfoResult = function(args) {
  this.result = null;
  this.subjectInfo = null;
  this.subjectAttributes = null;
  this.brandList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.subjectInfo !== undefined) {
      this.subjectInfo = args.subjectInfo;
    }
    if (args.subjectAttributes !== undefined) {
      this.subjectAttributes = args.subjectAttributes;
    }
    if (args.brandList !== undefined) {
      this.brandList = args.brandList;
    }
  }
};
SubjectInfoResult.prototype = {};
SubjectInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.subjectInfo = new ttypes.SubjectInfo();
        this.subjectInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.subjectAttributes = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.SubjectAttribute();
          elem14.read(input);
          this.subjectAttributes.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.brandList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new brand_ttypes.BrandInfo();
          elem21.read(input);
          this.brandList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectInfoResult.prototype.write = function(output) {
  output.writeStructBegin('SubjectInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.subjectInfo !== null && this.subjectInfo !== undefined) {
    output.writeFieldBegin('subjectInfo', Thrift.Type.STRUCT, 2);
    this.subjectInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.subjectAttributes !== null && this.subjectAttributes !== undefined) {
    output.writeFieldBegin('subjectAttributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjectAttributes.length);
    for (var iter22 in this.subjectAttributes)
    {
      if (this.subjectAttributes.hasOwnProperty(iter22))
      {
        iter22 = this.subjectAttributes[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.brandList !== null && this.brandList !== undefined) {
    output.writeFieldBegin('brandList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.brandList.length);
    for (var iter23 in this.brandList)
    {
      if (this.brandList.hasOwnProperty(iter23))
      {
        iter23 = this.brandList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectTreeResult = module.exports.SubjectTreeResult = function(args) {
  this.result = null;
  this.subjectNodes = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.subjectNodes !== undefined) {
      this.subjectNodes = args.subjectNodes;
    }
  }
};
SubjectTreeResult.prototype = {};
SubjectTreeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.subjectNodes = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.SubjectNode();
          elem30.read(input);
          this.subjectNodes.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectTreeResult.prototype.write = function(output) {
  output.writeStructBegin('SubjectTreeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.subjectNodes !== null && this.subjectNodes !== undefined) {
    output.writeFieldBegin('subjectNodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjectNodes.length);
    for (var iter31 in this.subjectNodes)
    {
      if (this.subjectNodes.hasOwnProperty(iter31))
      {
        iter31 = this.subjectNodes[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectQueryParam = module.exports.SubjectQueryParam = function(args) {
  this.pId = null;
  this.name = null;
  this.status = null;
  if (args) {
    if (args.pId !== undefined) {
      this.pId = args.pId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
SubjectQueryParam.prototype = {};
SubjectQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectQueryParam.prototype.write = function(output) {
  output.writeStructBegin('SubjectQueryParam');
  if (this.pId !== null && this.pId !== undefined) {
    output.writeFieldBegin('pId', Thrift.Type.I32, 1);
    output.writeI32(this.pId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BrandSubjectKey = module.exports.BrandSubjectKey = function(args) {
  this.bId = null;
  this.sId = null;
  if (args) {
    if (args.bId !== undefined) {
      this.bId = args.bId;
    }
    if (args.sId !== undefined) {
      this.sId = args.sId;
    }
  }
};
BrandSubjectKey.prototype = {};
BrandSubjectKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrandSubjectKey.prototype.write = function(output) {
  output.writeStructBegin('BrandSubjectKey');
  if (this.bId !== null && this.bId !== undefined) {
    output.writeFieldBegin('bId', Thrift.Type.I32, 1);
    output.writeI32(this.bId);
    output.writeFieldEnd();
  }
  if (this.sId !== null && this.sId !== undefined) {
    output.writeFieldBegin('sId', Thrift.Type.I32, 2);
    output.writeI32(this.sId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BrandSubjectParam = module.exports.BrandSubjectParam = function(args) {
  this.brandSubjects = null;
  if (args) {
    if (args.brandSubjects !== undefined) {
      this.brandSubjects = args.brandSubjects;
    }
  }
};
BrandSubjectParam.prototype = {};
BrandSubjectParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.brandSubjects = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.BrandSubjectKey();
          elem38.read(input);
          this.brandSubjects.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrandSubjectParam.prototype.write = function(output) {
  output.writeStructBegin('BrandSubjectParam');
  if (this.brandSubjects !== null && this.brandSubjects !== undefined) {
    output.writeFieldBegin('brandSubjects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.brandSubjects.length);
    for (var iter39 in this.brandSubjects)
    {
      if (this.brandSubjects.hasOwnProperty(iter39))
      {
        iter39 = this.brandSubjects[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Page = module.exports.Page = function(args) {
  this.total = null;
  this.pageCount = null;
  this.pageSize = null;
  this.curPage = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.pageCount !== undefined) {
      this.pageCount = args.pageCount;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
    if (args.curPage !== undefined) {
      this.curPage = args.curPage;
    }
  }
};
Page.prototype = {};
Page.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.curPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Page.prototype.write = function(output) {
  output.writeStructBegin('Page');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.pageCount !== null && this.pageCount !== undefined) {
    output.writeFieldBegin('pageCount', Thrift.Type.I32, 2);
    output.writeI32(this.pageCount);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.curPage !== null && this.curPage !== undefined) {
    output.writeFieldBegin('curPage', Thrift.Type.I32, 4);
    output.writeI32(this.curPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectQueryResult = module.exports.SubjectQueryResult = function(args) {
  this.result = null;
  this.subjectInfos = null;
  this.page = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.subjectInfos !== undefined) {
      this.subjectInfos = args.subjectInfos;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SubjectQueryResult.prototype = {};
SubjectQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.subjectInfos = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.SubjectInfo();
          elem46.read(input);
          this.subjectInfos.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectQueryResult.prototype.write = function(output) {
  output.writeStructBegin('SubjectQueryResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.subjectInfos !== null && this.subjectInfos !== undefined) {
    output.writeFieldBegin('subjectInfos', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjectInfos.length);
    for (var iter47 in this.subjectInfos)
    {
      if (this.subjectInfos.hasOwnProperty(iter47))
      {
        iter47 = this.subjectInfos[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 3);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectNode = module.exports.DisplaySubjectNode = function(args) {
  this.id = null;
  this.name = null;
  this.img_key = null;
  this.pid = null;
  this.sorted = null;
  this.isLeaf = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.img_key !== undefined) {
      this.img_key = args.img_key;
    }
    if (args.pid !== undefined) {
      this.pid = args.pid;
    }
    if (args.sorted !== undefined) {
      this.sorted = args.sorted;
    }
    if (args.isLeaf !== undefined) {
      this.isLeaf = args.isLeaf;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
DisplaySubjectNode.prototype = {};
DisplaySubjectNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.img_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sorted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.isLeaf = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectNode.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectNode');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.img_key !== null && this.img_key !== undefined) {
    output.writeFieldBegin('img_key', Thrift.Type.STRING, 3);
    output.writeString(this.img_key);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 4);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.sorted !== null && this.sorted !== undefined) {
    output.writeFieldBegin('sorted', Thrift.Type.I32, 5);
    output.writeI32(this.sorted);
    output.writeFieldEnd();
  }
  if (this.isLeaf !== null && this.isLeaf !== undefined) {
    output.writeFieldBegin('isLeaf', Thrift.Type.I32, 6);
    output.writeI32(this.isLeaf);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectInfo = module.exports.DisplaySubjectInfo = function(args) {
  this.id = null;
  this.name = null;
  this.img_key = null;
  this.pid = null;
  this.sorted = null;
  this.level = null;
  this.isLeaf = null;
  this.demo = null;
  this.createTime = null;
  this.creator = null;
  this.updateTime = null;
  this.updater = null;
  this.status = null;
  this.deleted = null;
  this.path = null;
  this.attributes = null;
  this.subjectNodes = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.img_key !== undefined) {
      this.img_key = args.img_key;
    }
    if (args.pid !== undefined) {
      this.pid = args.pid;
    }
    if (args.sorted !== undefined) {
      this.sorted = args.sorted;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.isLeaf !== undefined) {
      this.isLeaf = args.isLeaf;
    }
    if (args.demo !== undefined) {
      this.demo = args.demo;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.updater !== undefined) {
      this.updater = args.updater;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.subjectNodes !== undefined) {
      this.subjectNodes = args.subjectNodes;
    }
  }
};
DisplaySubjectInfo.prototype = {};
DisplaySubjectInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.img_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sorted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.isLeaf = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.demo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.creator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.updater = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.deleted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.attributes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.subjectNodes = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.SubjectNode();
          elem54.read(input);
          this.subjectNodes.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectInfo.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.img_key !== null && this.img_key !== undefined) {
    output.writeFieldBegin('img_key', Thrift.Type.STRING, 3);
    output.writeString(this.img_key);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 4);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.sorted !== null && this.sorted !== undefined) {
    output.writeFieldBegin('sorted', Thrift.Type.I32, 5);
    output.writeI32(this.sorted);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 6);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.isLeaf !== null && this.isLeaf !== undefined) {
    output.writeFieldBegin('isLeaf', Thrift.Type.I32, 7);
    output.writeI32(this.isLeaf);
    output.writeFieldEnd();
  }
  if (this.demo !== null && this.demo !== undefined) {
    output.writeFieldBegin('demo', Thrift.Type.STRING, 8);
    output.writeString(this.demo);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 9);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I32, 10);
    output.writeI32(this.creator);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 11);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.updater !== null && this.updater !== undefined) {
    output.writeFieldBegin('updater', Thrift.Type.I32, 12);
    output.writeI32(this.updater);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 13);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I32, 14);
    output.writeI32(this.deleted);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 15);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRING, 16);
    output.writeString(this.attributes);
    output.writeFieldEnd();
  }
  if (this.subjectNodes !== null && this.subjectNodes !== undefined) {
    output.writeFieldBegin('subjectNodes', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjectNodes.length);
    for (var iter55 in this.subjectNodes)
    {
      if (this.subjectNodes.hasOwnProperty(iter55))
      {
        iter55 = this.subjectNodes[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectParam = module.exports.DisplaySubjectParam = function(args) {
  this.displaySubjectInfo = null;
  this.flag = null;
  if (args) {
    if (args.displaySubjectInfo !== undefined) {
      this.displaySubjectInfo = args.displaySubjectInfo;
    }
    if (args.flag !== undefined) {
      this.flag = args.flag;
    }
  }
};
DisplaySubjectParam.prototype = {};
DisplaySubjectParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectInfo = new ttypes.DisplaySubjectInfo();
        this.displaySubjectInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.flag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectParam.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectParam');
  if (this.displaySubjectInfo !== null && this.displaySubjectInfo !== undefined) {
    output.writeFieldBegin('displaySubjectInfo', Thrift.Type.STRUCT, 1);
    this.displaySubjectInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.STRING, 2);
    output.writeString(this.flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectResult = module.exports.DisplaySubjectResult = function(args) {
  this.result = null;
  this.displaySubjectInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.displaySubjectInfo !== undefined) {
      this.displaySubjectInfo = args.displaySubjectInfo;
    }
  }
};
DisplaySubjectResult.prototype = {};
DisplaySubjectResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectInfo = new ttypes.DisplaySubjectInfo();
        this.displaySubjectInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectResult.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.displaySubjectInfo !== null && this.displaySubjectInfo !== undefined) {
    output.writeFieldBegin('displaySubjectInfo', Thrift.Type.STRUCT, 2);
    this.displaySubjectInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectTreeResult = module.exports.DisplaySubjectTreeResult = function(args) {
  this.result = null;
  this.displaySubjectNodes = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.displaySubjectNodes !== undefined) {
      this.displaySubjectNodes = args.displaySubjectNodes;
    }
  }
};
DisplaySubjectTreeResult.prototype = {};
DisplaySubjectTreeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.displaySubjectNodes = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.DisplaySubjectNode();
          elem62.read(input);
          this.displaySubjectNodes.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectTreeResult.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectTreeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.displaySubjectNodes !== null && this.displaySubjectNodes !== undefined) {
    output.writeFieldBegin('displaySubjectNodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.displaySubjectNodes.length);
    for (var iter63 in this.displaySubjectNodes)
    {
      if (this.displaySubjectNodes.hasOwnProperty(iter63))
      {
        iter63 = this.displaySubjectNodes[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectQueryParam = module.exports.DisplaySubjectQueryParam = function(args) {
  this.pId = null;
  this.name = null;
  this.type = null;
  if (args) {
    if (args.pId !== undefined) {
      this.pId = args.pId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
DisplaySubjectQueryParam.prototype = {};
DisplaySubjectQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectQueryParam.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectQueryParam');
  if (this.pId !== null && this.pId !== undefined) {
    output.writeFieldBegin('pId', Thrift.Type.I32, 1);
    output.writeI32(this.pId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectQueryResult = module.exports.DisplaySubjectQueryResult = function(args) {
  this.result = null;
  this.displaySubjectInfos = null;
  this.page = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.displaySubjectInfos !== undefined) {
      this.displaySubjectInfos = args.displaySubjectInfos;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
DisplaySubjectQueryResult.prototype = {};
DisplaySubjectQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.displaySubjectInfos = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.DisplaySubjectInfo();
          elem70.read(input);
          this.displaySubjectInfos.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectQueryResult.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectQueryResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.displaySubjectInfos !== null && this.displaySubjectInfos !== undefined) {
    output.writeFieldBegin('displaySubjectInfos', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.displaySubjectInfos.length);
    for (var iter71 in this.displaySubjectInfos)
    {
      if (this.displaySubjectInfos.hasOwnProperty(iter71))
      {
        iter71 = this.displaySubjectInfos[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 3);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectChannelInfo = module.exports.DisplaySubjectChannelInfo = function(args) {
  this.id = null;
  this.name = null;
  this.code = null;
  this.creator = null;
  this.updater = null;
  this.updateTime = null;
  this.updaterName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.updater !== undefined) {
      this.updater = args.updater;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.updaterName !== undefined) {
      this.updaterName = args.updaterName;
    }
  }
};
DisplaySubjectChannelInfo.prototype = {};
DisplaySubjectChannelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.creator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updater = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updaterName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectChannelInfo.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectChannelInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 3);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I32, 4);
    output.writeI32(this.creator);
    output.writeFieldEnd();
  }
  if (this.updater !== null && this.updater !== undefined) {
    output.writeFieldBegin('updater', Thrift.Type.I32, 5);
    output.writeI32(this.updater);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 6);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.updaterName !== null && this.updaterName !== undefined) {
    output.writeFieldBegin('updaterName', Thrift.Type.STRING, 7);
    output.writeString(this.updaterName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectChannelQueryResult = module.exports.DisplaySubjectChannelQueryResult = function(args) {
  this.result = null;
  this.channelInfos = null;
  this.page = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.channelInfos !== undefined) {
      this.channelInfos = args.channelInfos;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
DisplaySubjectChannelQueryResult.prototype = {};
DisplaySubjectChannelQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.channelInfos = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.DisplaySubjectChannelInfo();
          elem78.read(input);
          this.channelInfos.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectChannelQueryResult.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectChannelQueryResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.channelInfos !== null && this.channelInfos !== undefined) {
    output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
    for (var iter79 in this.channelInfos)
    {
      if (this.channelInfos.hasOwnProperty(iter79))
      {
        iter79 = this.channelInfos[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 3);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DisplaySubjectChannelQueryParam = module.exports.DisplaySubjectChannelQueryParam = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
DisplaySubjectChannelQueryParam.prototype = {};
DisplaySubjectChannelQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisplaySubjectChannelQueryParam.prototype.write = function(output) {
  output.writeStructBegin('DisplaySubjectChannelQueryParam');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectRefDisplayInfo = module.exports.SubjectRefDisplayInfo = function(args) {
  this.subjectId = null;
  this.displayId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.displayId !== undefined) {
      this.displayId = args.displayId;
    }
  }
};
SubjectRefDisplayInfo.prototype = {};
SubjectRefDisplayInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.displayId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectRefDisplayInfo.prototype.write = function(output) {
  output.writeStructBegin('SubjectRefDisplayInfo');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.displayId !== null && this.displayId !== undefined) {
    output.writeFieldBegin('displayId', Thrift.Type.I32, 2);
    output.writeI32(this.displayId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectAttributeQueryParam = module.exports.SubjectAttributeQueryParam = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectAttributeQueryParam.prototype = {};
SubjectAttributeQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectAttributeQueryParam.prototype.write = function(output) {
  output.writeStructBegin('SubjectAttributeQueryParam');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectAttributeResult = module.exports.SubjectAttributeResult = function(args) {
  this.result = null;
  this.subjectAttributes = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.subjectAttributes !== undefined) {
      this.subjectAttributes = args.subjectAttributes;
    }
  }
};
SubjectAttributeResult.prototype = {};
SubjectAttributeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.subjectAttributes = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.SubjectAttribute();
          elem86.read(input);
          this.subjectAttributes.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectAttributeResult.prototype.write = function(output) {
  output.writeStructBegin('SubjectAttributeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.subjectAttributes !== null && this.subjectAttributes !== undefined) {
    output.writeFieldBegin('subjectAttributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjectAttributes.length);
    for (var iter87 in this.subjectAttributes)
    {
      if (this.subjectAttributes.hasOwnProperty(iter87))
      {
        iter87 = this.subjectAttributes[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

