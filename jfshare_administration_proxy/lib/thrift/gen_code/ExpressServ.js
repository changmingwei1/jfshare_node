//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./express_types');
//HELPER FUNCTIONS AND STRUCTURES

ExpressServ_addExpress_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined) {
      this.info = args.info;
    }
  }
};
ExpressServ_addExpress_args.prototype = {};
ExpressServ_addExpress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ExpressInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_addExpress_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_addExpress_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_addExpress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_addExpress_result.prototype = {};
ExpressServ_addExpress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_addExpress_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_addExpress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_updateExpress_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined) {
      this.info = args.info;
    }
  }
};
ExpressServ_updateExpress_args.prototype = {};
ExpressServ_updateExpress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ExpressInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_updateExpress_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_updateExpress_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_updateExpress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_updateExpress_result.prototype = {};
ExpressServ_updateExpress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_updateExpress_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_updateExpress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_deleteExpress_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ExpressServ_deleteExpress_args.prototype = {};
ExpressServ_deleteExpress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_deleteExpress_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_deleteExpress_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_deleteExpress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_deleteExpress_result.prototype = {};
ExpressServ_deleteExpress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_deleteExpress_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_deleteExpress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_query_args = function(args) {
};
ExpressServ_query_args.prototype = {};
ExpressServ_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_query_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_query_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_query_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_query_result.prototype = {};
ExpressServ_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_query_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ExpressServ_queryById_args.prototype = {};
ExpressServ_queryById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryById_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_queryById_result.prototype = {};
ExpressServ_queryById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryById_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryBySeller_args = function(args) {
  this.sellerId = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
  }
};
ExpressServ_queryBySeller_args.prototype = {};
ExpressServ_queryBySeller_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryBySeller_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryBySeller_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryBySeller_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_queryBySeller_result.prototype = {};
ExpressServ_queryBySeller_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryBySeller_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryBySeller_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryByConditions_args = function(args) {
  this.conditions = null;
  if (args) {
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
  }
};
ExpressServ_queryByConditions_args.prototype = {};
ExpressServ_queryByConditions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.ExpressQueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryByConditions_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryByConditions_args');
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 1);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryByConditions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_queryByConditions_result.prototype = {};
ExpressServ_queryByConditions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfoPaginate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryByConditions_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryByConditions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryBatch_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined) {
      this.idList = args.idList;
    }
  }
};
ExpressServ_queryBatch_args.prototype = {};
ExpressServ_queryBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.idList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.idList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryBatch_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryBatch_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter31 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter31))
      {
        iter31 = this.idList[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_queryBatch_result.prototype = {};
ExpressServ_queryBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryBatch_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryFreight_args = function(args) {
};
ExpressServ_queryFreight_args.prototype = {};
ExpressServ_queryFreight_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryFreight_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryFreight_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryFreight_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_queryFreight_result.prototype = {};
ExpressServ_queryFreight_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryFreight_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryFreight_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryEx_args = function(args) {
};
ExpressServ_queryEx_args.prototype = {};
ExpressServ_queryEx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryEx_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryEx_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_queryEx_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_queryEx_result.prototype = {};
ExpressServ_queryEx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_queryEx_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_queryEx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_updateStatus_args = function(args) {
  this.id = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
ExpressServ_updateStatus_args.prototype = {};
ExpressServ_updateStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_updateStatus_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_updateStatus_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_updateStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_updateStatus_result.prototype = {};
ExpressServ_updateStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_updateStatus_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_updateStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_subscribeExpressPost_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
ExpressServ_subscribeExpressPost_args.prototype = {};
ExpressServ_subscribeExpressPost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new ttypes.SubscribeReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_subscribeExpressPost_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_subscribeExpressPost_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_subscribeExpressPost_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_subscribeExpressPost_result.prototype = {};
ExpressServ_subscribeExpressPost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_subscribeExpressPost_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_subscribeExpressPost_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_subscribeExpressRecord_args = function(args) {
  this.res = null;
  if (args) {
    if (args.res !== undefined) {
      this.res = args.res;
    }
  }
};
ExpressServ_subscribeExpressRecord_args.prototype = {};
ExpressServ_subscribeExpressRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.res = new ttypes.SubscribeRes();
        this.res.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_subscribeExpressRecord_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_subscribeExpressRecord_args');
  if (this.res !== null && this.res !== undefined) {
    output.writeFieldBegin('res', Thrift.Type.STRUCT, 1);
    this.res.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_subscribeExpressRecord_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_subscribeExpressRecord_result.prototype = {};
ExpressServ_subscribeExpressRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_subscribeExpressRecord_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_subscribeExpressRecord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_expressQuery_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
ExpressServ_expressQuery_args.prototype = {};
ExpressServ_expressQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.ExpressParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_expressQuery_args.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_expressQuery_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServ_expressQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ExpressServ_expressQuery_result.prototype = {};
ExpressServ_expressQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressServ_expressQuery_result.prototype.write = function(output) {
  output.writeStructBegin('ExpressServ_expressQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ExpressServClient.prototype = {};
ExpressServClient.prototype.seqid = function() { return this._seqid; }
ExpressServClient.prototype.new_seqid = function() { return this._seqid += 1; }
ExpressServClient.prototype.addExpress = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addExpress(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addExpress(info);
  }
};

ExpressServClient.prototype.send_addExpress = function(info) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addExpress', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_addExpress_args();
  args.info = info;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_addExpress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_addExpress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addExpress failed: unknown result');
};
ExpressServClient.prototype.updateExpress = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateExpress(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateExpress(info);
  }
};

ExpressServClient.prototype.send_updateExpress = function(info) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateExpress', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_updateExpress_args();
  args.info = info;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_updateExpress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_updateExpress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateExpress failed: unknown result');
};
ExpressServClient.prototype.deleteExpress = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteExpress(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteExpress(id);
  }
};

ExpressServClient.prototype.send_deleteExpress = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteExpress', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_deleteExpress_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_deleteExpress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_deleteExpress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteExpress failed: unknown result');
};
ExpressServClient.prototype.query = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_query();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_query();
  }
};

ExpressServClient.prototype.send_query = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_query_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query failed: unknown result');
};
ExpressServClient.prototype.queryById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryById(id);
  }
};

ExpressServClient.prototype.send_queryById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryById', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_queryById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_queryById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_queryById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryById failed: unknown result');
};
ExpressServClient.prototype.queryBySeller = function(sellerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryBySeller(sellerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryBySeller(sellerId);
  }
};

ExpressServClient.prototype.send_queryBySeller = function(sellerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryBySeller', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_queryBySeller_args();
  args.sellerId = sellerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_queryBySeller = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_queryBySeller_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryBySeller failed: unknown result');
};
ExpressServClient.prototype.queryByConditions = function(conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryByConditions(conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryByConditions(conditions);
  }
};

ExpressServClient.prototype.send_queryByConditions = function(conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryByConditions', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_queryByConditions_args();
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_queryByConditions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_queryByConditions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryByConditions failed: unknown result');
};
ExpressServClient.prototype.queryBatch = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryBatch(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryBatch(idList);
  }
};

ExpressServClient.prototype.send_queryBatch = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_queryBatch_args();
  args.idList = idList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_queryBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_queryBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryBatch failed: unknown result');
};
ExpressServClient.prototype.queryFreight = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryFreight();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryFreight();
  }
};

ExpressServClient.prototype.send_queryFreight = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryFreight', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_queryFreight_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_queryFreight = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_queryFreight_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryFreight failed: unknown result');
};
ExpressServClient.prototype.queryEx = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryEx();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryEx();
  }
};

ExpressServClient.prototype.send_queryEx = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryEx', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_queryEx_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_queryEx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_queryEx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryEx failed: unknown result');
};
ExpressServClient.prototype.updateStatus = function(id, status, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateStatus(id, status);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateStatus(id, status);
  }
};

ExpressServClient.prototype.send_updateStatus = function(id, status) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_updateStatus_args();
  args.id = id;
  args.status = status;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_updateStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_updateStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateStatus failed: unknown result');
};
ExpressServClient.prototype.subscribeExpressPost = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_subscribeExpressPost(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_subscribeExpressPost(req);
  }
};

ExpressServClient.prototype.send_subscribeExpressPost = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subscribeExpressPost', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_subscribeExpressPost_args();
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_subscribeExpressPost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_subscribeExpressPost_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('subscribeExpressPost failed: unknown result');
};
ExpressServClient.prototype.subscribeExpressRecord = function(res, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_subscribeExpressRecord(res);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_subscribeExpressRecord(res);
  }
};

ExpressServClient.prototype.send_subscribeExpressRecord = function(res) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subscribeExpressRecord', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_subscribeExpressRecord_args();
  args.res = res;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_subscribeExpressRecord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_subscribeExpressRecord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('subscribeExpressRecord failed: unknown result');
};
ExpressServClient.prototype.expressQuery = function(params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expressQuery(params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expressQuery(params);
  }
};

ExpressServClient.prototype.send_expressQuery = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expressQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new ExpressServ_expressQuery_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ExpressServClient.prototype.recv_expressQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ExpressServ_expressQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expressQuery failed: unknown result');
};
ExpressServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ExpressServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ExpressServProcessor.prototype.process_addExpress = function(seqid, input, output) {
  var args = new ExpressServ_addExpress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addExpress.length === 1) {
    Q.fcall(this._handler.addExpress, args.info)
      .then(function(result) {
        var result = new ExpressServ_addExpress_result({success: result});
        output.writeMessageBegin("addExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_addExpress_result(err);
        output.writeMessageBegin("addExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addExpress(args.info,  function (err, result) {
      var result = new ExpressServ_addExpress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addExpress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_updateExpress = function(seqid, input, output) {
  var args = new ExpressServ_updateExpress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateExpress.length === 1) {
    Q.fcall(this._handler.updateExpress, args.info)
      .then(function(result) {
        var result = new ExpressServ_updateExpress_result({success: result});
        output.writeMessageBegin("updateExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_updateExpress_result(err);
        output.writeMessageBegin("updateExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateExpress(args.info,  function (err, result) {
      var result = new ExpressServ_updateExpress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateExpress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_deleteExpress = function(seqid, input, output) {
  var args = new ExpressServ_deleteExpress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteExpress.length === 1) {
    Q.fcall(this._handler.deleteExpress, args.id)
      .then(function(result) {
        var result = new ExpressServ_deleteExpress_result({success: result});
        output.writeMessageBegin("deleteExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_deleteExpress_result(err);
        output.writeMessageBegin("deleteExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteExpress(args.id,  function (err, result) {
      var result = new ExpressServ_deleteExpress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteExpress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_query = function(seqid, input, output) {
  var args = new ExpressServ_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.query.length === 0) {
    Q.fcall(this._handler.query)
      .then(function(result) {
        var result = new ExpressServ_query_result({success: result});
        output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_query_result(err);
        output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.query( function (err, result) {
      var result = new ExpressServ_query_result((err != null ? err : {success: result}));
      output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_queryById = function(seqid, input, output) {
  var args = new ExpressServ_queryById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryById.length === 1) {
    Q.fcall(this._handler.queryById, args.id)
      .then(function(result) {
        var result = new ExpressServ_queryById_result({success: result});
        output.writeMessageBegin("queryById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_queryById_result(err);
        output.writeMessageBegin("queryById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryById(args.id,  function (err, result) {
      var result = new ExpressServ_queryById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_queryBySeller = function(seqid, input, output) {
  var args = new ExpressServ_queryBySeller_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryBySeller.length === 1) {
    Q.fcall(this._handler.queryBySeller, args.sellerId)
      .then(function(result) {
        var result = new ExpressServ_queryBySeller_result({success: result});
        output.writeMessageBegin("queryBySeller", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_queryBySeller_result(err);
        output.writeMessageBegin("queryBySeller", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryBySeller(args.sellerId,  function (err, result) {
      var result = new ExpressServ_queryBySeller_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryBySeller", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_queryByConditions = function(seqid, input, output) {
  var args = new ExpressServ_queryByConditions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryByConditions.length === 1) {
    Q.fcall(this._handler.queryByConditions, args.conditions)
      .then(function(result) {
        var result = new ExpressServ_queryByConditions_result({success: result});
        output.writeMessageBegin("queryByConditions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_queryByConditions_result(err);
        output.writeMessageBegin("queryByConditions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryByConditions(args.conditions,  function (err, result) {
      var result = new ExpressServ_queryByConditions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryByConditions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_queryBatch = function(seqid, input, output) {
  var args = new ExpressServ_queryBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryBatch.length === 1) {
    Q.fcall(this._handler.queryBatch, args.idList)
      .then(function(result) {
        var result = new ExpressServ_queryBatch_result({success: result});
        output.writeMessageBegin("queryBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_queryBatch_result(err);
        output.writeMessageBegin("queryBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryBatch(args.idList,  function (err, result) {
      var result = new ExpressServ_queryBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_queryFreight = function(seqid, input, output) {
  var args = new ExpressServ_queryFreight_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryFreight.length === 0) {
    Q.fcall(this._handler.queryFreight)
      .then(function(result) {
        var result = new ExpressServ_queryFreight_result({success: result});
        output.writeMessageBegin("queryFreight", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_queryFreight_result(err);
        output.writeMessageBegin("queryFreight", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryFreight( function (err, result) {
      var result = new ExpressServ_queryFreight_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryFreight", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_queryEx = function(seqid, input, output) {
  var args = new ExpressServ_queryEx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryEx.length === 0) {
    Q.fcall(this._handler.queryEx)
      .then(function(result) {
        var result = new ExpressServ_queryEx_result({success: result});
        output.writeMessageBegin("queryEx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_queryEx_result(err);
        output.writeMessageBegin("queryEx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryEx( function (err, result) {
      var result = new ExpressServ_queryEx_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryEx", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_updateStatus = function(seqid, input, output) {
  var args = new ExpressServ_updateStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateStatus.length === 2) {
    Q.fcall(this._handler.updateStatus, args.id, args.status)
      .then(function(result) {
        var result = new ExpressServ_updateStatus_result({success: result});
        output.writeMessageBegin("updateStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_updateStatus_result(err);
        output.writeMessageBegin("updateStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateStatus(args.id, args.status,  function (err, result) {
      var result = new ExpressServ_updateStatus_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateStatus", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_subscribeExpressPost = function(seqid, input, output) {
  var args = new ExpressServ_subscribeExpressPost_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.subscribeExpressPost.length === 1) {
    Q.fcall(this._handler.subscribeExpressPost, args.req)
      .then(function(result) {
        var result = new ExpressServ_subscribeExpressPost_result({success: result});
        output.writeMessageBegin("subscribeExpressPost", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_subscribeExpressPost_result(err);
        output.writeMessageBegin("subscribeExpressPost", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.subscribeExpressPost(args.req,  function (err, result) {
      var result = new ExpressServ_subscribeExpressPost_result((err != null ? err : {success: result}));
      output.writeMessageBegin("subscribeExpressPost", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_subscribeExpressRecord = function(seqid, input, output) {
  var args = new ExpressServ_subscribeExpressRecord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.subscribeExpressRecord.length === 1) {
    Q.fcall(this._handler.subscribeExpressRecord, args.res)
      .then(function(result) {
        var result = new ExpressServ_subscribeExpressRecord_result({success: result});
        output.writeMessageBegin("subscribeExpressRecord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_subscribeExpressRecord_result(err);
        output.writeMessageBegin("subscribeExpressRecord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.subscribeExpressRecord(args.res,  function (err, result) {
      var result = new ExpressServ_subscribeExpressRecord_result((err != null ? err : {success: result}));
      output.writeMessageBegin("subscribeExpressRecord", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ExpressServProcessor.prototype.process_expressQuery = function(seqid, input, output) {
  var args = new ExpressServ_expressQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.expressQuery.length === 1) {
    Q.fcall(this._handler.expressQuery, args.params)
      .then(function(result) {
        var result = new ExpressServ_expressQuery_result({success: result});
        output.writeMessageBegin("expressQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ExpressServ_expressQuery_result(err);
        output.writeMessageBegin("expressQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.expressQuery(args.params,  function (err, result) {
      var result = new ExpressServ_expressQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("expressQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

