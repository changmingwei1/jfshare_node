//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
Activity = module.exports.Activity = function(args) {
  this.id = null;
  this.activitySerial = null;
  this.type = null;
  this.name = null;
  this.maxScore = null;
  this.createTime = null;
  this.startTime = null;
  this.endTime = null;
  this.status = null;
  this.isShowRule = null;
  this.isShowRecord = null;
  this.brief = null;
  this.singleGetType = null;
  this.singleGetValue = null;
  this.perLimitTime = null;
  this.perDayTime = null;
  this.partakeType = null;
  this.registStartTime = null;
  this.registEndTime = null;
  this.isH5 = null;
  this.operatorUserId = null;
  this.configure = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.activitySerial !== undefined && args.activitySerial !== null) {
      this.activitySerial = args.activitySerial;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.maxScore !== undefined && args.maxScore !== null) {
      this.maxScore = args.maxScore;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.isShowRule !== undefined && args.isShowRule !== null) {
      this.isShowRule = args.isShowRule;
    }
    if (args.isShowRecord !== undefined && args.isShowRecord !== null) {
      this.isShowRecord = args.isShowRecord;
    }
    if (args.brief !== undefined && args.brief !== null) {
      this.brief = args.brief;
    }
    if (args.singleGetType !== undefined && args.singleGetType !== null) {
      this.singleGetType = args.singleGetType;
    }
    if (args.singleGetValue !== undefined && args.singleGetValue !== null) {
      this.singleGetValue = args.singleGetValue;
    }
    if (args.perLimitTime !== undefined && args.perLimitTime !== null) {
      this.perLimitTime = args.perLimitTime;
    }
    if (args.perDayTime !== undefined && args.perDayTime !== null) {
      this.perDayTime = args.perDayTime;
    }
    if (args.partakeType !== undefined && args.partakeType !== null) {
      this.partakeType = args.partakeType;
    }
    if (args.registStartTime !== undefined && args.registStartTime !== null) {
      this.registStartTime = args.registStartTime;
    }
    if (args.registEndTime !== undefined && args.registEndTime !== null) {
      this.registEndTime = args.registEndTime;
    }
    if (args.isH5 !== undefined && args.isH5 !== null) {
      this.isH5 = args.isH5;
    }
    if (args.operatorUserId !== undefined && args.operatorUserId !== null) {
      this.operatorUserId = args.operatorUserId;
    }
    if (args.configure !== undefined && args.configure !== null) {
      this.configure = args.configure;
    }
  }
};
Activity.prototype = {};
Activity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activitySerial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.isShowRule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.isShowRecord = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.brief = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.singleGetType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.singleGetValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.perLimitTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.perDayTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.partakeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.registStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.registEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.isH5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.operatorUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.configure = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Activity.prototype.write = function(output) {
  output.writeStructBegin('Activity');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activitySerial !== null && this.activitySerial !== undefined) {
    output.writeFieldBegin('activitySerial', Thrift.Type.STRING, 2);
    output.writeString(this.activitySerial);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.maxScore !== null && this.maxScore !== undefined) {
    output.writeFieldBegin('maxScore', Thrift.Type.I32, 5);
    output.writeI32(this.maxScore);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 7);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 8);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.isShowRule !== null && this.isShowRule !== undefined) {
    output.writeFieldBegin('isShowRule', Thrift.Type.I32, 10);
    output.writeI32(this.isShowRule);
    output.writeFieldEnd();
  }
  if (this.isShowRecord !== null && this.isShowRecord !== undefined) {
    output.writeFieldBegin('isShowRecord', Thrift.Type.I32, 11);
    output.writeI32(this.isShowRecord);
    output.writeFieldEnd();
  }
  if (this.brief !== null && this.brief !== undefined) {
    output.writeFieldBegin('brief', Thrift.Type.STRING, 12);
    output.writeString(this.brief);
    output.writeFieldEnd();
  }
  if (this.singleGetType !== null && this.singleGetType !== undefined) {
    output.writeFieldBegin('singleGetType', Thrift.Type.I32, 13);
    output.writeI32(this.singleGetType);
    output.writeFieldEnd();
  }
  if (this.singleGetValue !== null && this.singleGetValue !== undefined) {
    output.writeFieldBegin('singleGetValue', Thrift.Type.STRING, 14);
    output.writeString(this.singleGetValue);
    output.writeFieldEnd();
  }
  if (this.perLimitTime !== null && this.perLimitTime !== undefined) {
    output.writeFieldBegin('perLimitTime', Thrift.Type.I32, 15);
    output.writeI32(this.perLimitTime);
    output.writeFieldEnd();
  }
  if (this.perDayTime !== null && this.perDayTime !== undefined) {
    output.writeFieldBegin('perDayTime', Thrift.Type.I32, 16);
    output.writeI32(this.perDayTime);
    output.writeFieldEnd();
  }
  if (this.partakeType !== null && this.partakeType !== undefined) {
    output.writeFieldBegin('partakeType', Thrift.Type.I32, 17);
    output.writeI32(this.partakeType);
    output.writeFieldEnd();
  }
  if (this.registStartTime !== null && this.registStartTime !== undefined) {
    output.writeFieldBegin('registStartTime', Thrift.Type.STRING, 18);
    output.writeString(this.registStartTime);
    output.writeFieldEnd();
  }
  if (this.registEndTime !== null && this.registEndTime !== undefined) {
    output.writeFieldBegin('registEndTime', Thrift.Type.STRING, 19);
    output.writeString(this.registEndTime);
    output.writeFieldEnd();
  }
  if (this.isH5 !== null && this.isH5 !== undefined) {
    output.writeFieldBegin('isH5', Thrift.Type.I32, 20);
    output.writeI32(this.isH5);
    output.writeFieldEnd();
  }
  if (this.operatorUserId !== null && this.operatorUserId !== undefined) {
    output.writeFieldBegin('operatorUserId', Thrift.Type.I32, 21);
    output.writeI32(this.operatorUserId);
    output.writeFieldEnd();
  }
  if (this.configure !== null && this.configure !== undefined) {
    output.writeFieldBegin('configure', Thrift.Type.STRING, 22);
    output.writeString(this.configure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityListResult = module.exports.ActivityListResult = function(args) {
  this.result = null;
  this.activityList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.activityList !== undefined && args.activityList !== null) {
      this.activityList = Thrift.copyList(args.activityList, [ttypes.Activity]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
  }
};
ActivityListResult.prototype = {};
ActivityListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.activityList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Activity();
          elem6.read(input);
          this.activityList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityListResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter7 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter7))
      {
        iter7 = this.activityList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveRecoard = module.exports.ReceiveRecoard = function(args) {
  this.id = null;
  this.activityId = null;
  this.activityName = null;
  this.score = null;
  this.userId = null;
  this.userPhone = null;
  this.hitTime = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.activityName !== undefined && args.activityName !== null) {
      this.activityName = args.activityName;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userPhone !== undefined && args.userPhone !== null) {
      this.userPhone = args.userPhone;
    }
    if (args.hitTime !== undefined && args.hitTime !== null) {
      this.hitTime = args.hitTime;
    }
  }
};
ReceiveRecoard.prototype = {};
ReceiveRecoard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.hitTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveRecoard.prototype.write = function(output) {
  output.writeStructBegin('ReceiveRecoard');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 2);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.activityName !== null && this.activityName !== undefined) {
    output.writeFieldBegin('activityName', Thrift.Type.STRING, 3);
    output.writeString(this.activityName);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 4);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 5);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.userPhone !== null && this.userPhone !== undefined) {
    output.writeFieldBegin('userPhone', Thrift.Type.STRING, 6);
    output.writeString(this.userPhone);
    output.writeFieldEnd();
  }
  if (this.hitTime !== null && this.hitTime !== undefined) {
    output.writeFieldBegin('hitTime', Thrift.Type.STRING, 7);
    output.writeString(this.hitTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveRecoardListResult = module.exports.ReceiveRecoardListResult = function(args) {
  this.result = null;
  this.activityList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.activityList !== undefined && args.activityList !== null) {
      this.activityList = Thrift.copyList(args.activityList, [ttypes.ReceiveRecoard]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
  }
};
ReceiveRecoardListResult.prototype = {};
ReceiveRecoardListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.activityList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ReceiveRecoard();
          elem14.read(input);
          this.activityList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveRecoardListResult.prototype.write = function(output) {
  output.writeStructBegin('ReceiveRecoardListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter15 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter15))
      {
        iter15 = this.activityList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result4Excel = module.exports.Result4Excel = function(args) {
  this.result = null;
  this.path = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
Result4Excel.prototype = {};
Result4Excel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result4Excel.prototype.write = function(output) {
  output.writeStructBegin('Result4Excel');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GenerateParam = module.exports.GenerateParam = function(args) {
  this.activityId = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
  }
};
GenerateParam.prototype = {};
GenerateParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GenerateParam.prototype.write = function(output) {
  output.writeStructBegin('GenerateParam');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

