//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
AddressInfo = module.exports.AddressInfo = function(args) {
  this.userId = null;
  this.id = null;
  this.receiverName = null;
  this.mobile = null;
  this.telCode = null;
  this.tel = null;
  this.telExtNumber = null;
  this.provinceId = null;
  this.provinceName = null;
  this.cityId = null;
  this.cityName = null;
  this.countyId = null;
  this.countyName = null;
  this.address = null;
  this.postCode = null;
  this.isDefault = null;
  this.email = null;
  this.index = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.receiverName !== undefined) {
      this.receiverName = args.receiverName;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.telCode !== undefined) {
      this.telCode = args.telCode;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
    if (args.telExtNumber !== undefined) {
      this.telExtNumber = args.telExtNumber;
    }
    if (args.provinceId !== undefined) {
      this.provinceId = args.provinceId;
    }
    if (args.provinceName !== undefined) {
      this.provinceName = args.provinceName;
    }
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
    if (args.cityName !== undefined) {
      this.cityName = args.cityName;
    }
    if (args.countyId !== undefined) {
      this.countyId = args.countyId;
    }
    if (args.countyName !== undefined) {
      this.countyName = args.countyName;
    }
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.postCode !== undefined) {
      this.postCode = args.postCode;
    }
    if (args.isDefault !== undefined) {
      this.isDefault = args.isDefault;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
AddressInfo.prototype = {};
AddressInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.receiverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.telCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.telExtNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.countyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.postCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.isDefault = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressInfo.prototype.write = function(output) {
  output.writeStructBegin('AddressInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.receiverName !== null && this.receiverName !== undefined) {
    output.writeFieldBegin('receiverName', Thrift.Type.STRING, 3);
    output.writeString(this.receiverName);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 4);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.telCode !== null && this.telCode !== undefined) {
    output.writeFieldBegin('telCode', Thrift.Type.STRING, 5);
    output.writeString(this.telCode);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 6);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.telExtNumber !== null && this.telExtNumber !== undefined) {
    output.writeFieldBegin('telExtNumber', Thrift.Type.STRING, 7);
    output.writeString(this.telExtNumber);
    output.writeFieldEnd();
  }
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 8);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 9);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 10);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 11);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 12);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  if (this.countyName !== null && this.countyName !== undefined) {
    output.writeFieldBegin('countyName', Thrift.Type.STRING, 13);
    output.writeString(this.countyName);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 14);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.postCode !== null && this.postCode !== undefined) {
    output.writeFieldBegin('postCode', Thrift.Type.STRING, 15);
    output.writeString(this.postCode);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.I32, 16);
    output.writeI32(this.isDefault);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 17);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 18);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressInfoListResult = module.exports.AddressInfoListResult = function(args) {
  this.result = null;
  this.addressInfoList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.addressInfoList !== undefined) {
      this.addressInfoList = args.addressInfoList;
    }
  }
};
AddressInfoListResult.prototype = {};
AddressInfoListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.addressInfoList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.AddressInfo();
          elem6.read(input);
          this.addressInfoList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressInfoListResult.prototype.write = function(output) {
  output.writeStructBegin('AddressInfoListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.addressInfoList !== null && this.addressInfoList !== undefined) {
    output.writeFieldBegin('addressInfoList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.addressInfoList.length);
    for (var iter7 in this.addressInfoList)
    {
      if (this.addressInfoList.hasOwnProperty(iter7))
      {
        iter7 = this.addressInfoList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressInfoResult = module.exports.AddressInfoResult = function(args) {
  this.result = null;
  this.addressInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.addressInfo !== undefined) {
      this.addressInfo = args.addressInfo;
    }
  }
};
AddressInfoResult.prototype = {};
AddressInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressInfo = new ttypes.AddressInfo();
        this.addressInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressInfoResult.prototype.write = function(output) {
  output.writeStructBegin('AddressInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.addressInfo !== null && this.addressInfo !== undefined) {
    output.writeFieldBegin('addressInfo', Thrift.Type.STRUCT, 2);
    this.addressInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

