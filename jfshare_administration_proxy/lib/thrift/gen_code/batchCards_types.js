//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
BatchActivity = module.exports.BatchActivity = function(args) {
  this.id = null;
  this.name = null;
  this.pieceValue = null;
  this.totalCount = null;
  this.rechargeType = null;
  this.createTime = null;
  this.startTime = null;
  this.endTime = null;
  this.curStatus = null;
  this.password = null;
  this.multiRechargeEnable = null;
  this.UsedCount = null;
  this.SendCount = null;
  this.channel = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.multiRechargeEnable !== undefined) {
      this.multiRechargeEnable = args.multiRechargeEnable;
    }
    if (args.UsedCount !== undefined) {
      this.UsedCount = args.UsedCount;
    }
    if (args.SendCount !== undefined) {
      this.SendCount = args.SendCount;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
BatchActivity.prototype = {};
BatchActivity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.multiRechargeEnable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.UsedCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.SendCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchActivity.prototype.write = function(output) {
  output.writeStructBegin('BatchActivity');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.STRING, 3);
    output.writeString(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 4);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 7);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 8);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 9);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 10);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.multiRechargeEnable !== null && this.multiRechargeEnable !== undefined) {
    output.writeFieldBegin('multiRechargeEnable', Thrift.Type.STRING, 11);
    output.writeString(this.multiRechargeEnable);
    output.writeFieldEnd();
  }
  if (this.UsedCount !== null && this.UsedCount !== undefined) {
    output.writeFieldBegin('UsedCount', Thrift.Type.I32, 12);
    output.writeI32(this.UsedCount);
    output.writeFieldEnd();
  }
  if (this.SendCount !== null && this.SendCount !== undefined) {
    output.writeFieldBegin('SendCount', Thrift.Type.I32, 13);
    output.writeI32(this.SendCount);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 14);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchCardRecord = module.exports.BatchCardRecord = function(args) {
  this.id = null;
  this.activityId = null;
  this.cardName = null;
  this.cardPsd = null;
  this.sendStatus = null;
  this.rechargeStatus = null;
  this.rechargeAccount = null;
  this.rechargeTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.cardPsd !== undefined) {
      this.cardPsd = args.cardPsd;
    }
    if (args.sendStatus !== undefined) {
      this.sendStatus = args.sendStatus;
    }
    if (args.rechargeStatus !== undefined) {
      this.rechargeStatus = args.rechargeStatus;
    }
    if (args.rechargeAccount !== undefined) {
      this.rechargeAccount = args.rechargeAccount;
    }
    if (args.rechargeTime !== undefined) {
      this.rechargeTime = args.rechargeTime;
    }
  }
};
BatchCardRecord.prototype = {};
BatchCardRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cardPsd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sendStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchCardRecord.prototype.write = function(output) {
  output.writeStructBegin('BatchCardRecord');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 2);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 3);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.cardPsd !== null && this.cardPsd !== undefined) {
    output.writeFieldBegin('cardPsd', Thrift.Type.STRING, 4);
    output.writeString(this.cardPsd);
    output.writeFieldEnd();
  }
  if (this.sendStatus !== null && this.sendStatus !== undefined) {
    output.writeFieldBegin('sendStatus', Thrift.Type.STRING, 5);
    output.writeString(this.sendStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeStatus !== null && this.rechargeStatus !== undefined) {
    output.writeFieldBegin('rechargeStatus', Thrift.Type.STRING, 6);
    output.writeString(this.rechargeStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeAccount !== null && this.rechargeAccount !== undefined) {
    output.writeFieldBegin('rechargeAccount', Thrift.Type.STRING, 7);
    output.writeString(this.rechargeAccount);
    output.writeFieldEnd();
  }
  if (this.rechargeTime !== null && this.rechargeTime !== undefined) {
    output.writeFieldBegin('rechargeTime', Thrift.Type.STRING, 8);
    output.writeString(this.rechargeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRechargeCardRecord = module.exports.BatchRechargeCardRecord = function(args) {
  this.id = null;
  this.activityId = null;
  this.cardName = null;
  this.pieceValue = null;
  this.rechargeType = null;
  this.userId = null;
  this.rechargeTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.rechargeTime !== undefined) {
      this.rechargeTime = args.rechargeTime;
    }
  }
};
BatchRechargeCardRecord.prototype = {};
BatchRechargeCardRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pieceValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRechargeCardRecord.prototype.write = function(output) {
  output.writeStructBegin('BatchRechargeCardRecord');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 2);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 3);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.I32, 4);
    output.writeI32(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 6);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.rechargeTime !== null && this.rechargeTime !== undefined) {
    output.writeFieldBegin('rechargeTime', Thrift.Type.STRING, 7);
    output.writeString(this.rechargeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityQueryParam = module.exports.ActivityQueryParam = function(args) {
  this.name = null;
  this.minPieceValue = null;
  this.maxPieceValue = null;
  this.minStartTime = null;
  this.maxStartTime = null;
  this.minEndTime = null;
  this.maxEndTime = null;
  this.curStatus = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.minPieceValue !== undefined) {
      this.minPieceValue = args.minPieceValue;
    }
    if (args.maxPieceValue !== undefined) {
      this.maxPieceValue = args.maxPieceValue;
    }
    if (args.minStartTime !== undefined) {
      this.minStartTime = args.minStartTime;
    }
    if (args.maxStartTime !== undefined) {
      this.maxStartTime = args.maxStartTime;
    }
    if (args.minEndTime !== undefined) {
      this.minEndTime = args.minEndTime;
    }
    if (args.maxEndTime !== undefined) {
      this.maxEndTime = args.maxEndTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
  }
};
ActivityQueryParam.prototype = {};
ActivityQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.minPieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.maxPieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.minStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.maxStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.minEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.maxEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ActivityQueryParam');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.minPieceValue !== null && this.minPieceValue !== undefined) {
    output.writeFieldBegin('minPieceValue', Thrift.Type.STRING, 2);
    output.writeString(this.minPieceValue);
    output.writeFieldEnd();
  }
  if (this.maxPieceValue !== null && this.maxPieceValue !== undefined) {
    output.writeFieldBegin('maxPieceValue', Thrift.Type.STRING, 3);
    output.writeString(this.maxPieceValue);
    output.writeFieldEnd();
  }
  if (this.minStartTime !== null && this.minStartTime !== undefined) {
    output.writeFieldBegin('minStartTime', Thrift.Type.STRING, 4);
    output.writeString(this.minStartTime);
    output.writeFieldEnd();
  }
  if (this.maxStartTime !== null && this.maxStartTime !== undefined) {
    output.writeFieldBegin('maxStartTime', Thrift.Type.STRING, 5);
    output.writeString(this.maxStartTime);
    output.writeFieldEnd();
  }
  if (this.minEndTime !== null && this.minEndTime !== undefined) {
    output.writeFieldBegin('minEndTime', Thrift.Type.STRING, 6);
    output.writeString(this.minEndTime);
    output.writeFieldEnd();
  }
  if (this.maxEndTime !== null && this.maxEndTime !== undefined) {
    output.writeFieldBegin('maxEndTime', Thrift.Type.STRING, 7);
    output.writeString(this.maxEndTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 8);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityResult = module.exports.ActivityResult = function(args) {
  this.result = null;
  this.activity = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activity !== undefined) {
      this.activity = args.activity;
    }
  }
};
ActivityResult.prototype = {};
ActivityResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.BatchActivity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 2);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityBatchResult = module.exports.ActivityBatchResult = function(args) {
  this.result = null;
  this.activityList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activityList !== undefined) {
      this.activityList = args.activityList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ActivityBatchResult.prototype = {};
ActivityBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.activityList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.BatchActivity();
          elem6.read(input);
          this.activityList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityBatchResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter7 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter7))
      {
        iter7 = this.activityList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardQueryParam = module.exports.CardQueryParam = function(args) {
  this.cardName = null;
  this.cardPsd = null;
  this.sendStatus = null;
  this.rechargeStatus = null;
  this.rechargeAccount = null;
  if (args) {
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.cardPsd !== undefined) {
      this.cardPsd = args.cardPsd;
    }
    if (args.sendStatus !== undefined) {
      this.sendStatus = args.sendStatus;
    }
    if (args.rechargeStatus !== undefined) {
      this.rechargeStatus = args.rechargeStatus;
    }
    if (args.rechargeAccount !== undefined) {
      this.rechargeAccount = args.rechargeAccount;
    }
  }
};
CardQueryParam.prototype = {};
CardQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardPsd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardQueryParam.prototype.write = function(output) {
  output.writeStructBegin('CardQueryParam');
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 1);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.cardPsd !== null && this.cardPsd !== undefined) {
    output.writeFieldBegin('cardPsd', Thrift.Type.STRING, 2);
    output.writeString(this.cardPsd);
    output.writeFieldEnd();
  }
  if (this.sendStatus !== null && this.sendStatus !== undefined) {
    output.writeFieldBegin('sendStatus', Thrift.Type.STRING, 3);
    output.writeString(this.sendStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeStatus !== null && this.rechargeStatus !== undefined) {
    output.writeFieldBegin('rechargeStatus', Thrift.Type.STRING, 4);
    output.writeString(this.rechargeStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeAccount !== null && this.rechargeAccount !== undefined) {
    output.writeFieldBegin('rechargeAccount', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeAccount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardResult = module.exports.CardResult = function(args) {
  this.result = null;
  this.card = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.card !== undefined) {
      this.card = args.card;
    }
  }
};
CardResult.prototype = {};
CardResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.card = new ttypes.BatchCardRecord();
        this.card.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardResult.prototype.write = function(output) {
  output.writeStructBegin('CardResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.card !== null && this.card !== undefined) {
    output.writeFieldBegin('card', Thrift.Type.STRUCT, 2);
    this.card.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardBatchResult = module.exports.CardBatchResult = function(args) {
  this.result = null;
  this.cardList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cardList !== undefined) {
      this.cardList = args.cardList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CardBatchResult.prototype = {};
CardBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.cardList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.BatchCardRecord();
          elem14.read(input);
          this.cardList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardBatchResult.prototype.write = function(output) {
  output.writeStructBegin('CardBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardList !== null && this.cardList !== undefined) {
    output.writeFieldBegin('cardList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardList.length);
    for (var iter15 in this.cardList)
    {
      if (this.cardList.hasOwnProperty(iter15))
      {
        iter15 = this.cardList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardRechargeCardParam = module.exports.CardRechargeCardParam = function(args) {
  this.cardId = null;
  this.pieceValue = null;
  this.rechargeType = null;
  this.userId = null;
  this.rechargeTime = null;
  if (args) {
    if (args.cardId !== undefined) {
      this.cardId = args.cardId;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.rechargeTime !== undefined) {
      this.rechargeTime = args.rechargeTime;
    }
  }
};
CardRechargeCardParam.prototype = {};
CardRechargeCardParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cardId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pieceValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardRechargeCardParam.prototype.write = function(output) {
  output.writeStructBegin('CardRechargeCardParam');
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.I32, 1);
    output.writeI32(this.cardId);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.I32, 2);
    output.writeI32(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 3);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 4);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.rechargeTime !== null && this.rechargeTime !== undefined) {
    output.writeFieldBegin('rechargeTime', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardRecordResult = module.exports.CardRecordResult = function(args) {
  this.result = null;
  this.rechargeCardRecord = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.rechargeCardRecord !== undefined) {
      this.rechargeCardRecord = args.rechargeCardRecord;
    }
  }
};
CardRecordResult.prototype = {};
CardRecordResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rechargeCardRecord = new ttypes.BatchRechargeCardRecord();
        this.rechargeCardRecord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardRecordResult.prototype.write = function(output) {
  output.writeStructBegin('CardRecordResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.rechargeCardRecord !== null && this.rechargeCardRecord !== undefined) {
    output.writeFieldBegin('rechargeCardRecord', Thrift.Type.STRUCT, 2);
    this.rechargeCardRecord.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardRecordBatchResult = module.exports.CardRecordBatchResult = function(args) {
  this.result = null;
  this.rechargeCardRecordList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.rechargeCardRecordList !== undefined) {
      this.rechargeCardRecordList = args.rechargeCardRecordList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CardRecordBatchResult.prototype = {};
CardRecordBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.rechargeCardRecordList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.BatchRechargeCardRecord();
          elem22.read(input);
          this.rechargeCardRecordList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardRecordBatchResult.prototype.write = function(output) {
  output.writeStructBegin('CardRecordBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.rechargeCardRecordList !== null && this.rechargeCardRecordList !== undefined) {
    output.writeFieldBegin('rechargeCardRecordList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rechargeCardRecordList.length);
    for (var iter23 in this.rechargeCardRecordList)
    {
      if (this.rechargeCardRecordList.hasOwnProperty(iter23))
      {
        iter23 = this.rechargeCardRecordList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExcelExportResult = module.exports.ExcelExportResult = function(args) {
  this.result = null;
  this.path = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
  }
};
ExcelExportResult.prototype = {};
ExcelExportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExcelExportResult.prototype.write = function(output) {
  output.writeStructBegin('ExcelExportResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidOneActivityResult = module.exports.InvalidOneActivityResult = function(args) {
  this.result = null;
  this.path = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
  }
};
InvalidOneActivityResult.prototype = {};
InvalidOneActivityResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOneActivityResult.prototype.write = function(output) {
  output.writeStructBegin('InvalidOneActivityResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityBean = module.exports.ActivityBean = function(args) {
  this.name = null;
  this.pieceValue = null;
  this.totalCount = null;
  this.rechargeType = null;
  this.startTime = null;
  this.endTime = null;
  this.curStatus = null;
  this.password = null;
  this.multiRechargeEnable = null;
  this.channel = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.multiRechargeEnable !== undefined) {
      this.multiRechargeEnable = args.multiRechargeEnable;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
ActivityBean.prototype = {};
ActivityBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.multiRechargeEnable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityBean.prototype.write = function(output) {
  output.writeStructBegin('ActivityBean');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.STRING, 2);
    output.writeString(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 4);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 5);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 6);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 7);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 8);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.multiRechargeEnable !== null && this.multiRechargeEnable !== undefined) {
    output.writeFieldBegin('multiRechargeEnable', Thrift.Type.STRING, 9);
    output.writeString(this.multiRechargeEnable);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 10);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RechargeParam = module.exports.RechargeParam = function(args) {
  this.cardName = null;
  this.cardPsd = null;
  this.userId = null;
  if (args) {
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.cardPsd !== undefined) {
      this.cardPsd = args.cardPsd;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
RechargeParam.prototype = {};
RechargeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardPsd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RechargeParam.prototype.write = function(output) {
  output.writeStructBegin('RechargeParam');
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 1);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.cardPsd !== null && this.cardPsd !== undefined) {
    output.writeFieldBegin('cardPsd', Thrift.Type.STRING, 2);
    output.writeString(this.cardPsd);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DirectRechargeResult = module.exports.DirectRechargeResult = function(args) {
  this.result = null;
  this.sucessNum = null;
  this.failedNum = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.sucessNum !== undefined) {
      this.sucessNum = args.sucessNum;
    }
    if (args.failedNum !== undefined) {
      this.failedNum = args.failedNum;
    }
  }
};
DirectRechargeResult.prototype = {};
DirectRechargeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sucessNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.failedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectRechargeResult.prototype.write = function(output) {
  output.writeStructBegin('DirectRechargeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.sucessNum !== null && this.sucessNum !== undefined) {
    output.writeFieldBegin('sucessNum', Thrift.Type.I32, 2);
    output.writeI32(this.sucessNum);
    output.writeFieldEnd();
  }
  if (this.failedNum !== null && this.failedNum !== undefined) {
    output.writeFieldBegin('failedNum', Thrift.Type.I32, 3);
    output.writeI32(this.failedNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ToRechargeParams = module.exports.ToRechargeParams = function(args) {
  this.validataStr = null;
  this.filePath = null;
  this.activityId = null;
  if (args) {
    if (args.validataStr !== undefined) {
      this.validataStr = args.validataStr;
    }
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
  }
};
ToRechargeParams.prototype = {};
ToRechargeParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.validataStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToRechargeParams.prototype.write = function(output) {
  output.writeStructBegin('ToRechargeParams');
  if (this.validataStr !== null && this.validataStr !== undefined) {
    output.writeFieldBegin('validataStr', Thrift.Type.STRING, 1);
    output.writeString(this.validataStr);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 2);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 3);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Activity = module.exports.Activity = function(args) {
  this.id = null;
  this.activitySerial = null;
  this.type = null;
  this.name = null;
  this.maxScore = null;
  this.createTime = null;
  this.startTime = null;
  this.endTime = null;
  this.status = null;
  this.isShowRule = null;
  this.isShowRecord = null;
  this.brief = null;
  this.singleGetType = null;
  this.singleGetValue = null;
  this.perLimitTime = null;
  this.perDayTime = null;
  this.partakeType = null;
  this.registStartTime = null;
  this.registEndTime = null;
  this.isH5 = null;
  this.operatorUserId = null;
  this.configure = null;
  this.sendScore = null;
  this.count = null;
  this.realEndTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.activitySerial !== undefined) {
      this.activitySerial = args.activitySerial;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.maxScore !== undefined) {
      this.maxScore = args.maxScore;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.isShowRule !== undefined) {
      this.isShowRule = args.isShowRule;
    }
    if (args.isShowRecord !== undefined) {
      this.isShowRecord = args.isShowRecord;
    }
    if (args.brief !== undefined) {
      this.brief = args.brief;
    }
    if (args.singleGetType !== undefined) {
      this.singleGetType = args.singleGetType;
    }
    if (args.singleGetValue !== undefined) {
      this.singleGetValue = args.singleGetValue;
    }
    if (args.perLimitTime !== undefined) {
      this.perLimitTime = args.perLimitTime;
    }
    if (args.perDayTime !== undefined) {
      this.perDayTime = args.perDayTime;
    }
    if (args.partakeType !== undefined) {
      this.partakeType = args.partakeType;
    }
    if (args.registStartTime !== undefined) {
      this.registStartTime = args.registStartTime;
    }
    if (args.registEndTime !== undefined) {
      this.registEndTime = args.registEndTime;
    }
    if (args.isH5 !== undefined) {
      this.isH5 = args.isH5;
    }
    if (args.operatorUserId !== undefined) {
      this.operatorUserId = args.operatorUserId;
    }
    if (args.configure !== undefined) {
      this.configure = args.configure;
    }
    if (args.sendScore !== undefined) {
      this.sendScore = args.sendScore;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.realEndTime !== undefined) {
      this.realEndTime = args.realEndTime;
    }
  }
};
Activity.prototype = {};
Activity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activitySerial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.isShowRule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.isShowRecord = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.brief = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.singleGetType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.singleGetValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.perLimitTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.perDayTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.partakeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.registStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.registEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.isH5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.operatorUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.configure = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.sendScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.realEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Activity.prototype.write = function(output) {
  output.writeStructBegin('Activity');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activitySerial !== null && this.activitySerial !== undefined) {
    output.writeFieldBegin('activitySerial', Thrift.Type.STRING, 2);
    output.writeString(this.activitySerial);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.maxScore !== null && this.maxScore !== undefined) {
    output.writeFieldBegin('maxScore', Thrift.Type.I32, 5);
    output.writeI32(this.maxScore);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 7);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 8);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.isShowRule !== null && this.isShowRule !== undefined) {
    output.writeFieldBegin('isShowRule', Thrift.Type.I32, 10);
    output.writeI32(this.isShowRule);
    output.writeFieldEnd();
  }
  if (this.isShowRecord !== null && this.isShowRecord !== undefined) {
    output.writeFieldBegin('isShowRecord', Thrift.Type.I32, 11);
    output.writeI32(this.isShowRecord);
    output.writeFieldEnd();
  }
  if (this.brief !== null && this.brief !== undefined) {
    output.writeFieldBegin('brief', Thrift.Type.STRING, 12);
    output.writeString(this.brief);
    output.writeFieldEnd();
  }
  if (this.singleGetType !== null && this.singleGetType !== undefined) {
    output.writeFieldBegin('singleGetType', Thrift.Type.I32, 13);
    output.writeI32(this.singleGetType);
    output.writeFieldEnd();
  }
  if (this.singleGetValue !== null && this.singleGetValue !== undefined) {
    output.writeFieldBegin('singleGetValue', Thrift.Type.STRING, 14);
    output.writeString(this.singleGetValue);
    output.writeFieldEnd();
  }
  if (this.perLimitTime !== null && this.perLimitTime !== undefined) {
    output.writeFieldBegin('perLimitTime', Thrift.Type.I32, 15);
    output.writeI32(this.perLimitTime);
    output.writeFieldEnd();
  }
  if (this.perDayTime !== null && this.perDayTime !== undefined) {
    output.writeFieldBegin('perDayTime', Thrift.Type.I32, 16);
    output.writeI32(this.perDayTime);
    output.writeFieldEnd();
  }
  if (this.partakeType !== null && this.partakeType !== undefined) {
    output.writeFieldBegin('partakeType', Thrift.Type.I32, 17);
    output.writeI32(this.partakeType);
    output.writeFieldEnd();
  }
  if (this.registStartTime !== null && this.registStartTime !== undefined) {
    output.writeFieldBegin('registStartTime', Thrift.Type.STRING, 18);
    output.writeString(this.registStartTime);
    output.writeFieldEnd();
  }
  if (this.registEndTime !== null && this.registEndTime !== undefined) {
    output.writeFieldBegin('registEndTime', Thrift.Type.STRING, 19);
    output.writeString(this.registEndTime);
    output.writeFieldEnd();
  }
  if (this.isH5 !== null && this.isH5 !== undefined) {
    output.writeFieldBegin('isH5', Thrift.Type.I32, 20);
    output.writeI32(this.isH5);
    output.writeFieldEnd();
  }
  if (this.operatorUserId !== null && this.operatorUserId !== undefined) {
    output.writeFieldBegin('operatorUserId', Thrift.Type.I32, 21);
    output.writeI32(this.operatorUserId);
    output.writeFieldEnd();
  }
  if (this.configure !== null && this.configure !== undefined) {
    output.writeFieldBegin('configure', Thrift.Type.STRING, 22);
    output.writeString(this.configure);
    output.writeFieldEnd();
  }
  if (this.sendScore !== null && this.sendScore !== undefined) {
    output.writeFieldBegin('sendScore', Thrift.Type.I32, 23);
    output.writeI32(this.sendScore);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 24);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.realEndTime !== null && this.realEndTime !== undefined) {
    output.writeFieldBegin('realEndTime', Thrift.Type.STRING, 25);
    output.writeString(this.realEndTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityListResult = module.exports.ActivityListResult = function(args) {
  this.result = null;
  this.activityList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activityList !== undefined) {
      this.activityList = args.activityList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ActivityListResult.prototype = {};
ActivityListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.activityList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Activity();
          elem30.read(input);
          this.activityList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityListResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter31 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter31))
      {
        iter31 = this.activityList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityRedPaperResult = module.exports.ActivityRedPaperResult = function(args) {
  this.result = null;
  this.entity = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.entity !== undefined) {
      this.entity = args.entity;
    }
  }
};
ActivityRedPaperResult.prototype = {};
ActivityRedPaperResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entity = new ttypes.Activity();
        this.entity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityRedPaperResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityRedPaperResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.entity !== null && this.entity !== undefined) {
    output.writeFieldBegin('entity', Thrift.Type.STRUCT, 2);
    this.entity.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveRecoard = module.exports.ReceiveRecoard = function(args) {
  this.id = null;
  this.activityId = null;
  this.activityName = null;
  this.score = null;
  this.userId = null;
  this.userPhone = null;
  this.hitTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.activityName !== undefined) {
      this.activityName = args.activityName;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userPhone !== undefined) {
      this.userPhone = args.userPhone;
    }
    if (args.hitTime !== undefined) {
      this.hitTime = args.hitTime;
    }
  }
};
ReceiveRecoard.prototype = {};
ReceiveRecoard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.hitTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveRecoard.prototype.write = function(output) {
  output.writeStructBegin('ReceiveRecoard');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 2);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.activityName !== null && this.activityName !== undefined) {
    output.writeFieldBegin('activityName', Thrift.Type.STRING, 3);
    output.writeString(this.activityName);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 4);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 5);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.userPhone !== null && this.userPhone !== undefined) {
    output.writeFieldBegin('userPhone', Thrift.Type.STRING, 6);
    output.writeString(this.userPhone);
    output.writeFieldEnd();
  }
  if (this.hitTime !== null && this.hitTime !== undefined) {
    output.writeFieldBegin('hitTime', Thrift.Type.STRING, 7);
    output.writeString(this.hitTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryParam4Record = module.exports.QueryParam4Record = function(args) {
  this.id = null;
  this.userPhone = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userPhone !== undefined) {
      this.userPhone = args.userPhone;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
QueryParam4Record.prototype = {};
QueryParam4Record.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryParam4Record.prototype.write = function(output) {
  output.writeStructBegin('QueryParam4Record');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.userPhone !== null && this.userPhone !== undefined) {
    output.writeFieldBegin('userPhone', Thrift.Type.STRING, 2);
    output.writeString(this.userPhone);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 3);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 4);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveRecoardListResult = module.exports.ReceiveRecoardListResult = function(args) {
  this.result = null;
  this.activityList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activityList !== undefined) {
      this.activityList = args.activityList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ReceiveRecoardListResult.prototype = {};
ReceiveRecoardListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.activityList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ReceiveRecoard();
          elem38.read(input);
          this.activityList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveRecoardListResult.prototype.write = function(output) {
  output.writeStructBegin('ReceiveRecoardListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter39 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter39))
      {
        iter39 = this.activityList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperActivityQueryParam = module.exports.RedPaperActivityQueryParam = function(args) {
  this.name = null;
  this.minStartTime = null;
  this.maxStartTime = null;
  this.minEndTime = null;
  this.maxEndTime = null;
  this.curStatus = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.minStartTime !== undefined) {
      this.minStartTime = args.minStartTime;
    }
    if (args.maxStartTime !== undefined) {
      this.maxStartTime = args.maxStartTime;
    }
    if (args.minEndTime !== undefined) {
      this.minEndTime = args.minEndTime;
    }
    if (args.maxEndTime !== undefined) {
      this.maxEndTime = args.maxEndTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
  }
};
RedPaperActivityQueryParam.prototype = {};
RedPaperActivityQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.minStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.maxStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.minEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.maxEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperActivityQueryParam.prototype.write = function(output) {
  output.writeStructBegin('RedPaperActivityQueryParam');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.minStartTime !== null && this.minStartTime !== undefined) {
    output.writeFieldBegin('minStartTime', Thrift.Type.STRING, 2);
    output.writeString(this.minStartTime);
    output.writeFieldEnd();
  }
  if (this.maxStartTime !== null && this.maxStartTime !== undefined) {
    output.writeFieldBegin('maxStartTime', Thrift.Type.STRING, 3);
    output.writeString(this.maxStartTime);
    output.writeFieldEnd();
  }
  if (this.minEndTime !== null && this.minEndTime !== undefined) {
    output.writeFieldBegin('minEndTime', Thrift.Type.STRING, 4);
    output.writeString(this.minEndTime);
    output.writeFieldEnd();
  }
  if (this.maxEndTime !== null && this.maxEndTime !== undefined) {
    output.writeFieldBegin('maxEndTime', Thrift.Type.STRING, 5);
    output.writeString(this.maxEndTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 6);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedPaperSendQueryParam = module.exports.RedPaperSendQueryParam = function(args) {
  this.mobile = null;
  this.sendMinStartTime = null;
  this.snedMaxStartTime = null;
  if (args) {
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.sendMinStartTime !== undefined) {
      this.sendMinStartTime = args.sendMinStartTime;
    }
    if (args.snedMaxStartTime !== undefined) {
      this.snedMaxStartTime = args.snedMaxStartTime;
    }
  }
};
RedPaperSendQueryParam.prototype = {};
RedPaperSendQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sendMinStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snedMaxStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedPaperSendQueryParam.prototype.write = function(output) {
  output.writeStructBegin('RedPaperSendQueryParam');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.sendMinStartTime !== null && this.sendMinStartTime !== undefined) {
    output.writeFieldBegin('sendMinStartTime', Thrift.Type.STRING, 2);
    output.writeString(this.sendMinStartTime);
    output.writeFieldEnd();
  }
  if (this.snedMaxStartTime !== null && this.snedMaxStartTime !== undefined) {
    output.writeFieldBegin('snedMaxStartTime', Thrift.Type.STRING, 3);
    output.writeString(this.snedMaxStartTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result4Excel = module.exports.Result4Excel = function(args) {
  this.result = null;
  this.path = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
  }
};
Result4Excel.prototype = {};
Result4Excel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result4Excel.prototype.write = function(output) {
  output.writeStructBegin('Result4Excel');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GenerateParam = module.exports.GenerateParam = function(args) {
  this.activityId = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
  }
};
GenerateParam.prototype = {};
GenerateParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GenerateParam.prototype.write = function(output) {
  output.writeStructBegin('GenerateParam');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityStatisticParam = module.exports.ActivityStatisticParam = function(args) {
  this.channel = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
ActivityStatisticParam.prototype = {};
ActivityStatisticParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityStatisticParam.prototype.write = function(output) {
  output.writeStructBegin('ActivityStatisticParam');
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 1);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 2);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 3);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotParam = module.exports.ExprotParam = function(args) {
  this.channel = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
ExprotParam.prototype = {};
ExprotParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotParam');
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 1);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 2);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 3);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityStatistic = module.exports.ActivityStatistic = function(args) {
  this.createTime = null;
  this.pieceValue = null;
  this.sumTotalCount = null;
  this.channel = null;
  this.sumAmount = null;
  if (args) {
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.sumTotalCount !== undefined) {
      this.sumTotalCount = args.sumTotalCount;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.sumAmount !== undefined) {
      this.sumAmount = args.sumAmount;
    }
  }
};
ActivityStatistic.prototype = {};
ActivityStatistic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sumTotalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sumAmount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityStatistic.prototype.write = function(output) {
  output.writeStructBegin('ActivityStatistic');
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 1);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.STRING, 2);
    output.writeString(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.sumTotalCount !== null && this.sumTotalCount !== undefined) {
    output.writeFieldBegin('sumTotalCount', Thrift.Type.I32, 3);
    output.writeI32(this.sumTotalCount);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 4);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  if (this.sumAmount !== null && this.sumAmount !== undefined) {
    output.writeFieldBegin('sumAmount', Thrift.Type.I32, 5);
    output.writeI32(this.sumAmount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityStatisticResult = module.exports.ActivityStatisticResult = function(args) {
  this.result = null;
  this.activityStatisticList = null;
  this.pagination = null;
  this.sumScore = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activityStatisticList !== undefined) {
      this.activityStatisticList = args.activityStatisticList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.sumScore !== undefined) {
      this.sumScore = args.sumScore;
    }
  }
};
ActivityStatisticResult.prototype = {};
ActivityStatisticResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.activityStatisticList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ActivityStatistic();
          elem46.read(input);
          this.activityStatisticList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sumScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityStatisticResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityStatisticResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityStatisticList !== null && this.activityStatisticList !== undefined) {
    output.writeFieldBegin('activityStatisticList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityStatisticList.length);
    for (var iter47 in this.activityStatisticList)
    {
      if (this.activityStatisticList.hasOwnProperty(iter47))
      {
        iter47 = this.activityStatisticList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.sumScore !== null && this.sumScore !== undefined) {
    output.writeFieldBegin('sumScore', Thrift.Type.I32, 4);
    output.writeI32(this.sumScore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotResult = module.exports.ExprotResult = function(args) {
  this.path = null;
  this.result = null;
  if (args) {
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
ExprotResult.prototype = {};
ExprotResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotResult.prototype.write = function(output) {
  output.writeStructBegin('ExprotResult');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscountActiv = module.exports.DiscountActiv = function(args) {
  this.id = null;
  this.name = null;
  this.value = null;
  this.couponNum = null;
  this.giveOutNum = null;
  this.bindingNum = null;
  this.useNum = null;
  this.startTime = null;
  this.endTime = null;
  this.createTime = null;
  this.scope = null;
  this.scopeList = null;
  this.source = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.couponNum !== undefined) {
      this.couponNum = args.couponNum;
    }
    if (args.giveOutNum !== undefined) {
      this.giveOutNum = args.giveOutNum;
    }
    if (args.bindingNum !== undefined) {
      this.bindingNum = args.bindingNum;
    }
    if (args.useNum !== undefined) {
      this.useNum = args.useNum;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.scopeList !== undefined) {
      this.scopeList = args.scopeList;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
DiscountActiv.prototype = {};
DiscountActiv.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.couponNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.giveOutNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.bindingNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.useNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.scopeList = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscountActiv.prototype.write = function(output) {
  output.writeStructBegin('DiscountActiv');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 3);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.couponNum !== null && this.couponNum !== undefined) {
    output.writeFieldBegin('couponNum', Thrift.Type.I32, 4);
    output.writeI32(this.couponNum);
    output.writeFieldEnd();
  }
  if (this.giveOutNum !== null && this.giveOutNum !== undefined) {
    output.writeFieldBegin('giveOutNum', Thrift.Type.I32, 5);
    output.writeI32(this.giveOutNum);
    output.writeFieldEnd();
  }
  if (this.bindingNum !== null && this.bindingNum !== undefined) {
    output.writeFieldBegin('bindingNum', Thrift.Type.I32, 6);
    output.writeI32(this.bindingNum);
    output.writeFieldEnd();
  }
  if (this.useNum !== null && this.useNum !== undefined) {
    output.writeFieldBegin('useNum', Thrift.Type.I32, 7);
    output.writeI32(this.useNum);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 8);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 9);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 10);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 11);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.scopeList !== null && this.scopeList !== undefined) {
    output.writeFieldBegin('scopeList', Thrift.Type.STRING, 12);
    output.writeString(this.scopeList);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 13);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscountCoupon = module.exports.DiscountCoupon = function(args) {
  this.id = null;
  this.giveOutPhone = null;
  this.bindingPhone = null;
  this.state = null;
  this.value = null;
  this.startTime = null;
  this.endTime = null;
  this.giveOutTime = null;
  this.bindingTime = null;
  this.useTime = null;
  this.activId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.giveOutPhone !== undefined) {
      this.giveOutPhone = args.giveOutPhone;
    }
    if (args.bindingPhone !== undefined) {
      this.bindingPhone = args.bindingPhone;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.giveOutTime !== undefined) {
      this.giveOutTime = args.giveOutTime;
    }
    if (args.bindingTime !== undefined) {
      this.bindingTime = args.bindingTime;
    }
    if (args.useTime !== undefined) {
      this.useTime = args.useTime;
    }
    if (args.activId !== undefined) {
      this.activId = args.activId;
    }
  }
};
DiscountCoupon.prototype = {};
DiscountCoupon.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.giveOutPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bindingPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.giveOutTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.bindingTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.useTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.activId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscountCoupon.prototype.write = function(output) {
  output.writeStructBegin('DiscountCoupon');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.giveOutPhone !== null && this.giveOutPhone !== undefined) {
    output.writeFieldBegin('giveOutPhone', Thrift.Type.STRING, 2);
    output.writeString(this.giveOutPhone);
    output.writeFieldEnd();
  }
  if (this.bindingPhone !== null && this.bindingPhone !== undefined) {
    output.writeFieldBegin('bindingPhone', Thrift.Type.STRING, 3);
    output.writeString(this.bindingPhone);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 5);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 6);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 7);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.giveOutTime !== null && this.giveOutTime !== undefined) {
    output.writeFieldBegin('giveOutTime', Thrift.Type.STRING, 8);
    output.writeString(this.giveOutTime);
    output.writeFieldEnd();
  }
  if (this.bindingTime !== null && this.bindingTime !== undefined) {
    output.writeFieldBegin('bindingTime', Thrift.Type.STRING, 9);
    output.writeString(this.bindingTime);
    output.writeFieldEnd();
  }
  if (this.useTime !== null && this.useTime !== undefined) {
    output.writeFieldBegin('useTime', Thrift.Type.STRING, 10);
    output.writeString(this.useTime);
    output.writeFieldEnd();
  }
  if (this.activId !== null && this.activId !== undefined) {
    output.writeFieldBegin('activId', Thrift.Type.I32, 11);
    output.writeI32(this.activId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponListResult = module.exports.CouponListResult = function(args) {
  this.result = null;
  this.unusedList = null;
  this.useList = null;
  this.outList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.unusedList !== undefined) {
      this.unusedList = args.unusedList;
    }
    if (args.useList !== undefined) {
      this.useList = args.useList;
    }
    if (args.outList !== undefined) {
      this.outList = args.outList;
    }
  }
};
CouponListResult.prototype = {};
CouponListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.unusedList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.DiscountCoupon();
          elem54.read(input);
          this.unusedList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.useList = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = new ttypes.DiscountCoupon();
          elem61.read(input);
          this.useList.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.outList = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new ttypes.DiscountCoupon();
          elem68.read(input);
          this.outList.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponListResult.prototype.write = function(output) {
  output.writeStructBegin('CouponListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.unusedList !== null && this.unusedList !== undefined) {
    output.writeFieldBegin('unusedList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.unusedList.length);
    for (var iter69 in this.unusedList)
    {
      if (this.unusedList.hasOwnProperty(iter69))
      {
        iter69 = this.unusedList[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.useList !== null && this.useList !== undefined) {
    output.writeFieldBegin('useList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.useList.length);
    for (var iter70 in this.useList)
    {
      if (this.useList.hasOwnProperty(iter70))
      {
        iter70 = this.useList[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outList !== null && this.outList !== undefined) {
    output.writeFieldBegin('outList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.outList.length);
    for (var iter71 in this.outList)
    {
      if (this.outList.hasOwnProperty(iter71))
      {
        iter71 = this.outList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscountActivListResult = module.exports.DiscountActivListResult = function(args) {
  this.result = null;
  this.activList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activList !== undefined) {
      this.activList = args.activList;
    }
  }
};
DiscountActivListResult.prototype = {};
DiscountActivListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.activList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.DiscountActiv();
          elem78.read(input);
          this.activList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscountActivListResult.prototype.write = function(output) {
  output.writeStructBegin('DiscountActivListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activList !== null && this.activList !== undefined) {
    output.writeFieldBegin('activList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activList.length);
    for (var iter79 in this.activList)
    {
      if (this.activList.hasOwnProperty(iter79))
      {
        iter79 = this.activList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminCouponListResult = module.exports.AdminCouponListResult = function(args) {
  this.result = null;
  this.activ = null;
  this.couponList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activ !== undefined) {
      this.activ = args.activ;
    }
    if (args.couponList !== undefined) {
      this.couponList = args.couponList;
    }
  }
};
AdminCouponListResult.prototype = {};
AdminCouponListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.activ = new ttypes.DiscountActiv();
        this.activ.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.couponList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.DiscountCoupon();
          elem86.read(input);
          this.couponList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminCouponListResult.prototype.write = function(output) {
  output.writeStructBegin('AdminCouponListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activ !== null && this.activ !== undefined) {
    output.writeFieldBegin('activ', Thrift.Type.STRUCT, 2);
    this.activ.write(output);
    output.writeFieldEnd();
  }
  if (this.couponList !== null && this.couponList !== undefined) {
    output.writeFieldBegin('couponList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.couponList.length);
    for (var iter87 in this.couponList)
    {
      if (this.couponList.hasOwnProperty(iter87))
      {
        iter87 = this.couponList[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivDetailResult = module.exports.ActivDetailResult = function(args) {
  this.result = null;
  this.activ = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activ !== undefined) {
      this.activ = args.activ;
    }
  }
};
ActivDetailResult.prototype = {};
ActivDetailResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.activ = new ttypes.DiscountActiv();
        this.activ.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivDetailResult.prototype.write = function(output) {
  output.writeStructBegin('ActivDetailResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activ !== null && this.activ !== undefined) {
    output.writeFieldBegin('activ', Thrift.Type.STRUCT, 2);
    this.activ.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

