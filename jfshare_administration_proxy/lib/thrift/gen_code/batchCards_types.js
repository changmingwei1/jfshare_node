//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
BatchActivity = module.exports.BatchActivity = function(args) {
  this.id = null;
  this.name = null;
  this.pieceValue = null;
  this.totalCount = null;
  this.rechargeType = null;
  this.createTime = null;
  this.startTime = null;
  this.endTime = null;
  this.curStatus = null;
  this.password = null;
  this.multiRechargeEnable = null;
  this.UsedCount = null;
  this.SendCount = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.multiRechargeEnable !== undefined) {
      this.multiRechargeEnable = args.multiRechargeEnable;
    }
    if (args.UsedCount !== undefined) {
      this.UsedCount = args.UsedCount;
    }
    if (args.SendCount !== undefined) {
      this.SendCount = args.SendCount;
    }
  }
};
BatchActivity.prototype = {};
BatchActivity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.multiRechargeEnable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.UsedCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.SendCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchActivity.prototype.write = function(output) {
  output.writeStructBegin('BatchActivity');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.STRING, 3);
    output.writeString(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 4);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 7);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 8);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 9);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 10);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.multiRechargeEnable !== null && this.multiRechargeEnable !== undefined) {
    output.writeFieldBegin('multiRechargeEnable', Thrift.Type.STRING, 11);
    output.writeString(this.multiRechargeEnable);
    output.writeFieldEnd();
  }
  if (this.UsedCount !== null && this.UsedCount !== undefined) {
    output.writeFieldBegin('UsedCount', Thrift.Type.I32, 12);
    output.writeI32(this.UsedCount);
    output.writeFieldEnd();
  }
  if (this.SendCount !== null && this.SendCount !== undefined) {
    output.writeFieldBegin('SendCount', Thrift.Type.I32, 13);
    output.writeI32(this.SendCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchCardRecord = module.exports.BatchCardRecord = function(args) {
  this.id = null;
  this.activityId = null;
  this.cardName = null;
  this.cardPsd = null;
  this.sendStatus = null;
  this.rechargeStatus = null;
  this.rechargeAccount = null;
  this.rechargeTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.cardPsd !== undefined) {
      this.cardPsd = args.cardPsd;
    }
    if (args.sendStatus !== undefined) {
      this.sendStatus = args.sendStatus;
    }
    if (args.rechargeStatus !== undefined) {
      this.rechargeStatus = args.rechargeStatus;
    }
    if (args.rechargeAccount !== undefined) {
      this.rechargeAccount = args.rechargeAccount;
    }
    if (args.rechargeTime !== undefined) {
      this.rechargeTime = args.rechargeTime;
    }
  }
};
BatchCardRecord.prototype = {};
BatchCardRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cardPsd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sendStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchCardRecord.prototype.write = function(output) {
  output.writeStructBegin('BatchCardRecord');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 2);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 3);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.cardPsd !== null && this.cardPsd !== undefined) {
    output.writeFieldBegin('cardPsd', Thrift.Type.STRING, 4);
    output.writeString(this.cardPsd);
    output.writeFieldEnd();
  }
  if (this.sendStatus !== null && this.sendStatus !== undefined) {
    output.writeFieldBegin('sendStatus', Thrift.Type.STRING, 5);
    output.writeString(this.sendStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeStatus !== null && this.rechargeStatus !== undefined) {
    output.writeFieldBegin('rechargeStatus', Thrift.Type.STRING, 6);
    output.writeString(this.rechargeStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeAccount !== null && this.rechargeAccount !== undefined) {
    output.writeFieldBegin('rechargeAccount', Thrift.Type.STRING, 7);
    output.writeString(this.rechargeAccount);
    output.writeFieldEnd();
  }
  if (this.rechargeTime !== null && this.rechargeTime !== undefined) {
    output.writeFieldBegin('rechargeTime', Thrift.Type.STRING, 8);
    output.writeString(this.rechargeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRechargeCardRecord = module.exports.BatchRechargeCardRecord = function(args) {
  this.id = null;
  this.activityId = null;
  this.cardId = null;
  this.pieceValue = null;
  this.rechargeType = null;
  this.userId = null;
  this.rechargeTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.cardId !== undefined) {
      this.cardId = args.cardId;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.rechargeTime !== undefined) {
      this.rechargeTime = args.rechargeTime;
    }
  }
};
BatchRechargeCardRecord.prototype = {};
BatchRechargeCardRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cardId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pieceValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRechargeCardRecord.prototype.write = function(output) {
  output.writeStructBegin('BatchRechargeCardRecord');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 2);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.I32, 3);
    output.writeI32(this.cardId);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.I32, 4);
    output.writeI32(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 6);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.rechargeTime !== null && this.rechargeTime !== undefined) {
    output.writeFieldBegin('rechargeTime', Thrift.Type.STRING, 7);
    output.writeString(this.rechargeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityQueryParam = module.exports.ActivityQueryParam = function(args) {
  this.name = null;
  this.minPieceValue = null;
  this.maxPieceValue = null;
  this.minStartTime = null;
  this.maxStartTime = null;
  this.minEndTime = null;
  this.maxEndTime = null;
  this.curStatus = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.minPieceValue !== undefined) {
      this.minPieceValue = args.minPieceValue;
    }
    if (args.maxPieceValue !== undefined) {
      this.maxPieceValue = args.maxPieceValue;
    }
    if (args.minStartTime !== undefined) {
      this.minStartTime = args.minStartTime;
    }
    if (args.maxStartTime !== undefined) {
      this.maxStartTime = args.maxStartTime;
    }
    if (args.minEndTime !== undefined) {
      this.minEndTime = args.minEndTime;
    }
    if (args.maxEndTime !== undefined) {
      this.maxEndTime = args.maxEndTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
  }
};
ActivityQueryParam.prototype = {};
ActivityQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.minPieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.maxPieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.minStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.maxStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.minEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.maxEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ActivityQueryParam');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.minPieceValue !== null && this.minPieceValue !== undefined) {
    output.writeFieldBegin('minPieceValue', Thrift.Type.STRING, 2);
    output.writeString(this.minPieceValue);
    output.writeFieldEnd();
  }
  if (this.maxPieceValue !== null && this.maxPieceValue !== undefined) {
    output.writeFieldBegin('maxPieceValue', Thrift.Type.STRING, 3);
    output.writeString(this.maxPieceValue);
    output.writeFieldEnd();
  }
  if (this.minStartTime !== null && this.minStartTime !== undefined) {
    output.writeFieldBegin('minStartTime', Thrift.Type.STRING, 4);
    output.writeString(this.minStartTime);
    output.writeFieldEnd();
  }
  if (this.maxStartTime !== null && this.maxStartTime !== undefined) {
    output.writeFieldBegin('maxStartTime', Thrift.Type.STRING, 5);
    output.writeString(this.maxStartTime);
    output.writeFieldEnd();
  }
  if (this.minEndTime !== null && this.minEndTime !== undefined) {
    output.writeFieldBegin('minEndTime', Thrift.Type.STRING, 6);
    output.writeString(this.minEndTime);
    output.writeFieldEnd();
  }
  if (this.maxEndTime !== null && this.maxEndTime !== undefined) {
    output.writeFieldBegin('maxEndTime', Thrift.Type.STRING, 7);
    output.writeString(this.maxEndTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 8);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityResult = module.exports.ActivityResult = function(args) {
  this.result = null;
  this.activity = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activity !== undefined) {
      this.activity = args.activity;
    }
  }
};
ActivityResult.prototype = {};
ActivityResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.BatchActivity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 2);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityBatchResult = module.exports.ActivityBatchResult = function(args) {
  this.result = null;
  this.activityList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.activityList !== undefined) {
      this.activityList = args.activityList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ActivityBatchResult.prototype = {};
ActivityBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.activityList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.BatchActivity();
          elem6.read(input);
          this.activityList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityBatchResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter7 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter7))
      {
        iter7 = this.activityList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardQueryParam = module.exports.CardQueryParam = function(args) {
  this.cardName = null;
  this.cardPsd = null;
  this.sendStatus = null;
  this.rechargeStatus = null;
  this.rechargeAccount = null;
  if (args) {
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.cardPsd !== undefined) {
      this.cardPsd = args.cardPsd;
    }
    if (args.sendStatus !== undefined) {
      this.sendStatus = args.sendStatus;
    }
    if (args.rechargeStatus !== undefined) {
      this.rechargeStatus = args.rechargeStatus;
    }
    if (args.rechargeAccount !== undefined) {
      this.rechargeAccount = args.rechargeAccount;
    }
  }
};
CardQueryParam.prototype = {};
CardQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardPsd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardQueryParam.prototype.write = function(output) {
  output.writeStructBegin('CardQueryParam');
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 1);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.cardPsd !== null && this.cardPsd !== undefined) {
    output.writeFieldBegin('cardPsd', Thrift.Type.STRING, 2);
    output.writeString(this.cardPsd);
    output.writeFieldEnd();
  }
  if (this.sendStatus !== null && this.sendStatus !== undefined) {
    output.writeFieldBegin('sendStatus', Thrift.Type.STRING, 3);
    output.writeString(this.sendStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeStatus !== null && this.rechargeStatus !== undefined) {
    output.writeFieldBegin('rechargeStatus', Thrift.Type.STRING, 4);
    output.writeString(this.rechargeStatus);
    output.writeFieldEnd();
  }
  if (this.rechargeAccount !== null && this.rechargeAccount !== undefined) {
    output.writeFieldBegin('rechargeAccount', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeAccount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardResult = module.exports.CardResult = function(args) {
  this.result = null;
  this.card = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.card !== undefined) {
      this.card = args.card;
    }
  }
};
CardResult.prototype = {};
CardResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.card = new ttypes.BatchCardRecord();
        this.card.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardResult.prototype.write = function(output) {
  output.writeStructBegin('CardResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.card !== null && this.card !== undefined) {
    output.writeFieldBegin('card', Thrift.Type.STRUCT, 2);
    this.card.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardBatchResult = module.exports.CardBatchResult = function(args) {
  this.result = null;
  this.cardList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cardList !== undefined) {
      this.cardList = args.cardList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CardBatchResult.prototype = {};
CardBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.cardList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.BatchCardRecord();
          elem14.read(input);
          this.cardList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardBatchResult.prototype.write = function(output) {
  output.writeStructBegin('CardBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardList !== null && this.cardList !== undefined) {
    output.writeFieldBegin('cardList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardList.length);
    for (var iter15 in this.cardList)
    {
      if (this.cardList.hasOwnProperty(iter15))
      {
        iter15 = this.cardList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardRechargeCardParam = module.exports.CardRechargeCardParam = function(args) {
  this.cardId = null;
  this.pieceValue = null;
  this.rechargeType = null;
  this.userId = null;
  this.rechargeTime = null;
  if (args) {
    if (args.cardId !== undefined) {
      this.cardId = args.cardId;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.rechargeTime !== undefined) {
      this.rechargeTime = args.rechargeTime;
    }
  }
};
CardRechargeCardParam.prototype = {};
CardRechargeCardParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cardId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pieceValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardRechargeCardParam.prototype.write = function(output) {
  output.writeStructBegin('CardRechargeCardParam');
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.I32, 1);
    output.writeI32(this.cardId);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.I32, 2);
    output.writeI32(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 3);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 4);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.rechargeTime !== null && this.rechargeTime !== undefined) {
    output.writeFieldBegin('rechargeTime', Thrift.Type.STRING, 5);
    output.writeString(this.rechargeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardRecordResult = module.exports.CardRecordResult = function(args) {
  this.result = null;
  this.rechargeCardRecord = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.rechargeCardRecord !== undefined) {
      this.rechargeCardRecord = args.rechargeCardRecord;
    }
  }
};
CardRecordResult.prototype = {};
CardRecordResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rechargeCardRecord = new ttypes.BatchRechargeCardRecord();
        this.rechargeCardRecord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardRecordResult.prototype.write = function(output) {
  output.writeStructBegin('CardRecordResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.rechargeCardRecord !== null && this.rechargeCardRecord !== undefined) {
    output.writeFieldBegin('rechargeCardRecord', Thrift.Type.STRUCT, 2);
    this.rechargeCardRecord.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardRecordBatchResult = module.exports.CardRecordBatchResult = function(args) {
  this.result = null;
  this.rechargeCardRecordList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.rechargeCardRecordList !== undefined) {
      this.rechargeCardRecordList = args.rechargeCardRecordList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CardRecordBatchResult.prototype = {};
CardRecordBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.rechargeCardRecordList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.BatchRechargeCardRecord();
          elem22.read(input);
          this.rechargeCardRecordList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardRecordBatchResult.prototype.write = function(output) {
  output.writeStructBegin('CardRecordBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.rechargeCardRecordList !== null && this.rechargeCardRecordList !== undefined) {
    output.writeFieldBegin('rechargeCardRecordList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rechargeCardRecordList.length);
    for (var iter23 in this.rechargeCardRecordList)
    {
      if (this.rechargeCardRecordList.hasOwnProperty(iter23))
      {
        iter23 = this.rechargeCardRecordList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExcelExportResult = module.exports.ExcelExportResult = function(args) {
  this.result = null;
  this.path = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
  }
};
ExcelExportResult.prototype = {};
ExcelExportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExcelExportResult.prototype.write = function(output) {
  output.writeStructBegin('ExcelExportResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityBean = module.exports.ActivityBean = function(args) {
  this.name = null;
  this.pieceValue = null;
  this.totalCount = null;
  this.rechargeType = null;
  this.startTime = null;
  this.endTime = null;
  this.curStatus = null;
  this.password = null;
  this.multiRechargeEnable = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.pieceValue !== undefined) {
      this.pieceValue = args.pieceValue;
    }
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.rechargeType !== undefined) {
      this.rechargeType = args.rechargeType;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.curStatus !== undefined) {
      this.curStatus = args.curStatus;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.multiRechargeEnable !== undefined) {
      this.multiRechargeEnable = args.multiRechargeEnable;
    }
  }
};
ActivityBean.prototype = {};
ActivityBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pieceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rechargeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.curStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.multiRechargeEnable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityBean.prototype.write = function(output) {
  output.writeStructBegin('ActivityBean');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pieceValue !== null && this.pieceValue !== undefined) {
    output.writeFieldBegin('pieceValue', Thrift.Type.STRING, 2);
    output.writeString(this.pieceValue);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.rechargeType !== null && this.rechargeType !== undefined) {
    output.writeFieldBegin('rechargeType', Thrift.Type.STRING, 4);
    output.writeString(this.rechargeType);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 5);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 6);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.curStatus !== null && this.curStatus !== undefined) {
    output.writeFieldBegin('curStatus', Thrift.Type.STRING, 7);
    output.writeString(this.curStatus);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 8);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.multiRechargeEnable !== null && this.multiRechargeEnable !== undefined) {
    output.writeFieldBegin('multiRechargeEnable', Thrift.Type.STRING, 9);
    output.writeString(this.multiRechargeEnable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RechargeParam = module.exports.RechargeParam = function(args) {
  this.cardName = null;
  this.cardPsd = null;
  this.userId = null;
  if (args) {
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.cardPsd !== undefined) {
      this.cardPsd = args.cardPsd;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
RechargeParam.prototype = {};
RechargeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardPsd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RechargeParam.prototype.write = function(output) {
  output.writeStructBegin('RechargeParam');
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 1);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.cardPsd !== null && this.cardPsd !== undefined) {
    output.writeFieldBegin('cardPsd', Thrift.Type.STRING, 2);
    output.writeString(this.cardPsd);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DirectRechargeResult = module.exports.DirectRechargeResult = function(args) {
  this.result = null;
  this.sucessNum = null;
  this.failedNum = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.sucessNum !== undefined) {
      this.sucessNum = args.sucessNum;
    }
    if (args.failedNum !== undefined) {
      this.failedNum = args.failedNum;
    }
  }
};
DirectRechargeResult.prototype = {};
DirectRechargeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sucessNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.failedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectRechargeResult.prototype.write = function(output) {
  output.writeStructBegin('DirectRechargeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.sucessNum !== null && this.sucessNum !== undefined) {
    output.writeFieldBegin('sucessNum', Thrift.Type.I32, 2);
    output.writeI32(this.sucessNum);
    output.writeFieldEnd();
  }
  if (this.failedNum !== null && this.failedNum !== undefined) {
    output.writeFieldBegin('failedNum', Thrift.Type.I32, 3);
    output.writeI32(this.failedNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ToRechargeParams = module.exports.ToRechargeParams = function(args) {
  this.validataStr = null;
  this.filePath = null;
  this.activityId = null;
  if (args) {
    if (args.validataStr !== undefined) {
      this.validataStr = args.validataStr;
    }
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    }
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
  }
};
ToRechargeParams.prototype = {};
ToRechargeParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.validataStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToRechargeParams.prototype.write = function(output) {
  output.writeStructBegin('ToRechargeParams');
  if (this.validataStr !== null && this.validataStr !== undefined) {
    output.writeFieldBegin('validataStr', Thrift.Type.STRING, 1);
    output.writeString(this.validataStr);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 2);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 3);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

