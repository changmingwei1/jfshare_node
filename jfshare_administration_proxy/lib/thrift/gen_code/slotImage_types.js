//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
SlotImage = module.exports.SlotImage = function(args) {
  this.id = null;
  this.imgKey = null;
  this.width = null;
  this.height = null;
  this.jump = null;
  this.type = null;
  this.lastUpdateTime = null;
  this.createTime = null;
  this.isDelete = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.imgKey !== undefined) {
      this.imgKey = args.imgKey;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.jump !== undefined) {
      this.jump = args.jump;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.isDelete !== undefined) {
      this.isDelete = args.isDelete;
    }
  }
};
SlotImage.prototype = {};
SlotImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.jump = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.isDelete = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlotImage.prototype.write = function(output) {
  output.writeStructBegin('SlotImage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 2);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 3);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 4);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.jump !== null && this.jump !== undefined) {
    output.writeFieldBegin('jump', Thrift.Type.STRING, 5);
    output.writeString(this.jump);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 7);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 8);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.isDelete !== null && this.isDelete !== undefined) {
    output.writeFieldBegin('isDelete', Thrift.Type.I32, 9);
    output.writeI32(this.isDelete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuerySlotImageParam = module.exports.QuerySlotImageParam = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
QuerySlotImageParam.prototype = {};
QuerySlotImageParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuerySlotImageParam.prototype.write = function(output) {
  output.writeStructBegin('QuerySlotImageParam');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuerySlotImageResult = module.exports.QuerySlotImageResult = function(args) {
  this.result = null;
  this.slotImageList = null;
  this.slotImage = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.slotImageList !== undefined) {
      this.slotImageList = args.slotImageList;
    }
    if (args.slotImage !== undefined) {
      this.slotImage = args.slotImage;
    }
  }
};
QuerySlotImageResult.prototype = {};
QuerySlotImageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.slotImageList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.SlotImage();
          elem6.read(input);
          this.slotImageList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new ttypes.SlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuerySlotImageResult.prototype.write = function(output) {
  output.writeStructBegin('QuerySlotImageResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.slotImageList !== null && this.slotImageList !== undefined) {
    output.writeFieldBegin('slotImageList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.slotImageList.length);
    for (var iter7 in this.slotImageList)
    {
      if (this.slotImageList.hasOwnProperty(iter7))
      {
        iter7 = this.slotImageList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 3);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

