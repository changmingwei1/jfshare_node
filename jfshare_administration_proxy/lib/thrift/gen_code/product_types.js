//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
ProductSkuItem = module.exports.ProductSkuItem = function(args) {
  this.sellerClassNum = null;
  this.shelf = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.vPicture = null;
  this.skuName = null;
  this.weight = null;
  this.refPrice = null;
  this.storehouseId = null;
  this.skuNum = null;
  if (args) {
    if (args.sellerClassNum !== undefined) {
      this.sellerClassNum = args.sellerClassNum;
    }
    if (args.shelf !== undefined) {
      this.shelf = args.shelf;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined) {
      this.orgPrice = args.orgPrice;
    }
    if (args.vPicture !== undefined) {
      this.vPicture = args.vPicture;
    }
    if (args.skuName !== undefined) {
      this.skuName = args.skuName;
    }
    if (args.weight !== undefined) {
      this.weight = args.weight;
    }
    if (args.refPrice !== undefined) {
      this.refPrice = args.refPrice;
    }
    if (args.storehouseId !== undefined) {
      this.storehouseId = args.storehouseId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
  }
};
ProductSkuItem.prototype = {};
ProductSkuItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerClassNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shelf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.vPicture = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.skuName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.weight = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.refPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.storehouseId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuItem.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuItem');
  if (this.sellerClassNum !== null && this.sellerClassNum !== undefined) {
    output.writeFieldBegin('sellerClassNum', Thrift.Type.STRING, 1);
    output.writeString(this.sellerClassNum);
    output.writeFieldEnd();
  }
  if (this.shelf !== null && this.shelf !== undefined) {
    output.writeFieldBegin('shelf', Thrift.Type.STRING, 2);
    output.writeString(this.shelf);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 3);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 4);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.vPicture !== null && this.vPicture !== undefined) {
    output.writeFieldBegin('vPicture', Thrift.Type.STRING, 5);
    output.writeString(this.vPicture);
    output.writeFieldEnd();
  }
  if (this.skuName !== null && this.skuName !== undefined) {
    output.writeFieldBegin('skuName', Thrift.Type.STRING, 6);
    output.writeString(this.skuName);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.STRING, 7);
    output.writeString(this.weight);
    output.writeFieldEnd();
  }
  if (this.refPrice !== null && this.refPrice !== undefined) {
    output.writeFieldBegin('refPrice', Thrift.Type.STRING, 8);
    output.writeString(this.refPrice);
    output.writeFieldEnd();
  }
  if (this.storehouseId !== null && this.storehouseId !== undefined) {
    output.writeFieldBegin('storehouseId', Thrift.Type.I32, 9);
    output.writeI32(this.storehouseId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 10);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSku = module.exports.ProductSku = function(args) {
  this.skuItems = null;
  this.sellerClassNum = null;
  this.shelf = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.minCurPrice = null;
  this.maxCurPrice = null;
  this.minOrgPrice = null;
  this.maxOrgPrice = null;
  this.vPicture = null;
  this.skuName = null;
  this.skuNum = null;
  this.refPrice = null;
  if (args) {
    if (args.skuItems !== undefined) {
      this.skuItems = args.skuItems;
    }
    if (args.sellerClassNum !== undefined) {
      this.sellerClassNum = args.sellerClassNum;
    }
    if (args.shelf !== undefined) {
      this.shelf = args.shelf;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined) {
      this.orgPrice = args.orgPrice;
    }
    if (args.minCurPrice !== undefined) {
      this.minCurPrice = args.minCurPrice;
    }
    if (args.maxCurPrice !== undefined) {
      this.maxCurPrice = args.maxCurPrice;
    }
    if (args.minOrgPrice !== undefined) {
      this.minOrgPrice = args.minOrgPrice;
    }
    if (args.maxOrgPrice !== undefined) {
      this.maxOrgPrice = args.maxOrgPrice;
    }
    if (args.vPicture !== undefined) {
      this.vPicture = args.vPicture;
    }
    if (args.skuName !== undefined) {
      this.skuName = args.skuName;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.refPrice !== undefined) {
      this.refPrice = args.refPrice;
    }
  }
};
ProductSku.prototype = {};
ProductSku.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.skuItems = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ProductSkuItem();
          elem6.read(input);
          this.skuItems.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sellerClassNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shelf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.minCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.maxCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.minOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.maxOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.vPicture = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.skuName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.refPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSku.prototype.write = function(output) {
  output.writeStructBegin('ProductSku');
  if (this.skuItems !== null && this.skuItems !== undefined) {
    output.writeFieldBegin('skuItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.skuItems.length);
    for (var iter7 in this.skuItems)
    {
      if (this.skuItems.hasOwnProperty(iter7))
      {
        iter7 = this.skuItems[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sellerClassNum !== null && this.sellerClassNum !== undefined) {
    output.writeFieldBegin('sellerClassNum', Thrift.Type.STRING, 2);
    output.writeString(this.sellerClassNum);
    output.writeFieldEnd();
  }
  if (this.shelf !== null && this.shelf !== undefined) {
    output.writeFieldBegin('shelf', Thrift.Type.STRING, 3);
    output.writeString(this.shelf);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 4);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 5);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.minCurPrice !== null && this.minCurPrice !== undefined) {
    output.writeFieldBegin('minCurPrice', Thrift.Type.STRING, 6);
    output.writeString(this.minCurPrice);
    output.writeFieldEnd();
  }
  if (this.maxCurPrice !== null && this.maxCurPrice !== undefined) {
    output.writeFieldBegin('maxCurPrice', Thrift.Type.STRING, 7);
    output.writeString(this.maxCurPrice);
    output.writeFieldEnd();
  }
  if (this.minOrgPrice !== null && this.minOrgPrice !== undefined) {
    output.writeFieldBegin('minOrgPrice', Thrift.Type.STRING, 8);
    output.writeString(this.minOrgPrice);
    output.writeFieldEnd();
  }
  if (this.maxOrgPrice !== null && this.maxOrgPrice !== undefined) {
    output.writeFieldBegin('maxOrgPrice', Thrift.Type.STRING, 9);
    output.writeString(this.maxOrgPrice);
    output.writeFieldEnd();
  }
  if (this.vPicture !== null && this.vPicture !== undefined) {
    output.writeFieldBegin('vPicture', Thrift.Type.STRING, 10);
    output.writeString(this.vPicture);
    output.writeFieldEnd();
  }
  if (this.skuName !== null && this.skuName !== undefined) {
    output.writeFieldBegin('skuName', Thrift.Type.STRING, 11);
    output.writeString(this.skuName);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 12);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.refPrice !== null && this.refPrice !== undefined) {
    output.writeFieldBegin('refPrice', Thrift.Type.STRING, 13);
    output.writeString(this.refPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSkuResult = module.exports.ProductSkuResult = function(args) {
  this.result = null;
  this.productSku = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.productSku !== undefined) {
      this.productSku = args.productSku;
    }
  }
};
ProductSkuResult.prototype = {};
ProductSkuResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.productSku = new ttypes.ProductSku();
        this.productSku.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuResult.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.productSku !== null && this.productSku !== undefined) {
    output.writeFieldBegin('productSku', Thrift.Type.STRUCT, 2);
    this.productSku.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Product = module.exports.Product = function(args) {
  this.productId = null;
  this.sellerId = null;
  this.productName = null;
  this.viceName = null;
  this.subjectId = null;
  this.brandId = null;
  this.imgKey = ',,,,,';
  this.detailKey = null;
  this.maxBuyLimit = null;
  this.activeState = null;
  this.type = null;
  this.remark = null;
  this.createTime = null;
  this.createUserId = null;
  this.lastUpdateTime = null;
  this.lastUpdateId = null;
  this.skuTemplate = null;
  this.attribute = null;
  this.productSku = null;
  this.productUrl = null;
  this.tags = null;
  this.detailContent = null;
  this.productSnapshootId = null;
  this.storehouseIds = null;
  this.postageId = null;
  this.thirdExchangeRate = null;
  this.thirdPartyIdentify = null;
  this.thirdPartyProductId = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.viceName !== undefined) {
      this.viceName = args.viceName;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined) {
      this.brandId = args.brandId;
    }
    if (args.imgKey !== undefined) {
      this.imgKey = args.imgKey;
    }
    if (args.detailKey !== undefined) {
      this.detailKey = args.detailKey;
    }
    if (args.maxBuyLimit !== undefined) {
      this.maxBuyLimit = args.maxBuyLimit;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.remark !== undefined) {
      this.remark = args.remark;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.createUserId !== undefined) {
      this.createUserId = args.createUserId;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.lastUpdateId !== undefined) {
      this.lastUpdateId = args.lastUpdateId;
    }
    if (args.skuTemplate !== undefined) {
      this.skuTemplate = args.skuTemplate;
    }
    if (args.attribute !== undefined) {
      this.attribute = args.attribute;
    }
    if (args.productSku !== undefined) {
      this.productSku = args.productSku;
    }
    if (args.productUrl !== undefined) {
      this.productUrl = args.productUrl;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.detailContent !== undefined) {
      this.detailContent = args.detailContent;
    }
    if (args.productSnapshootId !== undefined) {
      this.productSnapshootId = args.productSnapshootId;
    }
    if (args.storehouseIds !== undefined) {
      this.storehouseIds = args.storehouseIds;
    }
    if (args.postageId !== undefined) {
      this.postageId = args.postageId;
    }
    if (args.thirdExchangeRate !== undefined) {
      this.thirdExchangeRate = args.thirdExchangeRate;
    }
    if (args.thirdPartyIdentify !== undefined) {
      this.thirdPartyIdentify = args.thirdPartyIdentify;
    }
    if (args.thirdPartyProductId !== undefined) {
      this.thirdPartyProductId = args.thirdPartyProductId;
    }
  }
};
Product.prototype = {};
Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.detailKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.maxBuyLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.createUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.skuTemplate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.productSku = new ttypes.ProductSku();
        this.productSku.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.productUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.tags = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.detailContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.productSnapshootId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.storehouseIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.postageId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.thirdExchangeRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I32) {
        this.thirdPartyIdentify = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPartyProductId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 2);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 3);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 4);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 5);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 6);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 7);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.detailKey !== null && this.detailKey !== undefined) {
    output.writeFieldBegin('detailKey', Thrift.Type.STRING, 8);
    output.writeString(this.detailKey);
    output.writeFieldEnd();
  }
  if (this.maxBuyLimit !== null && this.maxBuyLimit !== undefined) {
    output.writeFieldBegin('maxBuyLimit', Thrift.Type.I32, 9);
    output.writeI32(this.maxBuyLimit);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 10);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 11);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 12);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 13);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.createUserId !== null && this.createUserId !== undefined) {
    output.writeFieldBegin('createUserId', Thrift.Type.I32, 14);
    output.writeI32(this.createUserId);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 15);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateId !== null && this.lastUpdateId !== undefined) {
    output.writeFieldBegin('lastUpdateId', Thrift.Type.I32, 16);
    output.writeI32(this.lastUpdateId);
    output.writeFieldEnd();
  }
  if (this.skuTemplate !== null && this.skuTemplate !== undefined) {
    output.writeFieldBegin('skuTemplate', Thrift.Type.STRING, 17);
    output.writeString(this.skuTemplate);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 18);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.productSku !== null && this.productSku !== undefined) {
    output.writeFieldBegin('productSku', Thrift.Type.STRUCT, 19);
    this.productSku.write(output);
    output.writeFieldEnd();
  }
  if (this.productUrl !== null && this.productUrl !== undefined) {
    output.writeFieldBegin('productUrl', Thrift.Type.STRING, 20);
    output.writeString(this.productUrl);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.STRING, 21);
    output.writeString(this.tags);
    output.writeFieldEnd();
  }
  if (this.detailContent !== null && this.detailContent !== undefined) {
    output.writeFieldBegin('detailContent', Thrift.Type.STRING, 22);
    output.writeString(this.detailContent);
    output.writeFieldEnd();
  }
  if (this.productSnapshootId !== null && this.productSnapshootId !== undefined) {
    output.writeFieldBegin('productSnapshootId', Thrift.Type.STRING, 23);
    output.writeString(this.productSnapshootId);
    output.writeFieldEnd();
  }
  if (this.storehouseIds !== null && this.storehouseIds !== undefined) {
    output.writeFieldBegin('storehouseIds', Thrift.Type.STRING, 24);
    output.writeString(this.storehouseIds);
    output.writeFieldEnd();
  }
  if (this.postageId !== null && this.postageId !== undefined) {
    output.writeFieldBegin('postageId', Thrift.Type.I32, 25);
    output.writeI32(this.postageId);
    output.writeFieldEnd();
  }
  if (this.thirdExchangeRate !== null && this.thirdExchangeRate !== undefined) {
    output.writeFieldBegin('thirdExchangeRate', Thrift.Type.STRING, 26);
    output.writeString(this.thirdExchangeRate);
    output.writeFieldEnd();
  }
  if (this.thirdPartyIdentify !== null && this.thirdPartyIdentify !== undefined) {
    output.writeFieldBegin('thirdPartyIdentify', Thrift.Type.I32, 27);
    output.writeI32(this.thirdPartyIdentify);
    output.writeFieldEnd();
  }
  if (this.thirdPartyProductId !== null && this.thirdPartyProductId !== undefined) {
    output.writeFieldBegin('thirdPartyProductId', Thrift.Type.STRING, 28);
    output.writeString(this.thirdPartyProductId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductResult = module.exports.ProductResult = function(args) {
  this.result = null;
  this.product = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.product !== undefined) {
      this.product = args.product;
    }
  }
};
ProductResult.prototype = {};
ProductResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.Product();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductResult.prototype.write = function(output) {
  output.writeStructBegin('ProductResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 2);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductBatchResult = module.exports.ProductBatchResult = function(args) {
  this.result = null;
  this.productList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.productList !== undefined) {
      this.productList = args.productList;
    }
  }
};
ProductBatchResult.prototype = {};
ProductBatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.productList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Product();
          elem14.read(input);
          this.productList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductBatchResult.prototype.write = function(output) {
  output.writeStructBegin('ProductBatchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter15 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter15))
      {
        iter15 = this.productList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductDetailParam = module.exports.ProductDetailParam = function(args) {
  this.detailKey = null;
  this.productId = null;
  if (args) {
    if (args.detailKey !== undefined) {
      this.detailKey = args.detailKey;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
ProductDetailParam.prototype = {};
ProductDetailParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.detailKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductDetailParam.prototype.write = function(output) {
  output.writeStructBegin('ProductDetailParam');
  if (this.detailKey !== null && this.detailKey !== undefined) {
    output.writeFieldBegin('detailKey', Thrift.Type.STRING, 1);
    output.writeString(this.detailKey);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductRetParam = module.exports.ProductRetParam = function(args) {
  this.baseTag = null;
  this.skuTemplateTag = null;
  this.skuTag = null;
  this.attributeTag = null;
  if (args) {
    if (args.baseTag !== undefined) {
      this.baseTag = args.baseTag;
    }
    if (args.skuTemplateTag !== undefined) {
      this.skuTemplateTag = args.skuTemplateTag;
    }
    if (args.skuTag !== undefined) {
      this.skuTag = args.skuTag;
    }
    if (args.attributeTag !== undefined) {
      this.attributeTag = args.attributeTag;
    }
  }
};
ProductRetParam.prototype = {};
ProductRetParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.baseTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.skuTemplateTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.skuTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.attributeTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductRetParam.prototype.write = function(output) {
  output.writeStructBegin('ProductRetParam');
  if (this.baseTag !== null && this.baseTag !== undefined) {
    output.writeFieldBegin('baseTag', Thrift.Type.I32, 1);
    output.writeI32(this.baseTag);
    output.writeFieldEnd();
  }
  if (this.skuTemplateTag !== null && this.skuTemplateTag !== undefined) {
    output.writeFieldBegin('skuTemplateTag', Thrift.Type.I32, 2);
    output.writeI32(this.skuTemplateTag);
    output.writeFieldEnd();
  }
  if (this.skuTag !== null && this.skuTag !== undefined) {
    output.writeFieldBegin('skuTag', Thrift.Type.I32, 3);
    output.writeI32(this.skuTag);
    output.writeFieldEnd();
  }
  if (this.attributeTag !== null && this.attributeTag !== undefined) {
    output.writeFieldBegin('attributeTag', Thrift.Type.I32, 4);
    output.writeI32(this.attributeTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurvey = module.exports.ProductSurvey = function(args) {
  this.productId = null;
  this.productName = null;
  this.subjectId = null;
  this.brandId = null;
  this.minOrgPrice = null;
  this.minCurPrice = null;
  this.activeStock = null;
  this.totalSales = null;
  this.activeState = null;
  this.imgUrl = null;
  this.viceName = null;
  this.createTime = null;
  this.sellerId = null;
  this.type = null;
  this.clickRate = null;
  this.storehouseIds = null;
  this.postageId = null;
  this.maxOrgPrice = null;
  this.maxCurPrice = null;
  this.sellerName = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined) {
      this.brandId = args.brandId;
    }
    if (args.minOrgPrice !== undefined) {
      this.minOrgPrice = args.minOrgPrice;
    }
    if (args.minCurPrice !== undefined) {
      this.minCurPrice = args.minCurPrice;
    }
    if (args.activeStock !== undefined) {
      this.activeStock = args.activeStock;
    }
    if (args.totalSales !== undefined) {
      this.totalSales = args.totalSales;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.imgUrl !== undefined) {
      this.imgUrl = args.imgUrl;
    }
    if (args.viceName !== undefined) {
      this.viceName = args.viceName;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.clickRate !== undefined) {
      this.clickRate = args.clickRate;
    }
    if (args.storehouseIds !== undefined) {
      this.storehouseIds = args.storehouseIds;
    }
    if (args.postageId !== undefined) {
      this.postageId = args.postageId;
    }
    if (args.maxOrgPrice !== undefined) {
      this.maxOrgPrice = args.maxOrgPrice;
    }
    if (args.maxCurPrice !== undefined) {
      this.maxCurPrice = args.maxCurPrice;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
  }
};
ProductSurvey.prototype = {};
ProductSurvey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.minOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.minCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.activeStock = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.totalSales = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.imgUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.clickRate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.storehouseIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.postageId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.maxOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.maxCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurvey.prototype.write = function(output) {
  output.writeStructBegin('ProductSurvey');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 3);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 4);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.minOrgPrice !== null && this.minOrgPrice !== undefined) {
    output.writeFieldBegin('minOrgPrice', Thrift.Type.STRING, 5);
    output.writeString(this.minOrgPrice);
    output.writeFieldEnd();
  }
  if (this.minCurPrice !== null && this.minCurPrice !== undefined) {
    output.writeFieldBegin('minCurPrice', Thrift.Type.STRING, 6);
    output.writeString(this.minCurPrice);
    output.writeFieldEnd();
  }
  if (this.activeStock !== null && this.activeStock !== undefined) {
    output.writeFieldBegin('activeStock', Thrift.Type.I32, 7);
    output.writeI32(this.activeStock);
    output.writeFieldEnd();
  }
  if (this.totalSales !== null && this.totalSales !== undefined) {
    output.writeFieldBegin('totalSales', Thrift.Type.I32, 8);
    output.writeI32(this.totalSales);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 9);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.imgUrl !== null && this.imgUrl !== undefined) {
    output.writeFieldBegin('imgUrl', Thrift.Type.STRING, 10);
    output.writeString(this.imgUrl);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 11);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 12);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 13);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 14);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.clickRate !== null && this.clickRate !== undefined) {
    output.writeFieldBegin('clickRate', Thrift.Type.I64, 15);
    output.writeI64(this.clickRate);
    output.writeFieldEnd();
  }
  if (this.storehouseIds !== null && this.storehouseIds !== undefined) {
    output.writeFieldBegin('storehouseIds', Thrift.Type.STRING, 16);
    output.writeString(this.storehouseIds);
    output.writeFieldEnd();
  }
  if (this.postageId !== null && this.postageId !== undefined) {
    output.writeFieldBegin('postageId', Thrift.Type.I32, 17);
    output.writeI32(this.postageId);
    output.writeFieldEnd();
  }
  if (this.maxOrgPrice !== null && this.maxOrgPrice !== undefined) {
    output.writeFieldBegin('maxOrgPrice', Thrift.Type.STRING, 18);
    output.writeString(this.maxOrgPrice);
    output.writeFieldEnd();
  }
  if (this.maxCurPrice !== null && this.maxCurPrice !== undefined) {
    output.writeFieldBegin('maxCurPrice', Thrift.Type.STRING, 19);
    output.writeString(this.maxCurPrice);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 20);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSearch = module.exports.ProductSearch = function(args) {
  this.productId = null;
  this.productName = null;
  this.subjectId = null;
  this.brandId = null;
  this.maxOrgPrice = null;
  this.maxCurPrice = null;
  this.activeStock = null;
  this.totalSales = null;
  this.activeState = null;
  this.imgUrl = null;
  this.viceName = null;
  this.createTime = null;
  this.sellerId = null;
  this.type = null;
  this.clickRate = null;
  this.storehouseIds = null;
  this.postageId = null;
  this.minOrgPrice = null;
  this.minCurPrice = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined) {
      this.brandId = args.brandId;
    }
    if (args.maxOrgPrice !== undefined) {
      this.maxOrgPrice = args.maxOrgPrice;
    }
    if (args.maxCurPrice !== undefined) {
      this.maxCurPrice = args.maxCurPrice;
    }
    if (args.activeStock !== undefined) {
      this.activeStock = args.activeStock;
    }
    if (args.totalSales !== undefined) {
      this.totalSales = args.totalSales;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.imgUrl !== undefined) {
      this.imgUrl = args.imgUrl;
    }
    if (args.viceName !== undefined) {
      this.viceName = args.viceName;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.clickRate !== undefined) {
      this.clickRate = args.clickRate;
    }
    if (args.storehouseIds !== undefined) {
      this.storehouseIds = args.storehouseIds;
    }
    if (args.postageId !== undefined) {
      this.postageId = args.postageId;
    }
    if (args.minOrgPrice !== undefined) {
      this.minOrgPrice = args.minOrgPrice;
    }
    if (args.minCurPrice !== undefined) {
      this.minCurPrice = args.minCurPrice;
    }
  }
};
ProductSearch.prototype = {};
ProductSearch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.maxOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.maxCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.activeStock = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.totalSales = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.imgUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.clickRate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.storehouseIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.postageId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.minOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.minCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSearch.prototype.write = function(output) {
  output.writeStructBegin('ProductSearch');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 3);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 4);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.maxOrgPrice !== null && this.maxOrgPrice !== undefined) {
    output.writeFieldBegin('maxOrgPrice', Thrift.Type.STRING, 5);
    output.writeString(this.maxOrgPrice);
    output.writeFieldEnd();
  }
  if (this.maxCurPrice !== null && this.maxCurPrice !== undefined) {
    output.writeFieldBegin('maxCurPrice', Thrift.Type.STRING, 6);
    output.writeString(this.maxCurPrice);
    output.writeFieldEnd();
  }
  if (this.activeStock !== null && this.activeStock !== undefined) {
    output.writeFieldBegin('activeStock', Thrift.Type.I32, 7);
    output.writeI32(this.activeStock);
    output.writeFieldEnd();
  }
  if (this.totalSales !== null && this.totalSales !== undefined) {
    output.writeFieldBegin('totalSales', Thrift.Type.I32, 8);
    output.writeI32(this.totalSales);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 9);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.imgUrl !== null && this.imgUrl !== undefined) {
    output.writeFieldBegin('imgUrl', Thrift.Type.STRING, 10);
    output.writeString(this.imgUrl);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 11);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 12);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 13);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 14);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.clickRate !== null && this.clickRate !== undefined) {
    output.writeFieldBegin('clickRate', Thrift.Type.I64, 15);
    output.writeI64(this.clickRate);
    output.writeFieldEnd();
  }
  if (this.storehouseIds !== null && this.storehouseIds !== undefined) {
    output.writeFieldBegin('storehouseIds', Thrift.Type.STRING, 16);
    output.writeString(this.storehouseIds);
    output.writeFieldEnd();
  }
  if (this.postageId !== null && this.postageId !== undefined) {
    output.writeFieldBegin('postageId', Thrift.Type.I32, 17);
    output.writeI32(this.postageId);
    output.writeFieldEnd();
  }
  if (this.minOrgPrice !== null && this.minOrgPrice !== undefined) {
    output.writeFieldBegin('minOrgPrice', Thrift.Type.STRING, 18);
    output.writeString(this.minOrgPrice);
    output.writeFieldEnd();
  }
  if (this.minCurPrice !== null && this.minCurPrice !== undefined) {
    output.writeFieldBegin('minCurPrice', Thrift.Type.STRING, 19);
    output.writeString(this.minCurPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSearchParam = module.exports.ProductSearchParam = function(args) {
  this.type = null;
  this.keyword = null;
  this.pagination = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.keyword !== undefined) {
      this.keyword = args.keyword;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ProductSearchParam.prototype = {};
ProductSearchParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.keyword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSearchParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSearchParam');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.keyword !== null && this.keyword !== undefined) {
    output.writeFieldBegin('keyword', Thrift.Type.STRING, 2);
    output.writeString(this.keyword);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSearchResult = module.exports.ProductSearchResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.productSearchList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.productSearchList !== undefined) {
      this.productSearchList = args.productSearchList;
    }
  }
};
ProductSearchResult.prototype = {};
ProductSearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.productSearchList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ProductSearch();
          elem22.read(input);
          this.productSearchList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSearchResult.prototype.write = function(output) {
  output.writeStructBegin('ProductSearchResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.productSearchList !== null && this.productSearchList !== undefined) {
    output.writeFieldBegin('productSearchList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.productSearchList.length);
    for (var iter23 in this.productSearchList)
    {
      if (this.productSearchList.hasOwnProperty(iter23))
      {
        iter23 = this.productSearchList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurveyQueryParam = module.exports.ProductSurveyQueryParam = function(args) {
  this.sellerId = null;
  this.productId = null;
  this.productName = null;
  this.activeState = null;
  this.pagination = null;
  this.sort = null;
  this.subjectId = null;
  this.brandId = null;
  this.subjectIdList = null;
  this.productIdList = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.sort !== undefined) {
      this.sort = args.sort;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined) {
      this.brandId = args.brandId;
    }
    if (args.subjectIdList !== undefined) {
      this.subjectIdList = args.subjectIdList;
    }
    if (args.productIdList !== undefined) {
      this.productIdList = args.productIdList;
    }
  }
};
ProductSurveyQueryParam.prototype = {};
ProductSurveyQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sort = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.subjectIdList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.subjectIdList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.productIdList = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = input.readString();
          this.productIdList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurveyQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSurveyQueryParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 3);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 4);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 5);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.sort !== null && this.sort !== undefined) {
    output.writeFieldBegin('sort', Thrift.Type.STRING, 6);
    output.writeString(this.sort);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 7);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 8);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.subjectIdList !== null && this.subjectIdList !== undefined) {
    output.writeFieldBegin('subjectIdList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.I32, this.subjectIdList.length);
    for (var iter38 in this.subjectIdList)
    {
      if (this.subjectIdList.hasOwnProperty(iter38))
      {
        iter38 = this.subjectIdList[iter38];
        output.writeI32(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.productIdList !== null && this.productIdList !== undefined) {
    output.writeFieldBegin('productIdList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.productIdList.length);
    for (var iter39 in this.productIdList)
    {
      if (this.productIdList.hasOwnProperty(iter39))
      {
        iter39 = this.productIdList[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurveyQueryBatchParam = module.exports.ProductSurveyQueryBatchParam = function(args) {
  this.productIds = null;
  this.fromType = null;
  if (args) {
    if (args.productIds !== undefined) {
      this.productIds = args.productIds;
    }
    if (args.fromType !== undefined) {
      this.fromType = args.fromType;
    }
  }
};
ProductSurveyQueryBatchParam.prototype = {};
ProductSurveyQueryBatchParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.productIds = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.productIds.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fromType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurveyQueryBatchParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSurveyQueryBatchParam');
  if (this.productIds !== null && this.productIds !== undefined) {
    output.writeFieldBegin('productIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.productIds.length);
    for (var iter47 in this.productIds)
    {
      if (this.productIds.hasOwnProperty(iter47))
      {
        iter47 = this.productIds[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fromType !== null && this.fromType !== undefined) {
    output.writeFieldBegin('fromType', Thrift.Type.I32, 2);
    output.writeI32(this.fromType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSkuParam = module.exports.ProductSkuParam = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.storehouseId = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.storehouseId !== undefined) {
      this.storehouseId = args.storehouseId;
    }
  }
};
ProductSkuParam.prototype = {};
ProductSkuParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.storehouseId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuParam');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.storehouseId !== null && this.storehouseId !== undefined) {
    output.writeFieldBegin('storehouseId', Thrift.Type.I32, 3);
    output.writeI32(this.storehouseId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSkuBatchParam = module.exports.ProductSkuBatchParam = function(args) {
  this.productSkuParams = null;
  if (args) {
    if (args.productSkuParams !== undefined) {
      this.productSkuParams = args.productSkuParams;
    }
  }
};
ProductSkuBatchParam.prototype = {};
ProductSkuBatchParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.productSkuParams = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.ProductSkuParam();
          elem54.read(input);
          this.productSkuParams.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuBatchParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuBatchParam');
  if (this.productSkuParams !== null && this.productSkuParams !== undefined) {
    output.writeFieldBegin('productSkuParams', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.productSkuParams.length);
    for (var iter55 in this.productSkuParams)
    {
      if (this.productSkuParams.hasOwnProperty(iter55))
      {
        iter55 = this.productSkuParams[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurveyResult = module.exports.ProductSurveyResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.productSurveyList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.productSurveyList !== undefined) {
      this.productSurveyList = args.productSurveyList;
    }
  }
};
ProductSurveyResult.prototype = {};
ProductSurveyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.productSurveyList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.ProductSurvey();
          elem62.read(input);
          this.productSurveyList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurveyResult.prototype.write = function(output) {
  output.writeStructBegin('ProductSurveyResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.productSurveyList !== null && this.productSurveyList !== undefined) {
    output.writeFieldBegin('productSurveyList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.productSurveyList.length);
    for (var iter63 in this.productSurveyList)
    {
      if (this.productSurveyList.hasOwnProperty(iter63))
      {
        iter63 = this.productSurveyList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCard = module.exports.ProductCard = function(args) {
  this.sellerId = null;
  this.productId = null;
  this.cardNumber = null;
  this.password = null;
  this.skuNum = null;
  this.buyerId = null;
  this.checkTime = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.buyerId !== undefined) {
      this.buyerId = args.buyerId;
    }
    if (args.checkTime !== undefined) {
      this.checkTime = args.checkTime;
    }
  }
};
ProductCard.prototype = {};
ProductCard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.buyerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.checkTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCard.prototype.write = function(output) {
  output.writeStructBegin('ProductCard');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 3);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 5);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.buyerId !== null && this.buyerId !== undefined) {
    output.writeFieldBegin('buyerId', Thrift.Type.I32, 6);
    output.writeI32(this.buyerId);
    output.writeFieldEnd();
  }
  if (this.checkTime !== null && this.checkTime !== undefined) {
    output.writeFieldBegin('checkTime', Thrift.Type.STRING, 7);
    output.writeString(this.checkTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardView = module.exports.ProductCardView = function(args) {
  this.productId = null;
  this.cardNumber = null;
  this.password = null;
  this.state = null;
  this.skuNum = null;
  this.sendAccount = null;
  this.sendTime = null;
  this.validateTime = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.sendAccount !== undefined) {
      this.sendAccount = args.sendAccount;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.validateTime !== undefined) {
      this.validateTime = args.validateTime;
    }
  }
};
ProductCardView.prototype = {};
ProductCardView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sendAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.validateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardView.prototype.write = function(output) {
  output.writeStructBegin('ProductCardView');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 2);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 5);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.sendAccount !== null && this.sendAccount !== undefined) {
    output.writeFieldBegin('sendAccount', Thrift.Type.STRING, 6);
    output.writeString(this.sendAccount);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 7);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.validateTime !== null && this.validateTime !== undefined) {
    output.writeFieldBegin('validateTime', Thrift.Type.STRING, 8);
    output.writeString(this.validateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardViewParam = module.exports.ProductCardViewParam = function(args) {
  this.sellerId = null;
  this.productId = null;
  this.cardNumber = null;
  this.state = null;
  this.skuNum = null;
  this.sendBeginTime = null;
  this.sendEndTime = null;
  this.validateBeginTime = null;
  this.validateEndTime = null;
  this.sendAccount = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.sendBeginTime !== undefined) {
      this.sendBeginTime = args.sendBeginTime;
    }
    if (args.sendEndTime !== undefined) {
      this.sendEndTime = args.sendEndTime;
    }
    if (args.validateBeginTime !== undefined) {
      this.validateBeginTime = args.validateBeginTime;
    }
    if (args.validateEndTime !== undefined) {
      this.validateEndTime = args.validateEndTime;
    }
    if (args.sendAccount !== undefined) {
      this.sendAccount = args.sendAccount;
    }
  }
};
ProductCardViewParam.prototype = {};
ProductCardViewParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sendBeginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sendEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.validateBeginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.validateEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.sendAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardViewParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardViewParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 3);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 5);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.sendBeginTime !== null && this.sendBeginTime !== undefined) {
    output.writeFieldBegin('sendBeginTime', Thrift.Type.STRING, 6);
    output.writeString(this.sendBeginTime);
    output.writeFieldEnd();
  }
  if (this.sendEndTime !== null && this.sendEndTime !== undefined) {
    output.writeFieldBegin('sendEndTime', Thrift.Type.STRING, 7);
    output.writeString(this.sendEndTime);
    output.writeFieldEnd();
  }
  if (this.validateBeginTime !== null && this.validateBeginTime !== undefined) {
    output.writeFieldBegin('validateBeginTime', Thrift.Type.STRING, 8);
    output.writeString(this.validateBeginTime);
    output.writeFieldEnd();
  }
  if (this.validateEndTime !== null && this.validateEndTime !== undefined) {
    output.writeFieldBegin('validateEndTime', Thrift.Type.STRING, 9);
    output.writeString(this.validateEndTime);
    output.writeFieldEnd();
  }
  if (this.sendAccount !== null && this.sendAccount !== undefined) {
    output.writeFieldBegin('sendAccount', Thrift.Type.STRING, 10);
    output.writeString(this.sendAccount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardStatistics = module.exports.ProductCardStatistics = function(args) {
  this.productId = null;
  this.productName = null;
  this.total = null;
  this.usedNum = null;
  this.unusedNum = null;
  this.createTime = null;
  this.skuNum = null;
  this.sendNum = null;
  this.checkedNum = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.usedNum !== undefined) {
      this.usedNum = args.usedNum;
    }
    if (args.unusedNum !== undefined) {
      this.unusedNum = args.unusedNum;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.sendNum !== undefined) {
      this.sendNum = args.sendNum;
    }
    if (args.checkedNum !== undefined) {
      this.checkedNum = args.checkedNum;
    }
  }
};
ProductCardStatistics.prototype = {};
ProductCardStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.usedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.unusedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sendNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.checkedNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardStatistics.prototype.write = function(output) {
  output.writeStructBegin('ProductCardStatistics');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.usedNum !== null && this.usedNum !== undefined) {
    output.writeFieldBegin('usedNum', Thrift.Type.I32, 4);
    output.writeI32(this.usedNum);
    output.writeFieldEnd();
  }
  if (this.unusedNum !== null && this.unusedNum !== undefined) {
    output.writeFieldBegin('unusedNum', Thrift.Type.I32, 5);
    output.writeI32(this.unusedNum);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 7);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.sendNum !== null && this.sendNum !== undefined) {
    output.writeFieldBegin('sendNum', Thrift.Type.STRING, 8);
    output.writeString(this.sendNum);
    output.writeFieldEnd();
  }
  if (this.checkedNum !== null && this.checkedNum !== undefined) {
    output.writeFieldBegin('checkedNum', Thrift.Type.STRING, 9);
    output.writeString(this.checkedNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardStatisticsParam = module.exports.ProductCardStatisticsParam = function(args) {
  this.sellerId = null;
  this.productName = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
  }
};
ProductCardStatisticsParam.prototype = {};
ProductCardStatisticsParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardStatisticsParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardStatisticsParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardSkuStatisticsParam = module.exports.ProductCardSkuStatisticsParam = function(args) {
  this.sellerId = null;
  this.productId = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
ProductCardSkuStatisticsParam.prototype = {};
ProductCardSkuStatisticsParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardSkuStatisticsParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardSkuStatisticsParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardParam = module.exports.ProductCardParam = function(args) {
  this.productId = null;
  this.transactionId = null;
  this.num = null;
  this.skuNum = null;
  this.buyerId = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.transactionId !== undefined) {
      this.transactionId = args.transactionId;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.buyerId !== undefined) {
      this.buyerId = args.buyerId;
    }
  }
};
ProductCardParam.prototype = {};
ProductCardParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.transactionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.buyerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardParam');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRING, 2);
    output.writeString(this.transactionId);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 4);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.buyerId !== null && this.buyerId !== undefined) {
    output.writeFieldBegin('buyerId', Thrift.Type.I32, 5);
    output.writeI32(this.buyerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardImportParam = module.exports.ProductCardImportParam = function(args) {
  this.sellerId = null;
  this.path = null;
  this.productId = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
ProductCardImportParam.prototype = {};
ProductCardImportParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardImportParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardImportParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 3);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardResult = module.exports.ProductCardResult = function(args) {
  this.result = null;
  this.cardList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cardList !== undefined) {
      this.cardList = args.cardList;
    }
  }
};
ProductCardResult.prototype = {};
ProductCardResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.cardList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.ProductCard();
          elem70.read(input);
          this.cardList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardResult.prototype.write = function(output) {
  output.writeStructBegin('ProductCardResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardList !== null && this.cardList !== undefined) {
    output.writeFieldBegin('cardList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardList.length);
    for (var iter71 in this.cardList)
    {
      if (this.cardList.hasOwnProperty(iter71))
      {
        iter71 = this.cardList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardViewListResult = module.exports.ProductCardViewListResult = function(args) {
  this.result = null;
  this.cardViewList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cardViewList !== undefined) {
      this.cardViewList = args.cardViewList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ProductCardViewListResult.prototype = {};
ProductCardViewListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.cardViewList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.ProductCardView();
          elem78.read(input);
          this.cardViewList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardViewListResult.prototype.write = function(output) {
  output.writeStructBegin('ProductCardViewListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardViewList !== null && this.cardViewList !== undefined) {
    output.writeFieldBegin('cardViewList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardViewList.length);
    for (var iter79 in this.cardViewList)
    {
      if (this.cardViewList.hasOwnProperty(iter79))
      {
        iter79 = this.cardViewList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardStatisticsResult = module.exports.ProductCardStatisticsResult = function(args) {
  this.result = null;
  this.cardtatisticsList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cardtatisticsList !== undefined) {
      this.cardtatisticsList = args.cardtatisticsList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ProductCardStatisticsResult.prototype = {};
ProductCardStatisticsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.cardtatisticsList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.ProductCardStatistics();
          elem86.read(input);
          this.cardtatisticsList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardStatisticsResult.prototype.write = function(output) {
  output.writeStructBegin('ProductCardStatisticsResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardtatisticsList !== null && this.cardtatisticsList !== undefined) {
    output.writeFieldBegin('cardtatisticsList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardtatisticsList.length);
    for (var iter87 in this.cardtatisticsList)
    {
      if (this.cardtatisticsList.hasOwnProperty(iter87))
      {
        iter87 = this.cardtatisticsList[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductOpt = module.exports.ProductOpt = function(args) {
  this.productId = null;
  this.curState = null;
  this.activeState = null;
  this.desc = null;
  this.operatorId = null;
  this.operatorType = null;
  this.createTime = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.curState !== undefined) {
      this.curState = args.curState;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.operatorId !== undefined) {
      this.operatorId = args.operatorId;
    }
    if (args.operatorType !== undefined) {
      this.operatorType = args.operatorType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
  }
};
ProductOpt.prototype = {};
ProductOpt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.curState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operatorId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductOpt.prototype.write = function(output) {
  output.writeStructBegin('ProductOpt');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.curState !== null && this.curState !== undefined) {
    output.writeFieldBegin('curState', Thrift.Type.I32, 2);
    output.writeI32(this.curState);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 3);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.STRING, 5);
    output.writeString(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.operatorType !== null && this.operatorType !== undefined) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 6);
    output.writeI32(this.operatorType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 7);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CaptchaQueryParam = module.exports.CaptchaQueryParam = function(args) {
  this.sellerId = null;
  this.pagination = null;
  this.monthQuery = null;
  this.productId = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.monthQuery !== undefined) {
      this.monthQuery = args.monthQuery;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
CaptchaQueryParam.prototype = {};
CaptchaQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.monthQuery = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CaptchaQueryParam.prototype.write = function(output) {
  output.writeStructBegin('CaptchaQueryParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.monthQuery !== null && this.monthQuery !== undefined) {
    output.writeFieldBegin('monthQuery', Thrift.Type.STRING, 3);
    output.writeString(this.monthQuery);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 4);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CaptchaDayQueryParam = module.exports.CaptchaDayQueryParam = function(args) {
  this.sellerId = null;
  this.pagination = null;
  this.date = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
  }
};
CaptchaDayQueryParam.prototype = {};
CaptchaDayQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CaptchaDayQueryParam.prototype.write = function(output) {
  output.writeStructBegin('CaptchaDayQueryParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 3);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AldCaptchaItem = module.exports.AldCaptchaItem = function(args) {
  this.productId = null;
  this.productName = null;
  this.aldSold = null;
  this.aldCaptcha = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.aldSold !== undefined) {
      this.aldSold = args.aldSold;
    }
    if (args.aldCaptcha !== undefined) {
      this.aldCaptcha = args.aldCaptcha;
    }
  }
};
AldCaptchaItem.prototype = {};
AldCaptchaItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.aldSold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.aldCaptcha = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AldCaptchaItem.prototype.write = function(output) {
  output.writeStructBegin('AldCaptchaItem');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.aldSold !== null && this.aldSold !== undefined) {
    output.writeFieldBegin('aldSold', Thrift.Type.I32, 3);
    output.writeI32(this.aldSold);
    output.writeFieldEnd();
  }
  if (this.aldCaptcha !== null && this.aldCaptcha !== undefined) {
    output.writeFieldBegin('aldCaptcha', Thrift.Type.I32, 4);
    output.writeI32(this.aldCaptcha);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DayAldCaptchaCount = module.exports.DayAldCaptchaCount = function(args) {
  this.date = null;
  this.checkedTotalNum = null;
  if (args) {
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.checkedTotalNum !== undefined) {
      this.checkedTotalNum = args.checkedTotalNum;
    }
  }
};
DayAldCaptchaCount.prototype = {};
DayAldCaptchaCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.checkedTotalNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DayAldCaptchaCount.prototype.write = function(output) {
  output.writeStructBegin('DayAldCaptchaCount');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 1);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.checkedTotalNum !== null && this.checkedTotalNum !== undefined) {
    output.writeFieldBegin('checkedTotalNum', Thrift.Type.I32, 2);
    output.writeI32(this.checkedTotalNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DayAldCaptchaItem = module.exports.DayAldCaptchaItem = function(args) {
  this.productId = null;
  this.productName = null;
  this.aldSold = null;
  this.aldCaptcha = null;
  this.date = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.aldSold !== undefined) {
      this.aldSold = args.aldSold;
    }
    if (args.aldCaptcha !== undefined) {
      this.aldCaptcha = args.aldCaptcha;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
  }
};
DayAldCaptchaItem.prototype = {};
DayAldCaptchaItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.aldSold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.aldCaptcha = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DayAldCaptchaItem.prototype.write = function(output) {
  output.writeStructBegin('DayAldCaptchaItem');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.aldSold !== null && this.aldSold !== undefined) {
    output.writeFieldBegin('aldSold', Thrift.Type.I32, 3);
    output.writeI32(this.aldSold);
    output.writeFieldEnd();
  }
  if (this.aldCaptcha !== null && this.aldCaptcha !== undefined) {
    output.writeFieldBegin('aldCaptcha', Thrift.Type.I32, 4);
    output.writeI32(this.aldCaptcha);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 5);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CaptchaListResult = module.exports.CaptchaListResult = function(args) {
  this.result = null;
  this.yedNum = null;
  this.monNum = null;
  this.pagination = null;
  this.itemList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.yedNum !== undefined) {
      this.yedNum = args.yedNum;
    }
    if (args.monNum !== undefined) {
      this.monNum = args.monNum;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.itemList !== undefined) {
      this.itemList = args.itemList;
    }
  }
};
CaptchaListResult.prototype = {};
CaptchaListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.yedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.monNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.itemList = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.AldCaptchaItem();
          elem94.read(input);
          this.itemList.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CaptchaListResult.prototype.write = function(output) {
  output.writeStructBegin('CaptchaListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.yedNum !== null && this.yedNum !== undefined) {
    output.writeFieldBegin('yedNum', Thrift.Type.I32, 2);
    output.writeI32(this.yedNum);
    output.writeFieldEnd();
  }
  if (this.monNum !== null && this.monNum !== undefined) {
    output.writeFieldBegin('monNum', Thrift.Type.I32, 3);
    output.writeI32(this.monNum);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 4);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.itemList !== null && this.itemList !== undefined) {
    output.writeFieldBegin('itemList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.itemList.length);
    for (var iter95 in this.itemList)
    {
      if (this.itemList.hasOwnProperty(iter95))
      {
        iter95 = this.itemList[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DayCaptchaListResult = module.exports.DayCaptchaListResult = function(args) {
  this.result = null;
  this.soldNum = null;
  this.checkedNum = null;
  this.pagination = null;
  this.dayAldCaptchaCountList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.soldNum !== undefined) {
      this.soldNum = args.soldNum;
    }
    if (args.checkedNum !== undefined) {
      this.checkedNum = args.checkedNum;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.dayAldCaptchaCountList !== undefined) {
      this.dayAldCaptchaCountList = args.dayAldCaptchaCountList;
    }
  }
};
DayCaptchaListResult.prototype = {};
DayCaptchaListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.soldNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.checkedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.dayAldCaptchaCountList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.DayAldCaptchaCount();
          elem102.read(input);
          this.dayAldCaptchaCountList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DayCaptchaListResult.prototype.write = function(output) {
  output.writeStructBegin('DayCaptchaListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.soldNum !== null && this.soldNum !== undefined) {
    output.writeFieldBegin('soldNum', Thrift.Type.I32, 2);
    output.writeI32(this.soldNum);
    output.writeFieldEnd();
  }
  if (this.checkedNum !== null && this.checkedNum !== undefined) {
    output.writeFieldBegin('checkedNum', Thrift.Type.I32, 3);
    output.writeI32(this.checkedNum);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 4);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.dayAldCaptchaCountList !== null && this.dayAldCaptchaCountList !== undefined) {
    output.writeFieldBegin('dayAldCaptchaCountList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.dayAldCaptchaCountList.length);
    for (var iter103 in this.dayAldCaptchaCountList)
    {
      if (this.dayAldCaptchaCountList.hasOwnProperty(iter103))
      {
        iter103 = this.dayAldCaptchaCountList[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DayCaptchaProductResult = module.exports.DayCaptchaProductResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.itemList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.itemList !== undefined) {
      this.itemList = args.itemList;
    }
  }
};
DayCaptchaProductResult.prototype = {};
DayCaptchaProductResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.itemList = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.DayAldCaptchaItem();
          elem110.read(input);
          this.itemList.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DayCaptchaProductResult.prototype.write = function(output) {
  output.writeStructBegin('DayCaptchaProductResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.itemList !== null && this.itemList !== undefined) {
    output.writeFieldBegin('itemList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.itemList.length);
    for (var iter111 in this.itemList)
    {
      if (this.itemList.hasOwnProperty(iter111))
      {
        iter111 = this.itemList[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CaptchaDetailResult = module.exports.CaptchaDetailResult = function(args) {
  this.result = null;
  this.productName = null;
  this.productCards = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.productCards !== undefined) {
      this.productCards = args.productCards;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CaptchaDetailResult.prototype = {};
CaptchaDetailResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.productCards = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.ProductCard();
          elem118.read(input);
          this.productCards.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CaptchaDetailResult.prototype.write = function(output) {
  output.writeStructBegin('CaptchaDetailResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.productCards !== null && this.productCards !== undefined) {
    output.writeFieldBegin('productCards', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.productCards.length);
    for (var iter119 in this.productCards)
    {
      if (this.productCards.hasOwnProperty(iter119))
      {
        iter119 = this.productCards[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 4);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyProductQueryParam = module.exports.ThirdPartyProductQueryParam = function(args) {
  this.thirdPartyIdentify = null;
  this.productName = null;
  this.activeState = null;
  this.stockState = null;
  this.priceState = null;
  this.offerState = null;
  if (args) {
    if (args.thirdPartyIdentify !== undefined) {
      this.thirdPartyIdentify = args.thirdPartyIdentify;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.stockState !== undefined) {
      this.stockState = args.stockState;
    }
    if (args.priceState !== undefined) {
      this.priceState = args.priceState;
    }
    if (args.offerState !== undefined) {
      this.offerState = args.offerState;
    }
  }
};
ThirdPartyProductQueryParam.prototype = {};
ThirdPartyProductQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.thirdPartyIdentify = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.stockState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.priceState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.offerState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyProductQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyProductQueryParam');
  if (this.thirdPartyIdentify !== null && this.thirdPartyIdentify !== undefined) {
    output.writeFieldBegin('thirdPartyIdentify', Thrift.Type.I32, 1);
    output.writeI32(this.thirdPartyIdentify);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 3);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.stockState !== null && this.stockState !== undefined) {
    output.writeFieldBegin('stockState', Thrift.Type.I32, 4);
    output.writeI32(this.stockState);
    output.writeFieldEnd();
  }
  if (this.priceState !== null && this.priceState !== undefined) {
    output.writeFieldBegin('priceState', Thrift.Type.I32, 5);
    output.writeI32(this.priceState);
    output.writeFieldEnd();
  }
  if (this.offerState !== null && this.offerState !== undefined) {
    output.writeFieldBegin('offerState', Thrift.Type.I32, 6);
    output.writeI32(this.offerState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyProduct = module.exports.ThirdPartyProduct = function(args) {
  this.productId = null;
  this.thirdPartyProductId = null;
  this.thirdPartyIdentify = null;
  this.name = null;
  this.imgKey = null;
  this.sellerClassNum = null;
  this.curPrice = null;
  this.priceState = null;
  this.stockInfo = null;
  this.activeState = null;
  this.offerState = null;
  this.updateTime = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.thirdPartyProductId !== undefined) {
      this.thirdPartyProductId = args.thirdPartyProductId;
    }
    if (args.thirdPartyIdentify !== undefined) {
      this.thirdPartyIdentify = args.thirdPartyIdentify;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.imgKey !== undefined) {
      this.imgKey = args.imgKey;
    }
    if (args.sellerClassNum !== undefined) {
      this.sellerClassNum = args.sellerClassNum;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.priceState !== undefined) {
      this.priceState = args.priceState;
    }
    if (args.stockInfo !== undefined) {
      this.stockInfo = args.stockInfo;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.offerState !== undefined) {
      this.offerState = args.offerState;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
  }
};
ThirdPartyProduct.prototype = {};
ThirdPartyProduct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPartyProductId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.thirdPartyIdentify = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sellerClassNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.priceState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.stockInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.offerState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyProduct.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyProduct');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.thirdPartyProductId !== null && this.thirdPartyProductId !== undefined) {
    output.writeFieldBegin('thirdPartyProductId', Thrift.Type.STRING, 2);
    output.writeString(this.thirdPartyProductId);
    output.writeFieldEnd();
  }
  if (this.thirdPartyIdentify !== null && this.thirdPartyIdentify !== undefined) {
    output.writeFieldBegin('thirdPartyIdentify', Thrift.Type.I32, 3);
    output.writeI32(this.thirdPartyIdentify);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 5);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.sellerClassNum !== null && this.sellerClassNum !== undefined) {
    output.writeFieldBegin('sellerClassNum', Thrift.Type.STRING, 6);
    output.writeString(this.sellerClassNum);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 7);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.priceState !== null && this.priceState !== undefined) {
    output.writeFieldBegin('priceState', Thrift.Type.I32, 8);
    output.writeI32(this.priceState);
    output.writeFieldEnd();
  }
  if (this.stockInfo !== null && this.stockInfo !== undefined) {
    output.writeFieldBegin('stockInfo', Thrift.Type.STRING, 9);
    output.writeString(this.stockInfo);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 10);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.offerState !== null && this.offerState !== undefined) {
    output.writeFieldBegin('offerState', Thrift.Type.I32, 11);
    output.writeI32(this.offerState);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 12);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyProductQueryResult = module.exports.ThirdPartyProductQueryResult = function(args) {
  this.result = null;
  this.thirdPartyProductList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.thirdPartyProductList !== undefined) {
      this.thirdPartyProductList = args.thirdPartyProductList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ThirdPartyProductQueryResult.prototype = {};
ThirdPartyProductQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.thirdPartyProductList = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.ThirdPartyProduct();
          elem126.read(input);
          this.thirdPartyProductList.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyProductQueryResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyProductQueryResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.thirdPartyProductList !== null && this.thirdPartyProductList !== undefined) {
    output.writeFieldBegin('thirdPartyProductList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.thirdPartyProductList.length);
    for (var iter127 in this.thirdPartyProductList)
    {
      if (this.thirdPartyProductList.hasOwnProperty(iter127))
      {
        iter127 = this.thirdPartyProductList[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyProductLog = module.exports.ThirdPartyProductLog = function(args) {
  this.productState = null;
  this.curPrice = null;
  this.updateTime = null;
  if (args) {
    if (args.productState !== undefined) {
      this.productState = args.productState;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
  }
};
ThirdPartyProductLog.prototype = {};
ThirdPartyProductLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.productState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyProductLog.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyProductLog');
  if (this.productState !== null && this.productState !== undefined) {
    output.writeFieldBegin('productState', Thrift.Type.I32, 1);
    output.writeI32(this.productState);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 2);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 3);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyProductLogParam = module.exports.ThirdPartyProductLogParam = function(args) {
  this.thirdPartyIdentify = null;
  this.thirdPartyProductId = null;
  if (args) {
    if (args.thirdPartyIdentify !== undefined) {
      this.thirdPartyIdentify = args.thirdPartyIdentify;
    }
    if (args.thirdPartyProductId !== undefined) {
      this.thirdPartyProductId = args.thirdPartyProductId;
    }
  }
};
ThirdPartyProductLogParam.prototype = {};
ThirdPartyProductLogParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.thirdPartyIdentify = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPartyProductId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyProductLogParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyProductLogParam');
  if (this.thirdPartyIdentify !== null && this.thirdPartyIdentify !== undefined) {
    output.writeFieldBegin('thirdPartyIdentify', Thrift.Type.I32, 1);
    output.writeI32(this.thirdPartyIdentify);
    output.writeFieldEnd();
  }
  if (this.thirdPartyProductId !== null && this.thirdPartyProductId !== undefined) {
    output.writeFieldBegin('thirdPartyProductId', Thrift.Type.STRING, 2);
    output.writeString(this.thirdPartyProductId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyProductLogResult = module.exports.ThirdPartyProductLogResult = function(args) {
  this.result = null;
  this.logs = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.logs !== undefined) {
      this.logs = args.logs;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ThirdPartyProductLogResult.prototype = {};
ThirdPartyProductLogResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.logs = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.ThirdPartyProductLog();
          elem134.read(input);
          this.logs.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyProductLogResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyProductLogResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.logs !== null && this.logs !== undefined) {
    output.writeFieldBegin('logs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.logs.length);
    for (var iter135 in this.logs)
    {
      if (this.logs.hasOwnProperty(iter135))
      {
        iter135 = this.logs[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CheckCodeListParam = module.exports.CheckCodeListParam = function(args) {
  this.sendAccount = null;
  this.checkBeginTime = null;
  this.checkEndTime = null;
  this.sellerId = null;
  this.sellerName = null;
  this.productId = null;
  this.productName = null;
  if (args) {
    if (args.sendAccount !== undefined) {
      this.sendAccount = args.sendAccount;
    }
    if (args.checkBeginTime !== undefined) {
      this.checkBeginTime = args.checkBeginTime;
    }
    if (args.checkEndTime !== undefined) {
      this.checkEndTime = args.checkEndTime;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
  }
};
CheckCodeListParam.prototype = {};
CheckCodeListParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sendAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.checkBeginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.checkEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckCodeListParam.prototype.write = function(output) {
  output.writeStructBegin('CheckCodeListParam');
  if (this.sendAccount !== null && this.sendAccount !== undefined) {
    output.writeFieldBegin('sendAccount', Thrift.Type.STRING, 1);
    output.writeString(this.sendAccount);
    output.writeFieldEnd();
  }
  if (this.checkBeginTime !== null && this.checkBeginTime !== undefined) {
    output.writeFieldBegin('checkBeginTime', Thrift.Type.STRING, 2);
    output.writeString(this.checkBeginTime);
    output.writeFieldEnd();
  }
  if (this.checkEndTime !== null && this.checkEndTime !== undefined) {
    output.writeFieldBegin('checkEndTime', Thrift.Type.STRING, 3);
    output.writeString(this.checkEndTime);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 4);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 5);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 6);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 7);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CheckCode = module.exports.CheckCode = function(args) {
  this.sellerId = null;
  this.sellerName = null;
  this.productId = null;
  this.productName = null;
  this.skuNum = null;
  this.skuName = null;
  this.cardName = null;
  this.password = null;
  this.sendAccount = null;
  this.checkTime = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.skuName !== undefined) {
      this.skuName = args.skuName;
    }
    if (args.cardName !== undefined) {
      this.cardName = args.cardName;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.sendAccount !== undefined) {
      this.sendAccount = args.sendAccount;
    }
    if (args.checkTime !== undefined) {
      this.checkTime = args.checkTime;
    }
  }
};
CheckCode.prototype = {};
CheckCode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.skuName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sendAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.checkTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckCode.prototype.write = function(output) {
  output.writeStructBegin('CheckCode');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 1);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 2);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 3);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 4);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 5);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.skuName !== null && this.skuName !== undefined) {
    output.writeFieldBegin('skuName', Thrift.Type.STRING, 6);
    output.writeString(this.skuName);
    output.writeFieldEnd();
  }
  if (this.cardName !== null && this.cardName !== undefined) {
    output.writeFieldBegin('cardName', Thrift.Type.STRING, 7);
    output.writeString(this.cardName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 8);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.sendAccount !== null && this.sendAccount !== undefined) {
    output.writeFieldBegin('sendAccount', Thrift.Type.STRING, 9);
    output.writeString(this.sendAccount);
    output.writeFieldEnd();
  }
  if (this.checkTime !== null && this.checkTime !== undefined) {
    output.writeFieldBegin('checkTime', Thrift.Type.STRING, 10);
    output.writeString(this.checkTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CheckCodeListResult = module.exports.CheckCodeListResult = function(args) {
  this.result = null;
  this.checkCodeList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.checkCodeList !== undefined) {
      this.checkCodeList = args.checkCodeList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CheckCodeListResult.prototype = {};
CheckCodeListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.checkCodeList = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.CheckCode();
          elem142.read(input);
          this.checkCodeList.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckCodeListResult.prototype.write = function(output) {
  output.writeStructBegin('CheckCodeListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.checkCodeList !== null && this.checkCodeList !== undefined) {
    output.writeFieldBegin('checkCodeList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.checkCodeList.length);
    for (var iter143 in this.checkCodeList)
    {
      if (this.checkCodeList.hasOwnProperty(iter143))
      {
        iter143 = this.checkCodeList[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

