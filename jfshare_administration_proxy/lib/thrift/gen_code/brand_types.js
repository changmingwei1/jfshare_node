//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
BrandInfo = module.exports.BrandInfo = function(args) {
  this.id = null;
  this.name = null;
  this.imgKey = null;
  this.url = null;
  this.serial = null;
  this.remark = null;
  this.createTime = null;
  this.createId = null;
  this.lastUpdateTime = null;
  this.lastUpdateId = null;
  this.state = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.imgKey !== undefined) {
      this.imgKey = args.imgKey;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.serial !== undefined) {
      this.serial = args.serial;
    }
    if (args.remark !== undefined) {
      this.remark = args.remark;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.createId !== undefined) {
      this.createId = args.createId;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.lastUpdateId !== undefined) {
      this.lastUpdateId = args.lastUpdateId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
BrandInfo.prototype = {};
BrandInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.serial = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.createId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrandInfo.prototype.write = function(output) {
  output.writeStructBegin('BrandInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 3);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 4);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.I32, 5);
    output.writeI32(this.serial);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 6);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 7);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.createId !== null && this.createId !== undefined) {
    output.writeFieldBegin('createId', Thrift.Type.I32, 8);
    output.writeI32(this.createId);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 9);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateId !== null && this.lastUpdateId !== undefined) {
    output.writeFieldBegin('lastUpdateId', Thrift.Type.I32, 10);
    output.writeI32(this.lastUpdateId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 11);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryParam = module.exports.QueryParam = function(args) {
  this.pageSize = null;
  this.curPage = null;
  this.id = null;
  this.name = null;
  this.hsubjectIdList = null;
  if (args) {
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
    if (args.curPage !== undefined) {
      this.curPage = args.curPage;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.hsubjectIdList !== undefined) {
      this.hsubjectIdList = args.hsubjectIdList;
    }
  }
};
QueryParam.prototype = {};
QueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.curPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.hsubjectIdList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.hsubjectIdList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryParam.prototype.write = function(output) {
  output.writeStructBegin('QueryParam');
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 1);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.curPage !== null && this.curPage !== undefined) {
    output.writeFieldBegin('curPage', Thrift.Type.I32, 2);
    output.writeI32(this.curPage);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 3);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.hsubjectIdList !== null && this.hsubjectIdList !== undefined) {
    output.writeFieldBegin('hsubjectIdList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.hsubjectIdList.length);
    for (var iter7 in this.hsubjectIdList)
    {
      if (this.hsubjectIdList.hasOwnProperty(iter7))
      {
        iter7 = this.hsubjectIdList[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BrandResult = module.exports.BrandResult = function(args) {
  this.result = null;
  this.total = null;
  this.pageCount = null;
  this.brandInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.pageCount !== undefined) {
      this.pageCount = args.pageCount;
    }
    if (args.brandInfo !== undefined) {
      this.brandInfo = args.brandInfo;
    }
  }
};
BrandResult.prototype = {};
BrandResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.brandInfo = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.BrandInfo();
          elem14.read(input);
          this.brandInfo.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrandResult.prototype.write = function(output) {
  output.writeStructBegin('BrandResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 2);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.pageCount !== null && this.pageCount !== undefined) {
    output.writeFieldBegin('pageCount', Thrift.Type.I32, 3);
    output.writeI32(this.pageCount);
    output.writeFieldEnd();
  }
  if (this.brandInfo !== null && this.brandInfo !== undefined) {
    output.writeFieldBegin('brandInfo', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.brandInfo.length);
    for (var iter15 in this.brandInfo)
    {
      if (this.brandInfo.hasOwnProperty(iter15))
      {
        iter15 = this.brandInfo[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BrandInfoResult = module.exports.BrandInfoResult = function(args) {
  this.result = null;
  this.brandInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.brandInfo !== undefined) {
      this.brandInfo = args.brandInfo;
    }
  }
};
BrandInfoResult.prototype = {};
BrandInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.brandInfo = new ttypes.BrandInfo();
        this.brandInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrandInfoResult.prototype.write = function(output) {
  output.writeStructBegin('BrandInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.brandInfo !== null && this.brandInfo !== undefined) {
    output.writeFieldBegin('brandInfo', Thrift.Type.STRUCT, 2);
    this.brandInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

