//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pay_ttypes = require('./pay_types')


var ttypes = module.exports = {};
ttypes.OrderCancelReason = {
  'drop_it' : 1,
  'msg_error' : 2,
  'rebuy' : 3,
  'out_of_stock' : 4,
  'face_to_face_deal' : 5,
  'other' : 6,
  'pay_type' : 7,
  'balance' : 8,
  'quality' : 9,
  'lost_in' : 10
};
ttypes.OrderStateType = {
  'pay_timeout_cancel' : 101,
  'buyer_cancel' : 102,
  'refund_close' : 103,
  'complain_close' : 104,
  'scalper_close' : 105
};
PayInfo = module.exports.PayInfo = function(args) {
  this.payChannel = null;
  this.payId = null;
  this.payTime = null;
  this.payAccount = null;
  this.payState = null;
  if (args) {
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.payId !== undefined) {
      this.payId = args.payId;
    }
    if (args.payTime !== undefined) {
      this.payTime = args.payTime;
    }
    if (args.payAccount !== undefined) {
      this.payAccount = args.payAccount;
    }
    if (args.payState !== undefined) {
      this.payState = args.payState;
    }
  }
};
PayInfo.prototype = {};
PayInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.payAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.payState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayInfo.prototype.write = function(output) {
  output.writeStructBegin('PayInfo');
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.STRING, 1);
    output.writeString(this.payChannel);
    output.writeFieldEnd();
  }
  if (this.payId !== null && this.payId !== undefined) {
    output.writeFieldBegin('payId', Thrift.Type.STRING, 2);
    output.writeString(this.payId);
    output.writeFieldEnd();
  }
  if (this.payTime !== null && this.payTime !== undefined) {
    output.writeFieldBegin('payTime', Thrift.Type.STRING, 3);
    output.writeString(this.payTime);
    output.writeFieldEnd();
  }
  if (this.payAccount !== null && this.payAccount !== undefined) {
    output.writeFieldBegin('payAccount', Thrift.Type.STRING, 4);
    output.writeString(this.payAccount);
    output.writeFieldEnd();
  }
  if (this.payState !== null && this.payState !== undefined) {
    output.writeFieldBegin('payState', Thrift.Type.I32, 5);
    output.writeI32(this.payState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeliverInfo = module.exports.DeliverInfo = function(args) {
  this.userId = null;
  this.orderId = null;
  this.buyerComment = null;
  this.sellerComment = null;
  this.receiverName = null;
  this.receiverMobile = null;
  this.receiverTele = null;
  this.addressId = null;
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  this.provinceName = null;
  this.cityName = null;
  this.countyName = null;
  this.receiverAddress = null;
  this.postCode = null;
  this.expressId = null;
  this.expressName = null;
  this.expressQueryUrl = null;
  this.expressNo = null;
  this.expressDnfTel = null;
  this.expressTypeState = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.buyerComment !== undefined) {
      this.buyerComment = args.buyerComment;
    }
    if (args.sellerComment !== undefined) {
      this.sellerComment = args.sellerComment;
    }
    if (args.receiverName !== undefined) {
      this.receiverName = args.receiverName;
    }
    if (args.receiverMobile !== undefined) {
      this.receiverMobile = args.receiverMobile;
    }
    if (args.receiverTele !== undefined) {
      this.receiverTele = args.receiverTele;
    }
    if (args.addressId !== undefined) {
      this.addressId = args.addressId;
    }
    if (args.provinceId !== undefined) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined) {
      this.countyId = args.countyId;
    }
    if (args.provinceName !== undefined) {
      this.provinceName = args.provinceName;
    }
    if (args.cityName !== undefined) {
      this.cityName = args.cityName;
    }
    if (args.countyName !== undefined) {
      this.countyName = args.countyName;
    }
    if (args.receiverAddress !== undefined) {
      this.receiverAddress = args.receiverAddress;
    }
    if (args.postCode !== undefined) {
      this.postCode = args.postCode;
    }
    if (args.expressId !== undefined) {
      this.expressId = args.expressId;
    }
    if (args.expressName !== undefined) {
      this.expressName = args.expressName;
    }
    if (args.expressQueryUrl !== undefined) {
      this.expressQueryUrl = args.expressQueryUrl;
    }
    if (args.expressNo !== undefined) {
      this.expressNo = args.expressNo;
    }
    if (args.expressDnfTel !== undefined) {
      this.expressDnfTel = args.expressDnfTel;
    }
    if (args.expressTypeState !== undefined) {
      this.expressTypeState = args.expressTypeState;
    }
  }
};
DeliverInfo.prototype = {};
DeliverInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.buyerComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sellerComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.receiverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.receiverMobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.receiverTele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.addressId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.countyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.receiverAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.postCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.expressId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.expressName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.expressQueryUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.expressNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.expressDnfTel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.expressTypeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeliverInfo.prototype.write = function(output) {
  output.writeStructBegin('DeliverInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.buyerComment !== null && this.buyerComment !== undefined) {
    output.writeFieldBegin('buyerComment', Thrift.Type.STRING, 3);
    output.writeString(this.buyerComment);
    output.writeFieldEnd();
  }
  if (this.sellerComment !== null && this.sellerComment !== undefined) {
    output.writeFieldBegin('sellerComment', Thrift.Type.STRING, 4);
    output.writeString(this.sellerComment);
    output.writeFieldEnd();
  }
  if (this.receiverName !== null && this.receiverName !== undefined) {
    output.writeFieldBegin('receiverName', Thrift.Type.STRING, 5);
    output.writeString(this.receiverName);
    output.writeFieldEnd();
  }
  if (this.receiverMobile !== null && this.receiverMobile !== undefined) {
    output.writeFieldBegin('receiverMobile', Thrift.Type.STRING, 6);
    output.writeString(this.receiverMobile);
    output.writeFieldEnd();
  }
  if (this.receiverTele !== null && this.receiverTele !== undefined) {
    output.writeFieldBegin('receiverTele', Thrift.Type.STRING, 7);
    output.writeString(this.receiverTele);
    output.writeFieldEnd();
  }
  if (this.addressId !== null && this.addressId !== undefined) {
    output.writeFieldBegin('addressId', Thrift.Type.I32, 8);
    output.writeI32(this.addressId);
    output.writeFieldEnd();
  }
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 9);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 10);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 11);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 12);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 13);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.countyName !== null && this.countyName !== undefined) {
    output.writeFieldBegin('countyName', Thrift.Type.STRING, 14);
    output.writeString(this.countyName);
    output.writeFieldEnd();
  }
  if (this.receiverAddress !== null && this.receiverAddress !== undefined) {
    output.writeFieldBegin('receiverAddress', Thrift.Type.STRING, 15);
    output.writeString(this.receiverAddress);
    output.writeFieldEnd();
  }
  if (this.postCode !== null && this.postCode !== undefined) {
    output.writeFieldBegin('postCode', Thrift.Type.STRING, 16);
    output.writeString(this.postCode);
    output.writeFieldEnd();
  }
  if (this.expressId !== null && this.expressId !== undefined) {
    output.writeFieldBegin('expressId', Thrift.Type.STRING, 17);
    output.writeString(this.expressId);
    output.writeFieldEnd();
  }
  if (this.expressName !== null && this.expressName !== undefined) {
    output.writeFieldBegin('expressName', Thrift.Type.STRING, 18);
    output.writeString(this.expressName);
    output.writeFieldEnd();
  }
  if (this.expressQueryUrl !== null && this.expressQueryUrl !== undefined) {
    output.writeFieldBegin('expressQueryUrl', Thrift.Type.STRING, 19);
    output.writeString(this.expressQueryUrl);
    output.writeFieldEnd();
  }
  if (this.expressNo !== null && this.expressNo !== undefined) {
    output.writeFieldBegin('expressNo', Thrift.Type.STRING, 20);
    output.writeString(this.expressNo);
    output.writeFieldEnd();
  }
  if (this.expressDnfTel !== null && this.expressDnfTel !== undefined) {
    output.writeFieldBegin('expressDnfTel', Thrift.Type.STRING, 21);
    output.writeString(this.expressDnfTel);
    output.writeFieldEnd();
  }
  if (this.expressTypeState !== null && this.expressTypeState !== undefined) {
    output.writeFieldBegin('expressTypeState', Thrift.Type.I32, 22);
    output.writeI32(this.expressTypeState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderInfo = module.exports.OrderInfo = function(args) {
  this.orderId = null;
  this.productId = null;
  this.productName = null;
  this.viceName = null;
  this.subjectId = null;
  this.brandId = null;
  this.productSnapshootId = null;
  this.skuNum = null;
  this.skuDesc = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.imagesUrl = null;
  this.shelf = null;
  this.sellerClassNum = null;
  this.count = null;
  this.lastUpdateTime = null;
  this.lastUpdateUserId = null;
  this.createTime = null;
  this.createUserId = null;
  this.type = null;
  this.wi = null;
  this.exchangeScore = null;
  this.exchangeCash = null;
  this.storehouseId = null;
  this.postageTemplateId = null;
  this.postage = null;
  this.refPrice = null;
  this.thirdExchangeRate = null;
  this.postageExt = null;
  this.weight = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.viceName !== undefined) {
      this.viceName = args.viceName;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined) {
      this.brandId = args.brandId;
    }
    if (args.productSnapshootId !== undefined) {
      this.productSnapshootId = args.productSnapshootId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.skuDesc !== undefined) {
      this.skuDesc = args.skuDesc;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined) {
      this.orgPrice = args.orgPrice;
    }
    if (args.imagesUrl !== undefined) {
      this.imagesUrl = args.imagesUrl;
    }
    if (args.shelf !== undefined) {
      this.shelf = args.shelf;
    }
    if (args.sellerClassNum !== undefined) {
      this.sellerClassNum = args.sellerClassNum;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.lastUpdateUserId !== undefined) {
      this.lastUpdateUserId = args.lastUpdateUserId;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.createUserId !== undefined) {
      this.createUserId = args.createUserId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.wi !== undefined) {
      this.wi = args.wi;
    }
    if (args.exchangeScore !== undefined) {
      this.exchangeScore = args.exchangeScore;
    }
    if (args.exchangeCash !== undefined) {
      this.exchangeCash = args.exchangeCash;
    }
    if (args.storehouseId !== undefined) {
      this.storehouseId = args.storehouseId;
    }
    if (args.postageTemplateId !== undefined) {
      this.postageTemplateId = args.postageTemplateId;
    }
    if (args.postage !== undefined) {
      this.postage = args.postage;
    }
    if (args.refPrice !== undefined) {
      this.refPrice = args.refPrice;
    }
    if (args.thirdExchangeRate !== undefined) {
      this.thirdExchangeRate = args.thirdExchangeRate;
    }
    if (args.postageExt !== undefined) {
      this.postageExt = args.postageExt;
    }
    if (args.weight !== undefined) {
      this.weight = args.weight;
    }
  }
};
OrderInfo.prototype = {};
OrderInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.brandId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.productSnapshootId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.skuDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.imagesUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.shelf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.sellerClassNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.createUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.wi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.exchangeScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeCash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.storehouseId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.postageTemplateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.postage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.refPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.thirdExchangeRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.postageExt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.weight = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderInfo.prototype.write = function(output) {
  output.writeStructBegin('OrderInfo');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 3);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 4);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 5);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.STRING, 6);
    output.writeString(this.brandId);
    output.writeFieldEnd();
  }
  if (this.productSnapshootId !== null && this.productSnapshootId !== undefined) {
    output.writeFieldBegin('productSnapshootId', Thrift.Type.STRING, 7);
    output.writeString(this.productSnapshootId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 8);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.skuDesc !== null && this.skuDesc !== undefined) {
    output.writeFieldBegin('skuDesc', Thrift.Type.STRING, 9);
    output.writeString(this.skuDesc);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 10);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 11);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.imagesUrl !== null && this.imagesUrl !== undefined) {
    output.writeFieldBegin('imagesUrl', Thrift.Type.STRING, 12);
    output.writeString(this.imagesUrl);
    output.writeFieldEnd();
  }
  if (this.shelf !== null && this.shelf !== undefined) {
    output.writeFieldBegin('shelf', Thrift.Type.STRING, 13);
    output.writeString(this.shelf);
    output.writeFieldEnd();
  }
  if (this.sellerClassNum !== null && this.sellerClassNum !== undefined) {
    output.writeFieldBegin('sellerClassNum', Thrift.Type.STRING, 14);
    output.writeString(this.sellerClassNum);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 15);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 16);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateUserId !== null && this.lastUpdateUserId !== undefined) {
    output.writeFieldBegin('lastUpdateUserId', Thrift.Type.I32, 17);
    output.writeI32(this.lastUpdateUserId);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 18);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.createUserId !== null && this.createUserId !== undefined) {
    output.writeFieldBegin('createUserId', Thrift.Type.I32, 19);
    output.writeI32(this.createUserId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 20);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.wi !== null && this.wi !== undefined) {
    output.writeFieldBegin('wi', Thrift.Type.STRING, 21);
    output.writeString(this.wi);
    output.writeFieldEnd();
  }
  if (this.exchangeScore !== null && this.exchangeScore !== undefined) {
    output.writeFieldBegin('exchangeScore', Thrift.Type.I32, 22);
    output.writeI32(this.exchangeScore);
    output.writeFieldEnd();
  }
  if (this.exchangeCash !== null && this.exchangeCash !== undefined) {
    output.writeFieldBegin('exchangeCash', Thrift.Type.STRING, 23);
    output.writeString(this.exchangeCash);
    output.writeFieldEnd();
  }
  if (this.storehouseId !== null && this.storehouseId !== undefined) {
    output.writeFieldBegin('storehouseId', Thrift.Type.I32, 24);
    output.writeI32(this.storehouseId);
    output.writeFieldEnd();
  }
  if (this.postageTemplateId !== null && this.postageTemplateId !== undefined) {
    output.writeFieldBegin('postageTemplateId', Thrift.Type.I32, 25);
    output.writeI32(this.postageTemplateId);
    output.writeFieldEnd();
  }
  if (this.postage !== null && this.postage !== undefined) {
    output.writeFieldBegin('postage', Thrift.Type.STRING, 26);
    output.writeString(this.postage);
    output.writeFieldEnd();
  }
  if (this.refPrice !== null && this.refPrice !== undefined) {
    output.writeFieldBegin('refPrice', Thrift.Type.STRING, 27);
    output.writeString(this.refPrice);
    output.writeFieldEnd();
  }
  if (this.thirdExchangeRate !== null && this.thirdExchangeRate !== undefined) {
    output.writeFieldBegin('thirdExchangeRate', Thrift.Type.STRING, 28);
    output.writeString(this.thirdExchangeRate);
    output.writeFieldEnd();
  }
  if (this.postageExt !== null && this.postageExt !== undefined) {
    output.writeFieldBegin('postageExt', Thrift.Type.STRING, 29);
    output.writeString(this.postageExt);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.STRING, 30);
    output.writeString(this.weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Order = module.exports.Order = function(args) {
  this.orderId = null;
  this.tradeCode = null;
  this.userId = null;
  this.userName = null;
  this.createTime = null;
  this.cancelTime = null;
  this.payInfo = null;
  this.sellerId = null;
  this.sellerName = null;
  this.closingPrice = null;
  this.thirdId = null;
  this.deliverInfo = null;
  this.orderState = null;
  this.sellerComment = null;
  this.buyerComment = null;
  this.lastUpdateTime = null;
  this.lastUpdateUserId = null;
  this.createUserId = null;
  this.deliverTime = null;
  this.successTime = null;
  this.settlementState = null;
  this.postage = null;
  this.orderStateType = null;
  this.orderStateTypeDesc = null;
  this.settlementTime = null;
  this.orderTag = null;
  this.wi = null;
  this.fromSource = null;
  this.tradePayId = null;
  this.orderDeleteState = null;
  this.exchangeScore = null;
  this.exchangeCash = null;
  this.orderBatch = null;
  this.activeState = null;
  this.productList = null;
  this.thirdScore = null;
  this.postageExt = null;
  this.orderType = null;
  this.thirdPrice = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.tradeCode !== undefined) {
      this.tradeCode = args.tradeCode;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.cancelTime !== undefined) {
      this.cancelTime = args.cancelTime;
    }
    if (args.payInfo !== undefined) {
      this.payInfo = args.payInfo;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.closingPrice !== undefined) {
      this.closingPrice = args.closingPrice;
    }
    if (args.thirdId !== undefined) {
      this.thirdId = args.thirdId;
    }
    if (args.deliverInfo !== undefined) {
      this.deliverInfo = args.deliverInfo;
    }
    if (args.orderState !== undefined) {
      this.orderState = args.orderState;
    }
    if (args.sellerComment !== undefined) {
      this.sellerComment = args.sellerComment;
    }
    if (args.buyerComment !== undefined) {
      this.buyerComment = args.buyerComment;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.lastUpdateUserId !== undefined) {
      this.lastUpdateUserId = args.lastUpdateUserId;
    }
    if (args.createUserId !== undefined) {
      this.createUserId = args.createUserId;
    }
    if (args.deliverTime !== undefined) {
      this.deliverTime = args.deliverTime;
    }
    if (args.successTime !== undefined) {
      this.successTime = args.successTime;
    }
    if (args.settlementState !== undefined) {
      this.settlementState = args.settlementState;
    }
    if (args.postage !== undefined) {
      this.postage = args.postage;
    }
    if (args.orderStateType !== undefined) {
      this.orderStateType = args.orderStateType;
    }
    if (args.orderStateTypeDesc !== undefined) {
      this.orderStateTypeDesc = args.orderStateTypeDesc;
    }
    if (args.settlementTime !== undefined) {
      this.settlementTime = args.settlementTime;
    }
    if (args.orderTag !== undefined) {
      this.orderTag = args.orderTag;
    }
    if (args.wi !== undefined) {
      this.wi = args.wi;
    }
    if (args.fromSource !== undefined) {
      this.fromSource = args.fromSource;
    }
    if (args.tradePayId !== undefined) {
      this.tradePayId = args.tradePayId;
    }
    if (args.orderDeleteState !== undefined) {
      this.orderDeleteState = args.orderDeleteState;
    }
    if (args.exchangeScore !== undefined) {
      this.exchangeScore = args.exchangeScore;
    }
    if (args.exchangeCash !== undefined) {
      this.exchangeCash = args.exchangeCash;
    }
    if (args.orderBatch !== undefined) {
      this.orderBatch = args.orderBatch;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.productList !== undefined) {
      this.productList = args.productList;
    }
    if (args.thirdScore !== undefined) {
      this.thirdScore = args.thirdScore;
    }
    if (args.postageExt !== undefined) {
      this.postageExt = args.postageExt;
    }
    if (args.orderType !== undefined) {
      this.orderType = args.orderType;
    }
    if (args.thirdPrice !== undefined) {
      this.thirdPrice = args.thirdPrice;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tradeCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cancelTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.payInfo = new ttypes.PayInfo();
        this.payInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.closingPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.thirdId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.deliverInfo = new ttypes.DeliverInfo();
        this.deliverInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.orderState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.sellerComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.buyerComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.createUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.deliverTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.successTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.settlementState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.postage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.orderStateType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.orderStateTypeDesc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.settlementTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I32) {
        this.orderTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.wi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I32) {
        this.fromSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.tradePayId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I32) {
        this.orderDeleteState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.exchangeScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeCash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.orderBatch = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.productList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.OrderInfo();
          elem6.read(input);
          this.productList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I32) {
        this.thirdScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.postageExt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.I32) {
        this.orderType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.tradeCode !== null && this.tradeCode !== undefined) {
    output.writeFieldBegin('tradeCode', Thrift.Type.STRING, 2);
    output.writeString(this.tradeCode);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 4);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 5);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.cancelTime !== null && this.cancelTime !== undefined) {
    output.writeFieldBegin('cancelTime', Thrift.Type.STRING, 6);
    output.writeString(this.cancelTime);
    output.writeFieldEnd();
  }
  if (this.payInfo !== null && this.payInfo !== undefined) {
    output.writeFieldBegin('payInfo', Thrift.Type.STRUCT, 7);
    this.payInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 8);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 9);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.closingPrice !== null && this.closingPrice !== undefined) {
    output.writeFieldBegin('closingPrice', Thrift.Type.STRING, 10);
    output.writeString(this.closingPrice);
    output.writeFieldEnd();
  }
  if (this.thirdId !== null && this.thirdId !== undefined) {
    output.writeFieldBegin('thirdId', Thrift.Type.STRING, 11);
    output.writeString(this.thirdId);
    output.writeFieldEnd();
  }
  if (this.deliverInfo !== null && this.deliverInfo !== undefined) {
    output.writeFieldBegin('deliverInfo', Thrift.Type.STRUCT, 12);
    this.deliverInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.orderState !== null && this.orderState !== undefined) {
    output.writeFieldBegin('orderState', Thrift.Type.I32, 13);
    output.writeI32(this.orderState);
    output.writeFieldEnd();
  }
  if (this.sellerComment !== null && this.sellerComment !== undefined) {
    output.writeFieldBegin('sellerComment', Thrift.Type.STRING, 14);
    output.writeString(this.sellerComment);
    output.writeFieldEnd();
  }
  if (this.buyerComment !== null && this.buyerComment !== undefined) {
    output.writeFieldBegin('buyerComment', Thrift.Type.STRING, 15);
    output.writeString(this.buyerComment);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 16);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateUserId !== null && this.lastUpdateUserId !== undefined) {
    output.writeFieldBegin('lastUpdateUserId', Thrift.Type.I32, 17);
    output.writeI32(this.lastUpdateUserId);
    output.writeFieldEnd();
  }
  if (this.createUserId !== null && this.createUserId !== undefined) {
    output.writeFieldBegin('createUserId', Thrift.Type.I32, 18);
    output.writeI32(this.createUserId);
    output.writeFieldEnd();
  }
  if (this.deliverTime !== null && this.deliverTime !== undefined) {
    output.writeFieldBegin('deliverTime', Thrift.Type.STRING, 19);
    output.writeString(this.deliverTime);
    output.writeFieldEnd();
  }
  if (this.successTime !== null && this.successTime !== undefined) {
    output.writeFieldBegin('successTime', Thrift.Type.STRING, 20);
    output.writeString(this.successTime);
    output.writeFieldEnd();
  }
  if (this.settlementState !== null && this.settlementState !== undefined) {
    output.writeFieldBegin('settlementState', Thrift.Type.I32, 21);
    output.writeI32(this.settlementState);
    output.writeFieldEnd();
  }
  if (this.postage !== null && this.postage !== undefined) {
    output.writeFieldBegin('postage', Thrift.Type.STRING, 22);
    output.writeString(this.postage);
    output.writeFieldEnd();
  }
  if (this.orderStateType !== null && this.orderStateType !== undefined) {
    output.writeFieldBegin('orderStateType', Thrift.Type.I32, 23);
    output.writeI32(this.orderStateType);
    output.writeFieldEnd();
  }
  if (this.orderStateTypeDesc !== null && this.orderStateTypeDesc !== undefined) {
    output.writeFieldBegin('orderStateTypeDesc', Thrift.Type.I32, 24);
    output.writeI32(this.orderStateTypeDesc);
    output.writeFieldEnd();
  }
  if (this.settlementTime !== null && this.settlementTime !== undefined) {
    output.writeFieldBegin('settlementTime', Thrift.Type.STRING, 25);
    output.writeString(this.settlementTime);
    output.writeFieldEnd();
  }
  if (this.orderTag !== null && this.orderTag !== undefined) {
    output.writeFieldBegin('orderTag', Thrift.Type.I32, 26);
    output.writeI32(this.orderTag);
    output.writeFieldEnd();
  }
  if (this.wi !== null && this.wi !== undefined) {
    output.writeFieldBegin('wi', Thrift.Type.STRING, 27);
    output.writeString(this.wi);
    output.writeFieldEnd();
  }
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.I32, 28);
    output.writeI32(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.tradePayId !== null && this.tradePayId !== undefined) {
    output.writeFieldBegin('tradePayId', Thrift.Type.STRING, 29);
    output.writeString(this.tradePayId);
    output.writeFieldEnd();
  }
  if (this.orderDeleteState !== null && this.orderDeleteState !== undefined) {
    output.writeFieldBegin('orderDeleteState', Thrift.Type.I32, 30);
    output.writeI32(this.orderDeleteState);
    output.writeFieldEnd();
  }
  if (this.exchangeScore !== null && this.exchangeScore !== undefined) {
    output.writeFieldBegin('exchangeScore', Thrift.Type.I32, 31);
    output.writeI32(this.exchangeScore);
    output.writeFieldEnd();
  }
  if (this.exchangeCash !== null && this.exchangeCash !== undefined) {
    output.writeFieldBegin('exchangeCash', Thrift.Type.STRING, 32);
    output.writeString(this.exchangeCash);
    output.writeFieldEnd();
  }
  if (this.orderBatch !== null && this.orderBatch !== undefined) {
    output.writeFieldBegin('orderBatch', Thrift.Type.STRING, 33);
    output.writeString(this.orderBatch);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 34);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 35);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter7 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter7))
      {
        iter7 = this.productList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.thirdScore !== null && this.thirdScore !== undefined) {
    output.writeFieldBegin('thirdScore', Thrift.Type.I32, 36);
    output.writeI32(this.thirdScore);
    output.writeFieldEnd();
  }
  if (this.postageExt !== null && this.postageExt !== undefined) {
    output.writeFieldBegin('postageExt', Thrift.Type.STRING, 37);
    output.writeString(this.postageExt);
    output.writeFieldEnd();
  }
  if (this.orderType !== null && this.orderType !== undefined) {
    output.writeFieldBegin('orderType', Thrift.Type.I32, 38);
    output.writeI32(this.orderType);
    output.writeFieldEnd();
  }
  if (this.thirdPrice !== null && this.thirdPrice !== undefined) {
    output.writeFieldBegin('thirdPrice', Thrift.Type.STRING, 39);
    output.writeString(this.thirdPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderQueryConditions = module.exports.OrderQueryConditions = function(args) {
  this.sellerId = null;
  this.productName = null;
  this.orderId = null;
  this.orderState = null;
  this.userName = null;
  this.mobile = null;
  this.orderType = null;
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  this.startTime = null;
  this.endTime = null;
  this.count = null;
  this.curPage = null;
  this.expressNo = null;
  this.expressId = null;
  this.nickName = null;
  this.productId = null;
  this.userId = null;
  this.sortRule = null;
  this.payTimeStart = null;
  this.payTimeEnd = null;
  this.deliverTimeStart = null;
  this.deliverTimeEnd = null;
  this.successTimeStart = null;
  this.successTimeEnd = null;
  this.lastUpdateTimeStart = null;
  this.lastUpdateTimeEnd = null;
  this.orderTag = null;
  this.deliverLimitTimeState = null;
  this.isHaveBuyerComment = null;
  this.isHaveSellerComment = null;
  this.downType = null;
  this.orderIds = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.orderState !== undefined) {
      this.orderState = args.orderState;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.orderType !== undefined) {
      this.orderType = args.orderType;
    }
    if (args.provinceId !== undefined) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined) {
      this.countyId = args.countyId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.curPage !== undefined) {
      this.curPage = args.curPage;
    }
    if (args.expressNo !== undefined) {
      this.expressNo = args.expressNo;
    }
    if (args.expressId !== undefined) {
      this.expressId = args.expressId;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.sortRule !== undefined) {
      this.sortRule = args.sortRule;
    }
    if (args.payTimeStart !== undefined) {
      this.payTimeStart = args.payTimeStart;
    }
    if (args.payTimeEnd !== undefined) {
      this.payTimeEnd = args.payTimeEnd;
    }
    if (args.deliverTimeStart !== undefined) {
      this.deliverTimeStart = args.deliverTimeStart;
    }
    if (args.deliverTimeEnd !== undefined) {
      this.deliverTimeEnd = args.deliverTimeEnd;
    }
    if (args.successTimeStart !== undefined) {
      this.successTimeStart = args.successTimeStart;
    }
    if (args.successTimeEnd !== undefined) {
      this.successTimeEnd = args.successTimeEnd;
    }
    if (args.lastUpdateTimeStart !== undefined) {
      this.lastUpdateTimeStart = args.lastUpdateTimeStart;
    }
    if (args.lastUpdateTimeEnd !== undefined) {
      this.lastUpdateTimeEnd = args.lastUpdateTimeEnd;
    }
    if (args.orderTag !== undefined) {
      this.orderTag = args.orderTag;
    }
    if (args.deliverLimitTimeState !== undefined) {
      this.deliverLimitTimeState = args.deliverLimitTimeState;
    }
    if (args.isHaveBuyerComment !== undefined) {
      this.isHaveBuyerComment = args.isHaveBuyerComment;
    }
    if (args.isHaveSellerComment !== undefined) {
      this.isHaveSellerComment = args.isHaveSellerComment;
    }
    if (args.downType !== undefined) {
      this.downType = args.downType;
    }
    if (args.orderIds !== undefined) {
      this.orderIds = args.orderIds;
    }
  }
};
OrderQueryConditions.prototype = {};
OrderQueryConditions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.orderState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.orderType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.curPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.expressNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.expressId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.sortRule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.payTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.payTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.deliverTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.deliverTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.successTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.successTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.I32) {
        this.orderTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I32) {
        this.deliverLimitTimeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.isHaveBuyerComment = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I32) {
        this.isHaveSellerComment = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I32) {
        this.downType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.orderIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.orderIds.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderQueryConditions.prototype.write = function(output) {
  output.writeStructBegin('OrderQueryConditions');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.orderState !== null && this.orderState !== undefined) {
    output.writeFieldBegin('orderState', Thrift.Type.I32, 4);
    output.writeI32(this.orderState);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 5);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 6);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.orderType !== null && this.orderType !== undefined) {
    output.writeFieldBegin('orderType', Thrift.Type.I32, 7);
    output.writeI32(this.orderType);
    output.writeFieldEnd();
  }
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 8);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 9);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 10);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 11);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 12);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 13);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.curPage !== null && this.curPage !== undefined) {
    output.writeFieldBegin('curPage', Thrift.Type.I32, 14);
    output.writeI32(this.curPage);
    output.writeFieldEnd();
  }
  if (this.expressNo !== null && this.expressNo !== undefined) {
    output.writeFieldBegin('expressNo', Thrift.Type.STRING, 15);
    output.writeString(this.expressNo);
    output.writeFieldEnd();
  }
  if (this.expressId !== null && this.expressId !== undefined) {
    output.writeFieldBegin('expressId', Thrift.Type.I32, 16);
    output.writeI32(this.expressId);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 17);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 18);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 19);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.sortRule !== null && this.sortRule !== undefined) {
    output.writeFieldBegin('sortRule', Thrift.Type.I32, 20);
    output.writeI32(this.sortRule);
    output.writeFieldEnd();
  }
  if (this.payTimeStart !== null && this.payTimeStart !== undefined) {
    output.writeFieldBegin('payTimeStart', Thrift.Type.STRING, 21);
    output.writeString(this.payTimeStart);
    output.writeFieldEnd();
  }
  if (this.payTimeEnd !== null && this.payTimeEnd !== undefined) {
    output.writeFieldBegin('payTimeEnd', Thrift.Type.STRING, 22);
    output.writeString(this.payTimeEnd);
    output.writeFieldEnd();
  }
  if (this.deliverTimeStart !== null && this.deliverTimeStart !== undefined) {
    output.writeFieldBegin('deliverTimeStart', Thrift.Type.STRING, 23);
    output.writeString(this.deliverTimeStart);
    output.writeFieldEnd();
  }
  if (this.deliverTimeEnd !== null && this.deliverTimeEnd !== undefined) {
    output.writeFieldBegin('deliverTimeEnd', Thrift.Type.STRING, 24);
    output.writeString(this.deliverTimeEnd);
    output.writeFieldEnd();
  }
  if (this.successTimeStart !== null && this.successTimeStart !== undefined) {
    output.writeFieldBegin('successTimeStart', Thrift.Type.STRING, 25);
    output.writeString(this.successTimeStart);
    output.writeFieldEnd();
  }
  if (this.successTimeEnd !== null && this.successTimeEnd !== undefined) {
    output.writeFieldBegin('successTimeEnd', Thrift.Type.STRING, 26);
    output.writeString(this.successTimeEnd);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTimeStart !== null && this.lastUpdateTimeStart !== undefined) {
    output.writeFieldBegin('lastUpdateTimeStart', Thrift.Type.STRING, 27);
    output.writeString(this.lastUpdateTimeStart);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTimeEnd !== null && this.lastUpdateTimeEnd !== undefined) {
    output.writeFieldBegin('lastUpdateTimeEnd', Thrift.Type.STRING, 28);
    output.writeString(this.lastUpdateTimeEnd);
    output.writeFieldEnd();
  }
  if (this.orderTag !== null && this.orderTag !== undefined) {
    output.writeFieldBegin('orderTag', Thrift.Type.I32, 29);
    output.writeI32(this.orderTag);
    output.writeFieldEnd();
  }
  if (this.deliverLimitTimeState !== null && this.deliverLimitTimeState !== undefined) {
    output.writeFieldBegin('deliverLimitTimeState', Thrift.Type.I32, 30);
    output.writeI32(this.deliverLimitTimeState);
    output.writeFieldEnd();
  }
  if (this.isHaveBuyerComment !== null && this.isHaveBuyerComment !== undefined) {
    output.writeFieldBegin('isHaveBuyerComment', Thrift.Type.I32, 31);
    output.writeI32(this.isHaveBuyerComment);
    output.writeFieldEnd();
  }
  if (this.isHaveSellerComment !== null && this.isHaveSellerComment !== undefined) {
    output.writeFieldBegin('isHaveSellerComment', Thrift.Type.I32, 32);
    output.writeI32(this.isHaveSellerComment);
    output.writeFieldEnd();
  }
  if (this.downType !== null && this.downType !== undefined) {
    output.writeFieldBegin('downType', Thrift.Type.I32, 33);
    output.writeI32(this.downType);
    output.writeFieldEnd();
  }
  if (this.orderIds !== null && this.orderIds !== undefined) {
    output.writeFieldBegin('orderIds', Thrift.Type.LIST, 34);
    output.writeListBegin(Thrift.Type.STRING, this.orderIds.length);
    for (var iter15 in this.orderIds)
    {
      if (this.orderIds.hasOwnProperty(iter15))
      {
        iter15 = this.orderIds[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderCount = module.exports.OrderCount = function(args) {
  this.orderState = null;
  this.count = null;
  if (args) {
    if (args.orderState !== undefined) {
      this.orderState = args.orderState;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
OrderCount.prototype = {};
OrderCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.orderState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderCount.prototype.write = function(output) {
  output.writeStructBegin('OrderCount');
  if (this.orderState !== null && this.orderState !== undefined) {
    output.writeFieldBegin('orderState', Thrift.Type.I32, 1);
    output.writeI32(this.orderState);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderProfilePage = module.exports.OrderProfilePage = function(args) {
  this.total = null;
  this.pageCount = null;
  this.count = null;
  this.curPage = null;
  this.orderProfileList = null;
  this.orderCountList = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.pageCount !== undefined) {
      this.pageCount = args.pageCount;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.curPage !== undefined) {
      this.curPage = args.curPage;
    }
    if (args.orderProfileList !== undefined) {
      this.orderProfileList = args.orderProfileList;
    }
    if (args.orderCountList !== undefined) {
      this.orderCountList = args.orderCountList;
    }
  }
};
OrderProfilePage.prototype = {};
OrderProfilePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.curPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.orderProfileList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Order();
          elem22.read(input);
          this.orderProfileList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.orderCountList = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new ttypes.OrderCount();
          elem29.read(input);
          this.orderCountList.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderProfilePage.prototype.write = function(output) {
  output.writeStructBegin('OrderProfilePage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.pageCount !== null && this.pageCount !== undefined) {
    output.writeFieldBegin('pageCount', Thrift.Type.I32, 2);
    output.writeI32(this.pageCount);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.curPage !== null && this.curPage !== undefined) {
    output.writeFieldBegin('curPage', Thrift.Type.I32, 4);
    output.writeI32(this.curPage);
    output.writeFieldEnd();
  }
  if (this.orderProfileList !== null && this.orderProfileList !== undefined) {
    output.writeFieldBegin('orderProfileList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.orderProfileList.length);
    for (var iter30 in this.orderProfileList)
    {
      if (this.orderProfileList.hasOwnProperty(iter30))
      {
        iter30 = this.orderProfileList[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.orderCountList !== null && this.orderCountList !== undefined) {
    output.writeFieldBegin('orderCountList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.orderCountList.length);
    for (var iter31 in this.orderCountList)
    {
      if (this.orderCountList.hasOwnProperty(iter31))
      {
        iter31 = this.orderCountList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderProfileResult = module.exports.OrderProfileResult = function(args) {
  this.result = null;
  this.orderProfilePage = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.orderProfilePage !== undefined) {
      this.orderProfilePage = args.orderProfilePage;
    }
  }
};
OrderProfileResult.prototype = {};
OrderProfileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.orderProfilePage = new ttypes.OrderProfilePage();
        this.orderProfilePage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderProfileResult.prototype.write = function(output) {
  output.writeStructBegin('OrderProfileResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.orderProfilePage !== null && this.orderProfilePage !== undefined) {
    output.writeFieldBegin('orderProfilePage', Thrift.Type.STRUCT, 2);
    this.orderProfilePage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderStateResult = module.exports.OrderStateResult = function(args) {
  this.result = null;
  this.orderCountList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.orderCountList !== undefined) {
      this.orderCountList = args.orderCountList;
    }
  }
};
OrderStateResult.prototype = {};
OrderStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.orderCountList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.OrderCount();
          elem38.read(input);
          this.orderCountList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderStateResult.prototype.write = function(output) {
  output.writeStructBegin('OrderStateResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.orderCountList !== null && this.orderCountList !== undefined) {
    output.writeFieldBegin('orderCountList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.orderCountList.length);
    for (var iter39 in this.orderCountList)
    {
      if (this.orderCountList.hasOwnProperty(iter39))
      {
        iter39 = this.orderCountList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartNotifyInfo = module.exports.ThirdPartNotifyInfo = function(args) {
  this.orderId = null;
  this.thirdId = null;
  this.handletime = null;
  this.state = null;
  this.desc = null;
  this.orderType = null;
  this.customerId = null;
  this.payTool = null;
  this.zheOrderId = null;
  this.amount = null;
  this.processtime = null;
  this.recvtime = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.thirdId !== undefined) {
      this.thirdId = args.thirdId;
    }
    if (args.handletime !== undefined) {
      this.handletime = args.handletime;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.orderType !== undefined) {
      this.orderType = args.orderType;
    }
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    }
    if (args.payTool !== undefined) {
      this.payTool = args.payTool;
    }
    if (args.zheOrderId !== undefined) {
      this.zheOrderId = args.zheOrderId;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.processtime !== undefined) {
      this.processtime = args.processtime;
    }
    if (args.recvtime !== undefined) {
      this.recvtime = args.recvtime;
    }
  }
};
ThirdPartNotifyInfo.prototype = {};
ThirdPartNotifyInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.thirdId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.handletime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.orderType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.payTool = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.zheOrderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.processtime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.recvtime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartNotifyInfo.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartNotifyInfo');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.thirdId !== null && this.thirdId !== undefined) {
    output.writeFieldBegin('thirdId', Thrift.Type.STRING, 2);
    output.writeString(this.thirdId);
    output.writeFieldEnd();
  }
  if (this.handletime !== null && this.handletime !== undefined) {
    output.writeFieldBegin('handletime', Thrift.Type.STRING, 3);
    output.writeString(this.handletime);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 5);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.orderType !== null && this.orderType !== undefined) {
    output.writeFieldBegin('orderType', Thrift.Type.STRING, 6);
    output.writeString(this.orderType);
    output.writeFieldEnd();
  }
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 7);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.payTool !== null && this.payTool !== undefined) {
    output.writeFieldBegin('payTool', Thrift.Type.STRING, 8);
    output.writeString(this.payTool);
    output.writeFieldEnd();
  }
  if (this.zheOrderId !== null && this.zheOrderId !== undefined) {
    output.writeFieldBegin('zheOrderId', Thrift.Type.STRING, 9);
    output.writeString(this.zheOrderId);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 10);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.processtime !== null && this.processtime !== undefined) {
    output.writeFieldBegin('processtime', Thrift.Type.STRING, 11);
    output.writeString(this.processtime);
    output.writeFieldEnd();
  }
  if (this.recvtime !== null && this.recvtime !== undefined) {
    output.writeFieldBegin('recvtime', Thrift.Type.STRING, 12);
    output.writeString(this.recvtime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OverSoldQueryConditions = module.exports.OverSoldQueryConditions = function(args) {
  this.orderId = null;
  this.sellerNick = null;
  this.handleState = null;
  this.handleType = null;
  this.page = null;
  this.perPage = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.sellerNick !== undefined) {
      this.sellerNick = args.sellerNick;
    }
    if (args.handleState !== undefined) {
      this.handleState = args.handleState;
    }
    if (args.handleType !== undefined) {
      this.handleType = args.handleType;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
    if (args.perPage !== undefined) {
      this.perPage = args.perPage;
    }
  }
};
OverSoldQueryConditions.prototype = {};
OverSoldQueryConditions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sellerNick = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.handleState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.handleType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.perPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OverSoldQueryConditions.prototype.write = function(output) {
  output.writeStructBegin('OverSoldQueryConditions');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.sellerNick !== null && this.sellerNick !== undefined) {
    output.writeFieldBegin('sellerNick', Thrift.Type.STRING, 2);
    output.writeString(this.sellerNick);
    output.writeFieldEnd();
  }
  if (this.handleState !== null && this.handleState !== undefined) {
    output.writeFieldBegin('handleState', Thrift.Type.I32, 3);
    output.writeI32(this.handleState);
    output.writeFieldEnd();
  }
  if (this.handleType !== null && this.handleType !== undefined) {
    output.writeFieldBegin('handleType', Thrift.Type.I32, 4);
    output.writeI32(this.handleType);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 5);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  if (this.perPage !== null && this.perPage !== undefined) {
    output.writeFieldBegin('perPage', Thrift.Type.I32, 6);
    output.writeI32(this.perPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderDetailResult = module.exports.OrderDetailResult = function(args) {
  this.result = null;
  this.order = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
  }
};
OrderDetailResult.prototype = {};
OrderDetailResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.order = new ttypes.Order();
        this.order.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderDetailResult.prototype.write = function(output) {
  output.writeStructBegin('OrderDetailResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRUCT, 2);
    this.order.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PayParam = module.exports.PayParam = function(args) {
  this.userId = null;
  this.orderIdList = null;
  this.payChannel = null;
  this.exchangeScore = null;
  this.exchangeCash = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderIdList !== undefined) {
      this.orderIdList = args.orderIdList;
    }
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.exchangeScore !== undefined) {
      this.exchangeScore = args.exchangeScore;
    }
    if (args.exchangeCash !== undefined) {
      this.exchangeCash = args.exchangeCash;
    }
  }
};
PayParam.prototype = {};
PayParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.orderIdList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.orderIdList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payChannel = new pay_ttypes.PayChannel();
        this.payChannel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.exchangeScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeCash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayParam.prototype.write = function(output) {
  output.writeStructBegin('PayParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderIdList !== null && this.orderIdList !== undefined) {
    output.writeFieldBegin('orderIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.orderIdList.length);
    for (var iter47 in this.orderIdList)
    {
      if (this.orderIdList.hasOwnProperty(iter47))
      {
        iter47 = this.orderIdList[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.STRUCT, 3);
    this.payChannel.write(output);
    output.writeFieldEnd();
  }
  if (this.exchangeScore !== null && this.exchangeScore !== undefined) {
    output.writeFieldBegin('exchangeScore', Thrift.Type.I32, 4);
    output.writeI32(this.exchangeScore);
    output.writeFieldEnd();
  }
  if (this.exchangeCash !== null && this.exchangeCash !== undefined) {
    output.writeFieldBegin('exchangeCash', Thrift.Type.STRING, 5);
    output.writeString(this.exchangeCash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PayState = module.exports.PayState = function(args) {
  this.payId = null;
  this.tokenId = null;
  this.retCode = null;
  this.cancelTime = null;
  if (args) {
    if (args.payId !== undefined) {
      this.payId = args.payId;
    }
    if (args.tokenId !== undefined) {
      this.tokenId = args.tokenId;
    }
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    }
    if (args.cancelTime !== undefined) {
      this.cancelTime = args.cancelTime;
    }
  }
};
PayState.prototype = {};
PayState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.cancelTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayState.prototype.write = function(output) {
  output.writeStructBegin('PayState');
  if (this.payId !== null && this.payId !== undefined) {
    output.writeFieldBegin('payId', Thrift.Type.STRING, 1);
    output.writeString(this.payId);
    output.writeFieldEnd();
  }
  if (this.tokenId !== null && this.tokenId !== undefined) {
    output.writeFieldBegin('tokenId', Thrift.Type.STRING, 2);
    output.writeString(this.tokenId);
    output.writeFieldEnd();
  }
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 3);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.cancelTime !== null && this.cancelTime !== undefined) {
    output.writeFieldBegin('cancelTime', Thrift.Type.I32, 4);
    output.writeI32(this.cancelTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PayStateResult = module.exports.PayStateResult = function(args) {
  this.result = null;
  this.payState = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.payState !== undefined) {
      this.payState = args.payState;
    }
  }
};
PayStateResult.prototype = {};
PayStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payState = new ttypes.PayState();
        this.payState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayStateResult.prototype.write = function(output) {
  output.writeStructBegin('PayStateResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.payState !== null && this.payState !== undefined) {
    output.writeFieldBegin('payState', Thrift.Type.STRUCT, 2);
    this.payState.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeliverVirParam = module.exports.DeliverVirParam = function(args) {
  this.sellerId = null;
  this.orderId = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
DeliverVirParam.prototype = {};
DeliverVirParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeliverVirParam.prototype.write = function(output) {
  output.writeStructBegin('DeliverVirParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchDeliverFailInfo = module.exports.BatchDeliverFailInfo = function(args) {
  this.index = null;
  this.orderId = null;
  this.desc = null;
  this.order = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
  }
};
BatchDeliverFailInfo.prototype = {};
BatchDeliverFailInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.order = new ttypes.Order();
        this.order.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchDeliverFailInfo.prototype.write = function(output) {
  output.writeStructBegin('BatchDeliverFailInfo');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 3);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRUCT, 4);
    this.order.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchDeliverResult = module.exports.BatchDeliverResult = function(args) {
  this.result = null;
  this.failInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.failInfo !== undefined) {
      this.failInfo = args.failInfo;
    }
  }
};
BatchDeliverResult.prototype = {};
BatchDeliverResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.failInfo = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.BatchDeliverFailInfo();
          elem54.read(input);
          this.failInfo.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchDeliverResult.prototype.write = function(output) {
  output.writeStructBegin('BatchDeliverResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.failInfo !== null && this.failInfo !== undefined) {
    output.writeFieldBegin('failInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failInfo.length);
    for (var iter55 in this.failInfo)
    {
      if (this.failInfo.hasOwnProperty(iter55))
      {
        iter55 = this.failInfo[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchDeliverParam = module.exports.BatchDeliverParam = function(args) {
  this.deliverType = null;
  this.orderList = null;
  this.fileName = null;
  this.fileKey = null;
  if (args) {
    if (args.deliverType !== undefined) {
      this.deliverType = args.deliverType;
    }
    if (args.orderList !== undefined) {
      this.orderList = args.orderList;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.fileKey !== undefined) {
      this.fileKey = args.fileKey;
    }
  }
};
BatchDeliverParam.prototype = {};
BatchDeliverParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deliverType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.orderList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Order();
          elem62.read(input);
          this.orderList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fileKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchDeliverParam.prototype.write = function(output) {
  output.writeStructBegin('BatchDeliverParam');
  if (this.deliverType !== null && this.deliverType !== undefined) {
    output.writeFieldBegin('deliverType', Thrift.Type.I32, 1);
    output.writeI32(this.deliverType);
    output.writeFieldEnd();
  }
  if (this.orderList !== null && this.orderList !== undefined) {
    output.writeFieldBegin('orderList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.orderList.length);
    for (var iter63 in this.orderList)
    {
      if (this.orderList.hasOwnProperty(iter63))
      {
        iter63 = this.orderList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.fileKey !== null && this.fileKey !== undefined) {
    output.writeFieldBegin('fileKey', Thrift.Type.STRING, 4);
    output.writeString(this.fileKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerBatchDeliverParam = module.exports.SellerBatchDeliverParam = function(args) {
  this.sellerId = null;
  this.deliverType = null;
  this.order = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.deliverType !== undefined) {
      this.deliverType = args.deliverType;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
  }
};
SellerBatchDeliverParam.prototype = {};
SellerBatchDeliverParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deliverType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.order = new ttypes.Order();
        this.order.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerBatchDeliverParam.prototype.write = function(output) {
  output.writeStructBegin('SellerBatchDeliverParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.deliverType !== null && this.deliverType !== undefined) {
    output.writeFieldBegin('deliverType', Thrift.Type.I32, 2);
    output.writeI32(this.deliverType);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRUCT, 3);
    this.order.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderSellerQueryParam = module.exports.OrderSellerQueryParam = function(args) {
  this.mobile = null;
  this.sellerId = null;
  this.orderId = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
OrderSellerQueryParam.prototype = {};
OrderSellerQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderSellerQueryParam.prototype.write = function(output) {
  output.writeStructBegin('OrderSellerQueryParam');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 2);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 4);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 5);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

