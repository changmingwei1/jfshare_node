//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
AfterSale = module.exports.AfterSale = function(args) {
  this.userId = null;
  this.sellerId = null;
  this.orderId = null;
  this.productId = null;
  this.type = null;
  this.reason = null;
  this.state = null;
  this.skuNum = null;
  this.userComment = null;
  this.applyTime = null;
  this.approveComment = null;
  this.approveTime = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.userComment !== undefined) {
      this.userComment = args.userComment;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.approveComment !== undefined) {
      this.approveComment = args.approveComment;
    }
    if (args.approveTime !== undefined) {
      this.approveTime = args.approveTime;
    }
  }
};
AfterSale.prototype = {};
AfterSale.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.userComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.applyTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.approveComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.approveTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AfterSale.prototype.write = function(output) {
  output.writeStructBegin('AfterSale');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 2);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 4);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 6);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 7);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 8);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.userComment !== null && this.userComment !== undefined) {
    output.writeFieldBegin('userComment', Thrift.Type.STRING, 9);
    output.writeString(this.userComment);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 10);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.approveComment !== null && this.approveComment !== undefined) {
    output.writeFieldBegin('approveComment', Thrift.Type.STRING, 11);
    output.writeString(this.approveComment);
    output.writeFieldEnd();
  }
  if (this.approveTime !== null && this.approveTime !== undefined) {
    output.writeFieldBegin('approveTime', Thrift.Type.STRING, 12);
    output.writeString(this.approveTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AfterSaleQueryParam = module.exports.AfterSaleQueryParam = function(args) {
  this.userId = null;
  this.sellerId = null;
  this.orderId = null;
  this.productId = null;
  this.type = null;
  this.state = null;
  this.skuNum = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
  }
};
AfterSaleQueryParam.prototype = {};
AfterSaleQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AfterSaleQueryParam.prototype.write = function(output) {
  output.writeStructBegin('AfterSaleQueryParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 2);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 4);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 6);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 7);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AfterSaleResult = module.exports.AfterSaleResult = function(args) {
  this.result = null;
  this.afterSaleList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.afterSaleList !== undefined) {
      this.afterSaleList = args.afterSaleList;
    }
  }
};
AfterSaleResult.prototype = {};
AfterSaleResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.afterSaleList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.AfterSale();
          elem6.read(input);
          this.afterSaleList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AfterSaleResult.prototype.write = function(output) {
  output.writeStructBegin('AfterSaleResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.afterSaleList !== null && this.afterSaleList !== undefined) {
    output.writeFieldBegin('afterSaleList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.afterSaleList.length);
    for (var iter7 in this.afterSaleList)
    {
      if (this.afterSaleList.hasOwnProperty(iter7))
      {
        iter7 = this.afterSaleList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AfterSaleOrder = module.exports.AfterSaleOrder = function(args) {
  this.userId = null;
  this.orderId = null;
  this.sellerId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
  }
};
AfterSaleOrder.prototype = {};
AfterSaleOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AfterSaleOrder.prototype.write = function(output) {
  output.writeStructBegin('AfterSaleOrder');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 3);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AfterSaleOrderResult = module.exports.AfterSaleOrderResult = function(args) {
  this.result = null;
  this.afterSaleOrders = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.afterSaleOrders !== undefined) {
      this.afterSaleOrders = args.afterSaleOrders;
    }
  }
};
AfterSaleOrderResult.prototype = {};
AfterSaleOrderResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.afterSaleOrders = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.AfterSaleOrder();
          elem14.read(input);
          this.afterSaleOrders.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AfterSaleOrderResult.prototype.write = function(output) {
  output.writeStructBegin('AfterSaleOrderResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.afterSaleOrders !== null && this.afterSaleOrders !== undefined) {
    output.writeFieldBegin('afterSaleOrders', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.afterSaleOrders.length);
    for (var iter15 in this.afterSaleOrders)
    {
      if (this.afterSaleOrders.hasOwnProperty(iter15))
      {
        iter15 = this.afterSaleOrders[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

