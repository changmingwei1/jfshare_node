//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
AreaInfo = module.exports.AreaInfo = function(args) {
  this.id = null;
  this.name = null;
  this.shortName = null;
  this.property = null;
  this.postCode = null;
  this.pinyin = null;
  this.initial = null;
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.shortName !== undefined && args.shortName !== null) {
      this.shortName = args.shortName;
    }
    if (args.property !== undefined && args.property !== null) {
      this.property = args.property;
    }
    if (args.postCode !== undefined && args.postCode !== null) {
      this.postCode = args.postCode;
    }
    if (args.pinyin !== undefined && args.pinyin !== null) {
      this.pinyin = args.pinyin;
    }
    if (args.initial !== undefined && args.initial !== null) {
      this.initial = args.initial;
    }
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
  }
};
AreaInfo.prototype = {};
AreaInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shortName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.postCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.pinyin = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.initial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AreaInfo.prototype.write = function(output) {
  output.writeStructBegin('AreaInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.shortName !== null && this.shortName !== undefined) {
    output.writeFieldBegin('shortName', Thrift.Type.STRING, 3);
    output.writeString(this.shortName);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 4);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.postCode !== null && this.postCode !== undefined) {
    output.writeFieldBegin('postCode', Thrift.Type.STRING, 5);
    output.writeString(this.postCode);
    output.writeFieldEnd();
  }
  if (this.pinyin !== null && this.pinyin !== undefined) {
    output.writeFieldBegin('pinyin', Thrift.Type.STRING, 6);
    output.writeString(this.pinyin);
    output.writeFieldEnd();
  }
  if (this.initial !== null && this.initial !== undefined) {
    output.writeFieldBegin('initial', Thrift.Type.STRING, 7);
    output.writeString(this.initial);
    output.writeFieldEnd();
  }
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 8);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 9);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 10);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Attribution = module.exports.Attribution = function(args) {
  this.provinceId = null;
  this.provinceName = null;
  this.cityId = null;
  this.cityName = null;
  this.countyId = null;
  this.countyName = null;
  this.shortProvinceName = null;
  this.shortCityName = null;
  this.shortCountyName = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.provinceName !== undefined && args.provinceName !== null) {
      this.provinceName = args.provinceName;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.cityName !== undefined && args.cityName !== null) {
      this.cityName = args.cityName;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
    if (args.countyName !== undefined && args.countyName !== null) {
      this.countyName = args.countyName;
    }
    if (args.shortProvinceName !== undefined && args.shortProvinceName !== null) {
      this.shortProvinceName = args.shortProvinceName;
    }
    if (args.shortCityName !== undefined && args.shortCityName !== null) {
      this.shortCityName = args.shortCityName;
    }
    if (args.shortCountyName !== undefined && args.shortCountyName !== null) {
      this.shortCountyName = args.shortCountyName;
    }
  }
};
Attribution.prototype = {};
Attribution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.countyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.shortProvinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.shortCityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.shortCountyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attribution.prototype.write = function(output) {
  output.writeStructBegin('Attribution');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 2);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 3);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 4);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 5);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  if (this.countyName !== null && this.countyName !== undefined) {
    output.writeFieldBegin('countyName', Thrift.Type.STRING, 6);
    output.writeString(this.countyName);
    output.writeFieldEnd();
  }
  if (this.shortProvinceName !== null && this.shortProvinceName !== undefined) {
    output.writeFieldBegin('shortProvinceName', Thrift.Type.STRING, 7);
    output.writeString(this.shortProvinceName);
    output.writeFieldEnd();
  }
  if (this.shortCityName !== null && this.shortCityName !== undefined) {
    output.writeFieldBegin('shortCityName', Thrift.Type.STRING, 8);
    output.writeString(this.shortCityName);
    output.writeFieldEnd();
  }
  if (this.shortCountyName !== null && this.shortCountyName !== undefined) {
    output.writeFieldBegin('shortCountyName', Thrift.Type.STRING, 9);
    output.writeString(this.shortCountyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributionOperator = module.exports.AttributionOperator = function(args) {
  this.provinceId = null;
  this.provinceName = null;
  this.cityId = null;
  this.cityName = null;
  this.operator = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.provinceName !== undefined && args.provinceName !== null) {
      this.provinceName = args.provinceName;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.cityName !== undefined && args.cityName !== null) {
      this.cityName = args.cityName;
    }
    if (args.operator !== undefined && args.operator !== null) {
      this.operator = args.operator;
    }
  }
};
AttributionOperator.prototype = {};
AttributionOperator.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributionOperator.prototype.write = function(output) {
  output.writeStructBegin('AttributionOperator');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 2);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 3);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 4);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 5);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributionId = module.exports.AttributionId = function(args) {
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
  }
};
AttributionId.prototype = {};
AttributionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributionId.prototype.write = function(output) {
  output.writeStructBegin('AttributionId');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 2);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 3);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AreaInfoResult = module.exports.AreaInfoResult = function(args) {
  this.result = null;
  this.areaInfo = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.areaInfo !== undefined && args.areaInfo !== null) {
      this.areaInfo = Thrift.copyList(args.areaInfo, [ttypes.AreaInfo]);
    }
  }
};
AreaInfoResult.prototype = {};
AreaInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.areaInfo = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.AreaInfo();
          elem6.read(input);
          this.areaInfo.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AreaInfoResult.prototype.write = function(output) {
  output.writeStructBegin('AreaInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.areaInfo !== null && this.areaInfo !== undefined) {
    output.writeFieldBegin('areaInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.areaInfo.length);
    for (var iter7 in this.areaInfo)
    {
      if (this.areaInfo.hasOwnProperty(iter7))
      {
        iter7 = this.areaInfo[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributionResult = module.exports.AttributionResult = function(args) {
  this.result = null;
  this.areaInfo = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.areaInfo !== undefined && args.areaInfo !== null) {
      this.areaInfo = new ttypes.Attribution(args.areaInfo);
    }
  }
};
AttributionResult.prototype = {};
AttributionResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.areaInfo = new ttypes.Attribution();
        this.areaInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributionResult.prototype.write = function(output) {
  output.writeStructBegin('AttributionResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.areaInfo !== null && this.areaInfo !== undefined) {
    output.writeFieldBegin('areaInfo', Thrift.Type.STRUCT, 2);
    this.areaInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributionOperatorResult = module.exports.AttributionOperatorResult = function(args) {
  this.result = null;
  this.attributionOperator = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.attributionOperator !== undefined && args.attributionOperator !== null) {
      this.attributionOperator = new ttypes.AttributionOperator(args.attributionOperator);
    }
  }
};
AttributionOperatorResult.prototype = {};
AttributionOperatorResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributionOperator = new ttypes.AttributionOperator();
        this.attributionOperator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributionOperatorResult.prototype.write = function(output) {
  output.writeStructBegin('AttributionOperatorResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.attributionOperator !== null && this.attributionOperator !== undefined) {
    output.writeFieldBegin('attributionOperator', Thrift.Type.STRUCT, 2);
    this.attributionOperator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributionIdResult = module.exports.AttributionIdResult = function(args) {
  this.result = null;
  this.attributionId = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.attributionId !== undefined && args.attributionId !== null) {
      this.attributionId = new ttypes.AttributionId(args.attributionId);
    }
  }
};
AttributionIdResult.prototype = {};
AttributionIdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributionId = new ttypes.AttributionId();
        this.attributionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributionIdResult.prototype.write = function(output) {
  output.writeStructBegin('AttributionIdResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.attributionId !== null && this.attributionId !== undefined) {
    output.writeFieldBegin('attributionId', Thrift.Type.STRUCT, 2);
    this.attributionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Captcha = module.exports.Captcha = function(args) {
  this.id = null;
  this.value = null;
  this.captchaBytes = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.captchaBytes !== undefined && args.captchaBytes !== null) {
      this.captchaBytes = args.captchaBytes;
    }
  }
};
Captcha.prototype = {};
Captcha.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.captchaBytes = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Captcha.prototype.write = function(output) {
  output.writeStructBegin('Captcha');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.captchaBytes !== null && this.captchaBytes !== undefined) {
    output.writeFieldBegin('captchaBytes', Thrift.Type.STRING, 3);
    output.writeBinary(this.captchaBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CaptchaResult = module.exports.CaptchaResult = function(args) {
  this.result = null;
  this.captcha = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.captcha !== undefined && args.captcha !== null) {
      this.captcha = new ttypes.Captcha(args.captcha);
    }
  }
};
CaptchaResult.prototype = {};
CaptchaResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.captcha = new ttypes.Captcha();
        this.captcha.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CaptchaResult.prototype.write = function(output) {
  output.writeStructBegin('CaptchaResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.captcha !== null && this.captcha !== undefined) {
    output.writeFieldBegin('captcha', Thrift.Type.STRUCT, 2);
    this.captcha.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MsgCaptcha = module.exports.MsgCaptcha = function(args) {
  this.type = null;
  this.mobile = null;
  this.captchaDesc = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.mobile !== undefined && args.mobile !== null) {
      this.mobile = args.mobile;
    }
    if (args.captchaDesc !== undefined && args.captchaDesc !== null) {
      this.captchaDesc = args.captchaDesc;
    }
  }
};
MsgCaptcha.prototype = {};
MsgCaptcha.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.captchaDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MsgCaptcha.prototype.write = function(output) {
  output.writeStructBegin('MsgCaptcha');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.captchaDesc !== null && this.captchaDesc !== undefined) {
    output.writeFieldBegin('captchaDesc', Thrift.Type.STRING, 3);
    output.writeString(this.captchaDesc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

