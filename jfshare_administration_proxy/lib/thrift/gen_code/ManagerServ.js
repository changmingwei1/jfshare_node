//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var slotImage_ttypes = require('./slotImage_types')
var result_ttypes = require('./result_types')


var ttypes = require('./manager_types');
//HELPER FUNCTIONS AND STRUCTURES

ManagerServ_logProductOpt_args = function(args) {
  this.productOpt = null;
  if (args) {
    if (args.productOpt !== undefined && args.productOpt !== null) {
      this.productOpt = new ttypes.ProductOpt(args.productOpt);
    }
  }
};
ManagerServ_logProductOpt_args.prototype = {};
ManagerServ_logProductOpt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.productOpt = new ttypes.ProductOpt();
        this.productOpt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_logProductOpt_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_logProductOpt_args');
  if (this.productOpt !== null && this.productOpt !== undefined) {
    output.writeFieldBegin('productOpt', Thrift.Type.STRUCT, 1);
    this.productOpt.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_logProductOpt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_logProductOpt_result.prototype = {};
ManagerServ_logProductOpt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_logProductOpt_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_logProductOpt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_queryProductOptRecords_args = function(args) {
  this.conditions = null;
  if (args) {
    if (args.conditions !== undefined && args.conditions !== null) {
      this.conditions = new ttypes.QueryConditions(args.conditions);
    }
  }
};
ManagerServ_queryProductOptRecords_args.prototype = {};
ManagerServ_queryProductOptRecords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.QueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_queryProductOptRecords_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_queryProductOptRecords_args');
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 1);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_queryProductOptRecords_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductOptResult(args.success);
    }
  }
};
ManagerServ_queryProductOptRecords_result.prototype = {};
ManagerServ_queryProductOptRecords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductOptResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_queryProductOptRecords_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_queryProductOptRecords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_isLoginNameExist_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined && args.loginName !== null) {
      this.loginName = args.loginName;
    }
  }
};
ManagerServ_isLoginNameExist_args.prototype = {};
ManagerServ_isLoginNameExist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_isLoginNameExist_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_isLoginNameExist_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_isLoginNameExist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.BoolResult(args.success);
    }
  }
};
ManagerServ_isLoginNameExist_result.prototype = {};
ManagerServ_isLoginNameExist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.BoolResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_isLoginNameExist_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_isLoginNameExist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_signup_args = function(args) {
  this.cs = null;
  if (args) {
    if (args.cs !== undefined && args.cs !== null) {
      this.cs = new ttypes.Commissioner(args.cs);
    }
  }
};
ManagerServ_signup_args.prototype = {};
ManagerServ_signup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cs = new ttypes.Commissioner();
        this.cs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_signup_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_signup_args');
  if (this.cs !== null && this.cs !== undefined) {
    output.writeFieldBegin('cs', Thrift.Type.STRUCT, 1);
    this.cs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_signup_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_signup_result.prototype = {};
ManagerServ_signup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_signup_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_signup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_signin_args = function(args) {
  this.cs = null;
  this.loginLog = null;
  if (args) {
    if (args.cs !== undefined && args.cs !== null) {
      this.cs = new ttypes.Commissioner(args.cs);
    }
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
ManagerServ_signin_args.prototype = {};
ManagerServ_signin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cs = new ttypes.Commissioner();
        this.cs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_signin_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_signin_args');
  if (this.cs !== null && this.cs !== undefined) {
    output.writeFieldBegin('cs', Thrift.Type.STRUCT, 1);
    this.cs.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_signin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CommissionerResult(args.success);
    }
  }
};
ManagerServ_signin_result.prototype = {};
ManagerServ_signin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CommissionerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_signin_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_signin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_signout_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
ManagerServ_signout_args.prototype = {};
ManagerServ_signout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_signout_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_signout_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_signout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_signout_result.prototype = {};
ManagerServ_signout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_signout_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_signout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_isOnline_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
ManagerServ_isOnline_args.prototype = {};
ManagerServ_isOnline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_isOnline_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_isOnline_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_isOnline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CommissionerResult(args.success);
    }
  }
};
ManagerServ_isOnline_result.prototype = {};
ManagerServ_isOnline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CommissionerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_isOnline_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_isOnline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_saveSlotImage_args = function(args) {
  this.slotImage = null;
  if (args) {
    if (args.slotImage !== undefined && args.slotImage !== null) {
      this.slotImage = new slotImage_ttypes.SlotImage(args.slotImage);
    }
  }
};
ManagerServ_saveSlotImage_args.prototype = {};
ManagerServ_saveSlotImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new slotImage_ttypes.SlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_saveSlotImage_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_saveSlotImage_args');
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 1);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_saveSlotImage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.StringResult(args.success);
    }
  }
};
ManagerServ_saveSlotImage_result.prototype = {};
ManagerServ_saveSlotImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_saveSlotImage_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_saveSlotImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_updateSlotImage_args = function(args) {
  this.slotImage = null;
  if (args) {
    if (args.slotImage !== undefined && args.slotImage !== null) {
      this.slotImage = new slotImage_ttypes.SlotImage(args.slotImage);
    }
  }
};
ManagerServ_updateSlotImage_args.prototype = {};
ManagerServ_updateSlotImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new slotImage_ttypes.SlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_updateSlotImage_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_updateSlotImage_args');
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 1);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_updateSlotImage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.StringResult(args.success);
    }
  }
};
ManagerServ_updateSlotImage_result.prototype = {};
ManagerServ_updateSlotImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_updateSlotImage_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_updateSlotImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_querySlotImageList_args = function(args) {
  this.querySlotImageParam = null;
  if (args) {
    if (args.querySlotImageParam !== undefined && args.querySlotImageParam !== null) {
      this.querySlotImageParam = new slotImage_ttypes.QuerySlotImageParam(args.querySlotImageParam);
    }
  }
};
ManagerServ_querySlotImageList_args.prototype = {};
ManagerServ_querySlotImageList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.querySlotImageParam = new slotImage_ttypes.QuerySlotImageParam();
        this.querySlotImageParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_querySlotImageList_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_querySlotImageList_args');
  if (this.querySlotImageParam !== null && this.querySlotImageParam !== undefined) {
    output.writeFieldBegin('querySlotImageParam', Thrift.Type.STRUCT, 1);
    this.querySlotImageParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_querySlotImageList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new slotImage_ttypes.QuerySlotImageResult(args.success);
    }
  }
};
ManagerServ_querySlotImageList_result.prototype = {};
ManagerServ_querySlotImageList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new slotImage_ttypes.QuerySlotImageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_querySlotImageList_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_querySlotImageList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_querySlotImageOne_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ManagerServ_querySlotImageOne_args.prototype = {};
ManagerServ_querySlotImageOne_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_querySlotImageOne_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_querySlotImageOne_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_querySlotImageOne_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new slotImage_ttypes.QuerySlotImageResult(args.success);
    }
  }
};
ManagerServ_querySlotImageOne_result.prototype = {};
ManagerServ_querySlotImageOne_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new slotImage_ttypes.QuerySlotImageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_querySlotImageOne_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_querySlotImageOne_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_saveAdvertSlotImage_args = function(args) {
  this.slotImage = null;
  if (args) {
    if (args.slotImage !== undefined && args.slotImage !== null) {
      this.slotImage = new ttypes.AdvertSlotImage(args.slotImage);
    }
  }
};
ManagerServ_saveAdvertSlotImage_args.prototype = {};
ManagerServ_saveAdvertSlotImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new ttypes.AdvertSlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_saveAdvertSlotImage_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_saveAdvertSlotImage_args');
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 1);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_saveAdvertSlotImage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_saveAdvertSlotImage_result.prototype = {};
ManagerServ_saveAdvertSlotImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_saveAdvertSlotImage_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_saveAdvertSlotImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_updateAdvertSlotImage_args = function(args) {
  this.slotImage = null;
  if (args) {
    if (args.slotImage !== undefined && args.slotImage !== null) {
      this.slotImage = new ttypes.AdvertSlotImage(args.slotImage);
    }
  }
};
ManagerServ_updateAdvertSlotImage_args.prototype = {};
ManagerServ_updateAdvertSlotImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new ttypes.AdvertSlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_updateAdvertSlotImage_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_updateAdvertSlotImage_args');
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 1);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_updateAdvertSlotImage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_updateAdvertSlotImage_result.prototype = {};
ManagerServ_updateAdvertSlotImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_updateAdvertSlotImage_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_updateAdvertSlotImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImageList_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.AdvertSlotImageParam(args.param);
    }
  }
};
ManagerServ_queryAdvertSlotImageList_args.prototype = {};
ManagerServ_queryAdvertSlotImageList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.AdvertSlotImageParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImageList_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_queryAdvertSlotImageList_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImageList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AdvertSlotImageListResult(args.success);
    }
  }
};
ManagerServ_queryAdvertSlotImageList_result.prototype = {};
ManagerServ_queryAdvertSlotImageList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AdvertSlotImageListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImageList_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_queryAdvertSlotImageList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImage_args = function(args) {
  this.slotImage = null;
  if (args) {
    if (args.slotImage !== undefined && args.slotImage !== null) {
      this.slotImage = new ttypes.AdvertSlotImage(args.slotImage);
    }
  }
};
ManagerServ_queryAdvertSlotImage_args.prototype = {};
ManagerServ_queryAdvertSlotImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new ttypes.AdvertSlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImage_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_queryAdvertSlotImage_args');
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 1);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AdvertSlotImageResult(args.success);
    }
  }
};
ManagerServ_queryAdvertSlotImage_result.prototype = {};
ManagerServ_queryAdvertSlotImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AdvertSlotImageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_queryAdvertSlotImage_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_queryAdvertSlotImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_deleteAdvertSlotImage_args = function(args) {
  this.slotImage = null;
  if (args) {
    if (args.slotImage !== undefined && args.slotImage !== null) {
      this.slotImage = new ttypes.AdvertSlotImage(args.slotImage);
    }
  }
};
ManagerServ_deleteAdvertSlotImage_args.prototype = {};
ManagerServ_deleteAdvertSlotImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new ttypes.AdvertSlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_deleteAdvertSlotImage_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_deleteAdvertSlotImage_args');
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 1);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_deleteAdvertSlotImage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_deleteAdvertSlotImage_result.prototype = {};
ManagerServ_deleteAdvertSlotImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_deleteAdvertSlotImage_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_deleteAdvertSlotImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_publishAdvertSlot_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.AdvertSlotImageListParam(args.param);
    }
  }
};
ManagerServ_publishAdvertSlot_args.prototype = {};
ManagerServ_publishAdvertSlot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.AdvertSlotImageListParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_publishAdvertSlot_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_publishAdvertSlot_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServ_publishAdvertSlot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
ManagerServ_publishAdvertSlot_result.prototype = {};
ManagerServ_publishAdvertSlot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerServ_publishAdvertSlot_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerServ_publishAdvertSlot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ManagerServClient.prototype = {};
ManagerServClient.prototype.seqid = function() { return this._seqid; }
ManagerServClient.prototype.new_seqid = function() { return this._seqid += 1; }
ManagerServClient.prototype.logProductOpt = function(productOpt, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logProductOpt(productOpt);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logProductOpt(productOpt);
  }
};

ManagerServClient.prototype.send_logProductOpt = function(productOpt) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logProductOpt', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_logProductOpt_args();
  args.productOpt = productOpt;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_logProductOpt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_logProductOpt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('logProductOpt failed: unknown result');
};
ManagerServClient.prototype.queryProductOptRecords = function(conditions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryProductOptRecords(conditions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryProductOptRecords(conditions);
  }
};

ManagerServClient.prototype.send_queryProductOptRecords = function(conditions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProductOptRecords', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_queryProductOptRecords_args();
  args.conditions = conditions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_queryProductOptRecords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_queryProductOptRecords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProductOptRecords failed: unknown result');
};
ManagerServClient.prototype.isLoginNameExist = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isLoginNameExist(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isLoginNameExist(loginName);
  }
};

ManagerServClient.prototype.send_isLoginNameExist = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isLoginNameExist', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_isLoginNameExist_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_isLoginNameExist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_isLoginNameExist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isLoginNameExist failed: unknown result');
};
ManagerServClient.prototype.signup = function(cs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signup(cs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signup(cs);
  }
};

ManagerServClient.prototype.send_signup = function(cs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signup', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_signup_args();
  args.cs = cs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_signup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_signup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signup failed: unknown result');
};
ManagerServClient.prototype.signin = function(cs, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signin(cs, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signin(cs, loginLog);
  }
};

ManagerServClient.prototype.send_signin = function(cs, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signin', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_signin_args();
  args.cs = cs;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_signin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_signin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signin failed: unknown result');
};
ManagerServClient.prototype.signout = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signout(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signout(loginLog);
  }
};

ManagerServClient.prototype.send_signout = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signout', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_signout_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_signout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_signout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signout failed: unknown result');
};
ManagerServClient.prototype.isOnline = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isOnline(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isOnline(loginLog);
  }
};

ManagerServClient.prototype.send_isOnline = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isOnline', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_isOnline_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_isOnline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_isOnline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isOnline failed: unknown result');
};
ManagerServClient.prototype.saveSlotImage = function(slotImage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveSlotImage(slotImage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveSlotImage(slotImage);
  }
};

ManagerServClient.prototype.send_saveSlotImage = function(slotImage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveSlotImage', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_saveSlotImage_args();
  args.slotImage = slotImage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_saveSlotImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_saveSlotImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveSlotImage failed: unknown result');
};
ManagerServClient.prototype.updateSlotImage = function(slotImage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSlotImage(slotImage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSlotImage(slotImage);
  }
};

ManagerServClient.prototype.send_updateSlotImage = function(slotImage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSlotImage', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_updateSlotImage_args();
  args.slotImage = slotImage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_updateSlotImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_updateSlotImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSlotImage failed: unknown result');
};
ManagerServClient.prototype.querySlotImageList = function(querySlotImageParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySlotImageList(querySlotImageParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySlotImageList(querySlotImageParam);
  }
};

ManagerServClient.prototype.send_querySlotImageList = function(querySlotImageParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySlotImageList', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_querySlotImageList_args();
  args.querySlotImageParam = querySlotImageParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_querySlotImageList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_querySlotImageList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySlotImageList failed: unknown result');
};
ManagerServClient.prototype.querySlotImageOne = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySlotImageOne(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySlotImageOne(id);
  }
};

ManagerServClient.prototype.send_querySlotImageOne = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySlotImageOne', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_querySlotImageOne_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_querySlotImageOne = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_querySlotImageOne_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySlotImageOne failed: unknown result');
};
ManagerServClient.prototype.saveAdvertSlotImage = function(slotImage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveAdvertSlotImage(slotImage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveAdvertSlotImage(slotImage);
  }
};

ManagerServClient.prototype.send_saveAdvertSlotImage = function(slotImage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveAdvertSlotImage', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_saveAdvertSlotImage_args();
  args.slotImage = slotImage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_saveAdvertSlotImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_saveAdvertSlotImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveAdvertSlotImage failed: unknown result');
};
ManagerServClient.prototype.updateAdvertSlotImage = function(slotImage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateAdvertSlotImage(slotImage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateAdvertSlotImage(slotImage);
  }
};

ManagerServClient.prototype.send_updateAdvertSlotImage = function(slotImage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateAdvertSlotImage', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_updateAdvertSlotImage_args();
  args.slotImage = slotImage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_updateAdvertSlotImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_updateAdvertSlotImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateAdvertSlotImage failed: unknown result');
};
ManagerServClient.prototype.queryAdvertSlotImageList = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryAdvertSlotImageList(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryAdvertSlotImageList(param);
  }
};

ManagerServClient.prototype.send_queryAdvertSlotImageList = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryAdvertSlotImageList', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_queryAdvertSlotImageList_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_queryAdvertSlotImageList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_queryAdvertSlotImageList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryAdvertSlotImageList failed: unknown result');
};
ManagerServClient.prototype.queryAdvertSlotImage = function(slotImage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryAdvertSlotImage(slotImage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryAdvertSlotImage(slotImage);
  }
};

ManagerServClient.prototype.send_queryAdvertSlotImage = function(slotImage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryAdvertSlotImage', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_queryAdvertSlotImage_args();
  args.slotImage = slotImage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_queryAdvertSlotImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_queryAdvertSlotImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryAdvertSlotImage failed: unknown result');
};
ManagerServClient.prototype.deleteAdvertSlotImage = function(slotImage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAdvertSlotImage(slotImage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAdvertSlotImage(slotImage);
  }
};

ManagerServClient.prototype.send_deleteAdvertSlotImage = function(slotImage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAdvertSlotImage', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_deleteAdvertSlotImage_args();
  args.slotImage = slotImage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_deleteAdvertSlotImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_deleteAdvertSlotImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteAdvertSlotImage failed: unknown result');
};
ManagerServClient.prototype.publishAdvertSlot = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_publishAdvertSlot(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_publishAdvertSlot(param);
  }
};

ManagerServClient.prototype.send_publishAdvertSlot = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('publishAdvertSlot', Thrift.MessageType.CALL, this.seqid());
  var args = new ManagerServ_publishAdvertSlot_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServClient.prototype.recv_publishAdvertSlot = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerServ_publishAdvertSlot_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('publishAdvertSlot failed: unknown result');
};
ManagerServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ManagerServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ManagerServProcessor.prototype.process_logProductOpt = function(seqid, input, output) {
  var args = new ManagerServ_logProductOpt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logProductOpt.length === 1) {
    Q.fcall(this._handler.logProductOpt, args.productOpt)
      .then(function(result) {
        var result = new ManagerServ_logProductOpt_result({success: result});
        output.writeMessageBegin("logProductOpt", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logProductOpt", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.logProductOpt(args.productOpt, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_logProductOpt_result((err != null ? err : {success: result}));
        output.writeMessageBegin("logProductOpt", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logProductOpt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_queryProductOptRecords = function(seqid, input, output) {
  var args = new ManagerServ_queryProductOptRecords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryProductOptRecords.length === 1) {
    Q.fcall(this._handler.queryProductOptRecords, args.conditions)
      .then(function(result) {
        var result = new ManagerServ_queryProductOptRecords_result({success: result});
        output.writeMessageBegin("queryProductOptRecords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryProductOptRecords", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryProductOptRecords(args.conditions, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_queryProductOptRecords_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryProductOptRecords", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryProductOptRecords", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_isLoginNameExist = function(seqid, input, output) {
  var args = new ManagerServ_isLoginNameExist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isLoginNameExist.length === 1) {
    Q.fcall(this._handler.isLoginNameExist, args.loginName)
      .then(function(result) {
        var result = new ManagerServ_isLoginNameExist_result({success: result});
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isLoginNameExist(args.loginName, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_isLoginNameExist_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_signup = function(seqid, input, output) {
  var args = new ManagerServ_signup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signup.length === 1) {
    Q.fcall(this._handler.signup, args.cs)
      .then(function(result) {
        var result = new ManagerServ_signup_result({success: result});
        output.writeMessageBegin("signup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signup", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signup(args.cs, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_signup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("signup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_signin = function(seqid, input, output) {
  var args = new ManagerServ_signin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signin.length === 2) {
    Q.fcall(this._handler.signin, args.cs, args.loginLog)
      .then(function(result) {
        var result = new ManagerServ_signin_result({success: result});
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signin", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signin(args.cs, args.loginLog, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_signin_result((err != null ? err : {success: result}));
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_signout = function(seqid, input, output) {
  var args = new ManagerServ_signout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signout.length === 1) {
    Q.fcall(this._handler.signout, args.loginLog)
      .then(function(result) {
        var result = new ManagerServ_signout_result({success: result});
        output.writeMessageBegin("signout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signout", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signout(args.loginLog, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_signout_result((err != null ? err : {success: result}));
        output.writeMessageBegin("signout", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_isOnline = function(seqid, input, output) {
  var args = new ManagerServ_isOnline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isOnline.length === 1) {
    Q.fcall(this._handler.isOnline, args.loginLog)
      .then(function(result) {
        var result = new ManagerServ_isOnline_result({success: result});
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isOnline", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isOnline(args.loginLog, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_isOnline_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isOnline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_saveSlotImage = function(seqid, input, output) {
  var args = new ManagerServ_saveSlotImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveSlotImage.length === 1) {
    Q.fcall(this._handler.saveSlotImage, args.slotImage)
      .then(function(result) {
        var result = new ManagerServ_saveSlotImage_result({success: result});
        output.writeMessageBegin("saveSlotImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveSlotImage", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveSlotImage(args.slotImage, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_saveSlotImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("saveSlotImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveSlotImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_updateSlotImage = function(seqid, input, output) {
  var args = new ManagerServ_updateSlotImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSlotImage.length === 1) {
    Q.fcall(this._handler.updateSlotImage, args.slotImage)
      .then(function(result) {
        var result = new ManagerServ_updateSlotImage_result({success: result});
        output.writeMessageBegin("updateSlotImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSlotImage", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSlotImage(args.slotImage, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_updateSlotImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateSlotImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSlotImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_querySlotImageList = function(seqid, input, output) {
  var args = new ManagerServ_querySlotImageList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySlotImageList.length === 1) {
    Q.fcall(this._handler.querySlotImageList, args.querySlotImageParam)
      .then(function(result) {
        var result = new ManagerServ_querySlotImageList_result({success: result});
        output.writeMessageBegin("querySlotImageList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySlotImageList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySlotImageList(args.querySlotImageParam, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_querySlotImageList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("querySlotImageList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySlotImageList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_querySlotImageOne = function(seqid, input, output) {
  var args = new ManagerServ_querySlotImageOne_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySlotImageOne.length === 1) {
    Q.fcall(this._handler.querySlotImageOne, args.id)
      .then(function(result) {
        var result = new ManagerServ_querySlotImageOne_result({success: result});
        output.writeMessageBegin("querySlotImageOne", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySlotImageOne", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySlotImageOne(args.id, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_querySlotImageOne_result((err != null ? err : {success: result}));
        output.writeMessageBegin("querySlotImageOne", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySlotImageOne", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_saveAdvertSlotImage = function(seqid, input, output) {
  var args = new ManagerServ_saveAdvertSlotImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveAdvertSlotImage.length === 1) {
    Q.fcall(this._handler.saveAdvertSlotImage, args.slotImage)
      .then(function(result) {
        var result = new ManagerServ_saveAdvertSlotImage_result({success: result});
        output.writeMessageBegin("saveAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveAdvertSlotImage(args.slotImage, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_saveAdvertSlotImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("saveAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_updateAdvertSlotImage = function(seqid, input, output) {
  var args = new ManagerServ_updateAdvertSlotImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateAdvertSlotImage.length === 1) {
    Q.fcall(this._handler.updateAdvertSlotImage, args.slotImage)
      .then(function(result) {
        var result = new ManagerServ_updateAdvertSlotImage_result({success: result});
        output.writeMessageBegin("updateAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateAdvertSlotImage(args.slotImage, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_updateAdvertSlotImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_queryAdvertSlotImageList = function(seqid, input, output) {
  var args = new ManagerServ_queryAdvertSlotImageList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryAdvertSlotImageList.length === 1) {
    Q.fcall(this._handler.queryAdvertSlotImageList, args.param)
      .then(function(result) {
        var result = new ManagerServ_queryAdvertSlotImageList_result({success: result});
        output.writeMessageBegin("queryAdvertSlotImageList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryAdvertSlotImageList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryAdvertSlotImageList(args.param, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_queryAdvertSlotImageList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryAdvertSlotImageList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryAdvertSlotImageList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_queryAdvertSlotImage = function(seqid, input, output) {
  var args = new ManagerServ_queryAdvertSlotImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryAdvertSlotImage.length === 1) {
    Q.fcall(this._handler.queryAdvertSlotImage, args.slotImage)
      .then(function(result) {
        var result = new ManagerServ_queryAdvertSlotImage_result({success: result});
        output.writeMessageBegin("queryAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryAdvertSlotImage(args.slotImage, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_queryAdvertSlotImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_deleteAdvertSlotImage = function(seqid, input, output) {
  var args = new ManagerServ_deleteAdvertSlotImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAdvertSlotImage.length === 1) {
    Q.fcall(this._handler.deleteAdvertSlotImage, args.slotImage)
      .then(function(result) {
        var result = new ManagerServ_deleteAdvertSlotImage_result({success: result});
        output.writeMessageBegin("deleteAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAdvertSlotImage(args.slotImage, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_deleteAdvertSlotImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteAdvertSlotImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAdvertSlotImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ManagerServProcessor.prototype.process_publishAdvertSlot = function(seqid, input, output) {
  var args = new ManagerServ_publishAdvertSlot_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.publishAdvertSlot.length === 1) {
    Q.fcall(this._handler.publishAdvertSlot, args.param)
      .then(function(result) {
        var result = new ManagerServ_publishAdvertSlot_result({success: result});
        output.writeMessageBegin("publishAdvertSlot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("publishAdvertSlot", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.publishAdvertSlot(args.param, function (err, result) {
      if (err == null) {
        var result = new ManagerServ_publishAdvertSlot_result((err != null ? err : {success: result}));
        output.writeMessageBegin("publishAdvertSlot", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("publishAdvertSlot", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

