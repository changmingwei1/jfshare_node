//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var slotImage_ttypes = require('./slotImage_types')
var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
ProductOpt = module.exports.ProductOpt = function(args) {
  this.productId = null;
  this.activeState = null;
  this.desc = null;
  this.operatorId = null;
  this.operatorType = null;
  this.createTime = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.activeState !== undefined) {
      this.activeState = args.activeState;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.operatorId !== undefined) {
      this.operatorId = args.operatorId;
    }
    if (args.operatorType !== undefined) {
      this.operatorType = args.operatorType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
  }
};
ProductOpt.prototype = {};
ProductOpt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operatorId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductOpt.prototype.write = function(output) {
  output.writeStructBegin('ProductOpt');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 2);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 3);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.STRING, 4);
    output.writeString(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.operatorType !== null && this.operatorType !== undefined) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 5);
    output.writeI32(this.operatorType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryConditions = module.exports.QueryConditions = function(args) {
  this.productId = null;
  this.recordCount = null;
  this.state = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.recordCount !== undefined) {
      this.recordCount = args.recordCount;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
QueryConditions.prototype = {};
QueryConditions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.recordCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryConditions.prototype.write = function(output) {
  output.writeStructBegin('QueryConditions');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.recordCount !== null && this.recordCount !== undefined) {
    output.writeFieldBegin('recordCount', Thrift.Type.I32, 2);
    output.writeI32(this.recordCount);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductOptResult = module.exports.ProductOptResult = function(args) {
  this.result = null;
  this.productOptRecords = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.productOptRecords !== undefined) {
      this.productOptRecords = args.productOptRecords;
    }
  }
};
ProductOptResult.prototype = {};
ProductOptResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.productOptRecords = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ProductOpt();
          elem6.read(input);
          this.productOptRecords.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductOptResult.prototype.write = function(output) {
  output.writeStructBegin('ProductOptResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.productOptRecords !== null && this.productOptRecords !== undefined) {
    output.writeFieldBegin('productOptRecords', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.productOptRecords.length);
    for (var iter7 in this.productOptRecords)
    {
      if (this.productOptRecords.hasOwnProperty(iter7))
      {
        iter7 = this.productOptRecords[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Commissioner = module.exports.Commissioner = function(args) {
  this.csId = null;
  this.loginName = null;
  this.csName = null;
  this.pwdEnc = null;
  this.deptId = null;
  this.mobile = null;
  this.email = null;
  this.validate = null;
  this.createTime = null;
  this.url = null;
  if (args) {
    if (args.csId !== undefined) {
      this.csId = args.csId;
    }
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.csName !== undefined) {
      this.csName = args.csName;
    }
    if (args.pwdEnc !== undefined) {
      this.pwdEnc = args.pwdEnc;
    }
    if (args.deptId !== undefined) {
      this.deptId = args.deptId;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.validate !== undefined) {
      this.validate = args.validate;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
Commissioner.prototype = {};
Commissioner.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.csId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.csName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pwdEnc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.deptId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.validate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Commissioner.prototype.write = function(output) {
  output.writeStructBegin('Commissioner');
  if (this.csId !== null && this.csId !== undefined) {
    output.writeFieldBegin('csId', Thrift.Type.I32, 1);
    output.writeI32(this.csId);
    output.writeFieldEnd();
  }
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 2);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.csName !== null && this.csName !== undefined) {
    output.writeFieldBegin('csName', Thrift.Type.STRING, 3);
    output.writeString(this.csName);
    output.writeFieldEnd();
  }
  if (this.pwdEnc !== null && this.pwdEnc !== undefined) {
    output.writeFieldBegin('pwdEnc', Thrift.Type.STRING, 4);
    output.writeString(this.pwdEnc);
    output.writeFieldEnd();
  }
  if (this.deptId !== null && this.deptId !== undefined) {
    output.writeFieldBegin('deptId', Thrift.Type.I32, 5);
    output.writeI32(this.deptId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 6);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 7);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.validate !== null && this.validate !== undefined) {
    output.writeFieldBegin('validate', Thrift.Type.I32, 8);
    output.writeI32(this.validate);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 9);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 10);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginLog = module.exports.LoginLog = function(args) {
  this.csId = null;
  this.tokenId = null;
  this.ip = null;
  this.browser = null;
  this.fromSource = null;
  this.loginAuto = null;
  this.loginTime = null;
  this.logoutTime = null;
  this.validate = null;
  this.url = null;
  if (args) {
    if (args.csId !== undefined) {
      this.csId = args.csId;
    }
    if (args.tokenId !== undefined) {
      this.tokenId = args.tokenId;
    }
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.browser !== undefined) {
      this.browser = args.browser;
    }
    if (args.fromSource !== undefined) {
      this.fromSource = args.fromSource;
    }
    if (args.loginAuto !== undefined) {
      this.loginAuto = args.loginAuto;
    }
    if (args.loginTime !== undefined) {
      this.loginTime = args.loginTime;
    }
    if (args.logoutTime !== undefined) {
      this.logoutTime = args.logoutTime;
    }
    if (args.validate !== undefined) {
      this.validate = args.validate;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
LoginLog.prototype = {};
LoginLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.csId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.browser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.loginAuto = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.loginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.logoutTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.validate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginLog.prototype.write = function(output) {
  output.writeStructBegin('LoginLog');
  if (this.csId !== null && this.csId !== undefined) {
    output.writeFieldBegin('csId', Thrift.Type.I32, 1);
    output.writeI32(this.csId);
    output.writeFieldEnd();
  }
  if (this.tokenId !== null && this.tokenId !== undefined) {
    output.writeFieldBegin('tokenId', Thrift.Type.STRING, 2);
    output.writeString(this.tokenId);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 3);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.browser !== null && this.browser !== undefined) {
    output.writeFieldBegin('browser', Thrift.Type.STRING, 4);
    output.writeString(this.browser);
    output.writeFieldEnd();
  }
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.I32, 5);
    output.writeI32(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.loginAuto !== null && this.loginAuto !== undefined) {
    output.writeFieldBegin('loginAuto', Thrift.Type.I32, 6);
    output.writeI32(this.loginAuto);
    output.writeFieldEnd();
  }
  if (this.loginTime !== null && this.loginTime !== undefined) {
    output.writeFieldBegin('loginTime', Thrift.Type.STRING, 7);
    output.writeString(this.loginTime);
    output.writeFieldEnd();
  }
  if (this.logoutTime !== null && this.logoutTime !== undefined) {
    output.writeFieldBegin('logoutTime', Thrift.Type.STRING, 8);
    output.writeString(this.logoutTime);
    output.writeFieldEnd();
  }
  if (this.validate !== null && this.validate !== undefined) {
    output.writeFieldBegin('validate', Thrift.Type.I32, 9);
    output.writeI32(this.validate);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 10);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommissionerResult = module.exports.CommissionerResult = function(args) {
  this.result = null;
  this.cs = null;
  this.loginLog = null;
  this.value = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cs !== undefined) {
      this.cs = args.cs;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
CommissionerResult.prototype = {};
CommissionerResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cs = new ttypes.Commissioner();
        this.cs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommissionerResult.prototype.write = function(output) {
  output.writeStructBegin('CommissionerResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cs !== null && this.cs !== undefined) {
    output.writeFieldBegin('cs', Thrift.Type.STRUCT, 2);
    this.cs.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 3);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 4);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommissionerListResult = module.exports.CommissionerListResult = function(args) {
  this.result = null;
  this.commissioners = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.commissioners !== undefined) {
      this.commissioners = args.commissioners;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
CommissionerListResult.prototype = {};
CommissionerListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.commissioners = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Commissioner();
          elem14.read(input);
          this.commissioners.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommissionerListResult.prototype.write = function(output) {
  output.writeStructBegin('CommissionerListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.commissioners !== null && this.commissioners !== undefined) {
    output.writeFieldBegin('commissioners', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.commissioners.length);
    for (var iter15 in this.commissioners)
    {
      if (this.commissioners.hasOwnProperty(iter15))
      {
        iter15 = this.commissioners[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModuleConfig = module.exports.ModuleConfig = function(args) {
  this.id = null;
  this.moduleName = null;
  this.moduleDesc = null;
  this.moduleType = null;
  this.createTime = null;
  this.relaseChannel = null;
  this.relaseStatus = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.moduleDesc !== undefined) {
      this.moduleDesc = args.moduleDesc;
    }
    if (args.moduleType !== undefined) {
      this.moduleType = args.moduleType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.relaseChannel !== undefined) {
      this.relaseChannel = args.relaseChannel;
    }
    if (args.relaseStatus !== undefined) {
      this.relaseStatus = args.relaseStatus;
    }
  }
};
ModuleConfig.prototype = {};
ModuleConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.moduleDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.moduleType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.relaseChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.relaseStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleConfig.prototype.write = function(output) {
  output.writeStructBegin('ModuleConfig');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.moduleDesc !== null && this.moduleDesc !== undefined) {
    output.writeFieldBegin('moduleDesc', Thrift.Type.STRING, 3);
    output.writeString(this.moduleDesc);
    output.writeFieldEnd();
  }
  if (this.moduleType !== null && this.moduleType !== undefined) {
    output.writeFieldBegin('moduleType', Thrift.Type.STRING, 4);
    output.writeString(this.moduleType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 5);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.relaseChannel !== null && this.relaseChannel !== undefined) {
    output.writeFieldBegin('relaseChannel', Thrift.Type.STRING, 6);
    output.writeString(this.relaseChannel);
    output.writeFieldEnd();
  }
  if (this.relaseStatus !== null && this.relaseStatus !== undefined) {
    output.writeFieldBegin('relaseStatus', Thrift.Type.STRING, 7);
    output.writeString(this.relaseStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModuleConfigResult = module.exports.ModuleConfigResult = function(args) {
  this.result = null;
  this.moduleConfigList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.moduleConfigList !== undefined) {
      this.moduleConfigList = args.moduleConfigList;
    }
  }
};
ModuleConfigResult.prototype = {};
ModuleConfigResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.moduleConfigList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ModuleConfig();
          elem22.read(input);
          this.moduleConfigList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleConfigResult.prototype.write = function(output) {
  output.writeStructBegin('ModuleConfigResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.moduleConfigList !== null && this.moduleConfigList !== undefined) {
    output.writeFieldBegin('moduleConfigList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.moduleConfigList.length);
    for (var iter23 in this.moduleConfigList)
    {
      if (this.moduleConfigList.hasOwnProperty(iter23))
      {
        iter23 = this.moduleConfigList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModuleConfigParam = module.exports.ModuleConfigParam = function(args) {
  this.id = null;
  this.moduleName = null;
  this.moduleType = null;
  this.createTime = null;
  this.relaseStatus = null;
  this.relaseChannel = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.moduleType !== undefined) {
      this.moduleType = args.moduleType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.relaseStatus !== undefined) {
      this.relaseStatus = args.relaseStatus;
    }
    if (args.relaseChannel !== undefined) {
      this.relaseChannel = args.relaseChannel;
    }
  }
};
ModuleConfigParam.prototype = {};
ModuleConfigParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.moduleType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.relaseStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.relaseChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleConfigParam.prototype.write = function(output) {
  output.writeStructBegin('ModuleConfigParam');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.moduleType !== null && this.moduleType !== undefined) {
    output.writeFieldBegin('moduleType', Thrift.Type.STRING, 3);
    output.writeString(this.moduleType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 4);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.relaseStatus !== null && this.relaseStatus !== undefined) {
    output.writeFieldBegin('relaseStatus', Thrift.Type.STRING, 5);
    output.writeString(this.relaseStatus);
    output.writeFieldEnd();
  }
  if (this.relaseChannel !== null && this.relaseChannel !== undefined) {
    output.writeFieldBegin('relaseChannel', Thrift.Type.STRING, 6);
    output.writeString(this.relaseChannel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModuleConfigDetail = module.exports.ModuleConfigDetail = function(args) {
  this.id = null;
  this.moduleId = null;
  this.createTime = null;
  this.relaId = null;
  this.relaImgkey = null;
  this.productRuleId = null;
  this.relaSort = null;
  this.updateTime = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.title = null;
  this.viceName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.moduleId !== undefined) {
      this.moduleId = args.moduleId;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.relaId !== undefined) {
      this.relaId = args.relaId;
    }
    if (args.relaImgkey !== undefined) {
      this.relaImgkey = args.relaImgkey;
    }
    if (args.productRuleId !== undefined) {
      this.productRuleId = args.productRuleId;
    }
    if (args.relaSort !== undefined) {
      this.relaSort = args.relaSort;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined) {
      this.orgPrice = args.orgPrice;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.viceName !== undefined) {
      this.viceName = args.viceName;
    }
  }
};
ModuleConfigDetail.prototype = {};
ModuleConfigDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.relaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.relaImgkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.productRuleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.relaSort = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleConfigDetail.prototype.write = function(output) {
  output.writeStructBegin('ModuleConfigDetail');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 2);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 3);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.relaId !== null && this.relaId !== undefined) {
    output.writeFieldBegin('relaId', Thrift.Type.STRING, 4);
    output.writeString(this.relaId);
    output.writeFieldEnd();
  }
  if (this.relaImgkey !== null && this.relaImgkey !== undefined) {
    output.writeFieldBegin('relaImgkey', Thrift.Type.STRING, 5);
    output.writeString(this.relaImgkey);
    output.writeFieldEnd();
  }
  if (this.productRuleId !== null && this.productRuleId !== undefined) {
    output.writeFieldBegin('productRuleId', Thrift.Type.STRING, 6);
    output.writeString(this.productRuleId);
    output.writeFieldEnd();
  }
  if (this.relaSort !== null && this.relaSort !== undefined) {
    output.writeFieldBegin('relaSort', Thrift.Type.STRING, 7);
    output.writeString(this.relaSort);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 8);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 9);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 10);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 11);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 12);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModuleConfigDetailResult = module.exports.ModuleConfigDetailResult = function(args) {
  this.result = null;
  this.ModuleConfigDetailList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.ModuleConfigDetailList !== undefined) {
      this.ModuleConfigDetailList = args.ModuleConfigDetailList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ModuleConfigDetailResult.prototype = {};
ModuleConfigDetailResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.ModuleConfigDetailList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.ModuleConfigDetail();
          elem30.read(input);
          this.ModuleConfigDetailList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleConfigDetailResult.prototype.write = function(output) {
  output.writeStructBegin('ModuleConfigDetailResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.ModuleConfigDetailList !== null && this.ModuleConfigDetailList !== undefined) {
    output.writeFieldBegin('ModuleConfigDetailList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ModuleConfigDetailList.length);
    for (var iter31 in this.ModuleConfigDetailList)
    {
      if (this.ModuleConfigDetailList.hasOwnProperty(iter31))
      {
        iter31 = this.ModuleConfigDetailList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModuleConfigDetailParam = module.exports.ModuleConfigDetailParam = function(args) {
  this.moduleId = null;
  this.createTime = null;
  this.relaId = null;
  this.relaImgkey = null;
  this.productRuleId = null;
  this.relaSort = null;
  this.pagination = null;
  if (args) {
    if (args.moduleId !== undefined) {
      this.moduleId = args.moduleId;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.relaId !== undefined) {
      this.relaId = args.relaId;
    }
    if (args.relaImgkey !== undefined) {
      this.relaImgkey = args.relaImgkey;
    }
    if (args.productRuleId !== undefined) {
      this.productRuleId = args.productRuleId;
    }
    if (args.relaSort !== undefined) {
      this.relaSort = args.relaSort;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ModuleConfigDetailParam.prototype = {};
ModuleConfigDetailParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.relaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.relaImgkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.productRuleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.relaSort = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleConfigDetailParam.prototype.write = function(output) {
  output.writeStructBegin('ModuleConfigDetailParam');
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 1);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 2);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.relaId !== null && this.relaId !== undefined) {
    output.writeFieldBegin('relaId', Thrift.Type.STRING, 3);
    output.writeString(this.relaId);
    output.writeFieldEnd();
  }
  if (this.relaImgkey !== null && this.relaImgkey !== undefined) {
    output.writeFieldBegin('relaImgkey', Thrift.Type.STRING, 4);
    output.writeString(this.relaImgkey);
    output.writeFieldEnd();
  }
  if (this.productRuleId !== null && this.productRuleId !== undefined) {
    output.writeFieldBegin('productRuleId', Thrift.Type.STRING, 5);
    output.writeString(this.productRuleId);
    output.writeFieldEnd();
  }
  if (this.relaSort !== null && this.relaSort !== undefined) {
    output.writeFieldBegin('relaSort', Thrift.Type.STRING, 6);
    output.writeString(this.relaSort);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 7);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelaseResult = module.exports.RelaseResult = function(args) {
  this.result = null;
  this.type = null;
  this.relaseCount = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.relaseCount !== undefined) {
      this.relaseCount = args.relaseCount;
    }
  }
};
RelaseResult.prototype = {};
RelaseResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.relaseCount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelaseResult.prototype.write = function(output) {
  output.writeStructBegin('RelaseResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.relaseCount !== null && this.relaseCount !== undefined) {
    output.writeFieldBegin('relaseCount', Thrift.Type.STRING, 3);
    output.writeString(this.relaseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelaseParam = module.exports.RelaseParam = function(args) {
  this.ModuleConfigDetailList = null;
  this.moduleType = null;
  if (args) {
    if (args.ModuleConfigDetailList !== undefined) {
      this.ModuleConfigDetailList = args.ModuleConfigDetailList;
    }
    if (args.moduleType !== undefined) {
      this.moduleType = args.moduleType;
    }
  }
};
RelaseParam.prototype = {};
RelaseParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.ModuleConfigDetailList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ModuleConfigDetail();
          elem38.read(input);
          this.ModuleConfigDetailList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelaseParam.prototype.write = function(output) {
  output.writeStructBegin('RelaseParam');
  if (this.ModuleConfigDetailList !== null && this.ModuleConfigDetailList !== undefined) {
    output.writeFieldBegin('ModuleConfigDetailList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.ModuleConfigDetailList.length);
    for (var iter39 in this.ModuleConfigDetailList)
    {
      if (this.ModuleConfigDetailList.hasOwnProperty(iter39))
      {
        iter39 = this.ModuleConfigDetailList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.moduleType !== null && this.moduleType !== undefined) {
    output.writeFieldBegin('moduleType', Thrift.Type.STRING, 2);
    output.writeString(this.moduleType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ImportParam = module.exports.ImportParam = function(args) {
  this.filePath = null;
  this.moduleId = null;
  this.moduleType = null;
  if (args) {
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    }
    if (args.moduleId !== undefined) {
      this.moduleId = args.moduleId;
    }
    if (args.moduleType !== undefined) {
      this.moduleType = args.moduleType;
    }
  }
};
ImportParam.prototype = {};
ImportParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.moduleType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImportParam.prototype.write = function(output) {
  output.writeStructBegin('ImportParam');
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 1);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 2);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.moduleType !== null && this.moduleType !== undefined) {
    output.writeFieldBegin('moduleType', Thrift.Type.STRING, 3);
    output.writeString(this.moduleType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ImportResult = module.exports.ImportResult = function(args) {
  this.result = null;
  this.ModuleConfigDetailList = null;
  this.impCount = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.ModuleConfigDetailList !== undefined) {
      this.ModuleConfigDetailList = args.ModuleConfigDetailList;
    }
    if (args.impCount !== undefined) {
      this.impCount = args.impCount;
    }
  }
};
ImportResult.prototype = {};
ImportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.ModuleConfigDetailList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ModuleConfigDetail();
          elem46.read(input);
          this.ModuleConfigDetailList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.impCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImportResult.prototype.write = function(output) {
  output.writeStructBegin('ImportResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.ModuleConfigDetailList !== null && this.ModuleConfigDetailList !== undefined) {
    output.writeFieldBegin('ModuleConfigDetailList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ModuleConfigDetailList.length);
    for (var iter47 in this.ModuleConfigDetailList)
    {
      if (this.ModuleConfigDetailList.hasOwnProperty(iter47))
      {
        iter47 = this.ModuleConfigDetailList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.impCount !== null && this.impCount !== undefined) {
    output.writeFieldBegin('impCount', Thrift.Type.I32, 3);
    output.writeI32(this.impCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryImgkeyParam = module.exports.QueryImgkeyParam = function(args) {
  this.relaId = null;
  this.moduleType = null;
  if (args) {
    if (args.relaId !== undefined) {
      this.relaId = args.relaId;
    }
    if (args.moduleType !== undefined) {
      this.moduleType = args.moduleType;
    }
  }
};
QueryImgkeyParam.prototype = {};
QueryImgkeyParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.relaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryImgkeyParam.prototype.write = function(output) {
  output.writeStructBegin('QueryImgkeyParam');
  if (this.relaId !== null && this.relaId !== undefined) {
    output.writeFieldBegin('relaId', Thrift.Type.STRING, 1);
    output.writeString(this.relaId);
    output.writeFieldEnd();
  }
  if (this.moduleType !== null && this.moduleType !== undefined) {
    output.writeFieldBegin('moduleType', Thrift.Type.STRING, 2);
    output.writeString(this.moduleType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryImgkeyResult = module.exports.QueryImgkeyResult = function(args) {
  this.result = null;
  this.imgKey = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.title = null;
  this.viceName = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.imgKey !== undefined) {
      this.imgKey = args.imgKey;
    }
    if (args.curPrice !== undefined) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined) {
      this.orgPrice = args.orgPrice;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.viceName !== undefined) {
      this.viceName = args.viceName;
    }
  }
};
QueryImgkeyResult.prototype = {};
QueryImgkeyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryImgkeyResult.prototype.write = function(output) {
  output.writeStructBegin('QueryImgkeyResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 2);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 3);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 4);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 5);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 6);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryProductRuleImgkeyParam = module.exports.QueryProductRuleImgkeyParam = function(args) {
  this.moduleId = null;
  this.ruleType = null;
  this.count = null;
  if (args) {
    if (args.moduleId !== undefined) {
      this.moduleId = args.moduleId;
    }
    if (args.ruleType !== undefined) {
      this.ruleType = args.ruleType;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
QueryProductRuleImgkeyParam.prototype = {};
QueryProductRuleImgkeyParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ruleType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryProductRuleImgkeyParam.prototype.write = function(output) {
  output.writeStructBegin('QueryProductRuleImgkeyParam');
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 1);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.ruleType !== null && this.ruleType !== undefined) {
    output.writeFieldBegin('ruleType', Thrift.Type.STRING, 2);
    output.writeString(this.ruleType);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlotImage = module.exports.AdvertSlotImage = function(args) {
  this.id = null;
  this.imgKey = null;
  this.advertId = null;
  this.slotName = null;
  this.remark = null;
  this.jump = null;
  this.isOnline = null;
  this.sort = null;
  this.startTime = null;
  this.endTime = null;
  this.createTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.imgKey !== undefined) {
      this.imgKey = args.imgKey;
    }
    if (args.advertId !== undefined) {
      this.advertId = args.advertId;
    }
    if (args.slotName !== undefined) {
      this.slotName = args.slotName;
    }
    if (args.remark !== undefined) {
      this.remark = args.remark;
    }
    if (args.jump !== undefined) {
      this.jump = args.jump;
    }
    if (args.isOnline !== undefined) {
      this.isOnline = args.isOnline;
    }
    if (args.sort !== undefined) {
      this.sort = args.sort;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
  }
};
AdvertSlotImage.prototype = {};
AdvertSlotImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.advertId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.slotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.jump = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.isOnline = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.sort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlotImage.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlotImage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 2);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.advertId !== null && this.advertId !== undefined) {
    output.writeFieldBegin('advertId', Thrift.Type.I32, 3);
    output.writeI32(this.advertId);
    output.writeFieldEnd();
  }
  if (this.slotName !== null && this.slotName !== undefined) {
    output.writeFieldBegin('slotName', Thrift.Type.STRING, 4);
    output.writeString(this.slotName);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 5);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.jump !== null && this.jump !== undefined) {
    output.writeFieldBegin('jump', Thrift.Type.STRING, 6);
    output.writeString(this.jump);
    output.writeFieldEnd();
  }
  if (this.isOnline !== null && this.isOnline !== undefined) {
    output.writeFieldBegin('isOnline', Thrift.Type.I32, 7);
    output.writeI32(this.isOnline);
    output.writeFieldEnd();
  }
  if (this.sort !== null && this.sort !== undefined) {
    output.writeFieldBegin('sort', Thrift.Type.I32, 8);
    output.writeI32(this.sort);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 9);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 10);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 11);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlot = module.exports.AdvertSlot = function(args) {
  this.advertId = null;
  this.slotName = null;
  this.count = null;
  this.createTime = null;
  this.type = null;
  if (args) {
    if (args.advertId !== undefined) {
      this.advertId = args.advertId;
    }
    if (args.slotName !== undefined) {
      this.slotName = args.slotName;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
AdvertSlot.prototype = {};
AdvertSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.advertId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.slotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlot.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlot');
  if (this.advertId !== null && this.advertId !== undefined) {
    output.writeFieldBegin('advertId', Thrift.Type.I32, 1);
    output.writeI32(this.advertId);
    output.writeFieldEnd();
  }
  if (this.slotName !== null && this.slotName !== undefined) {
    output.writeFieldBegin('slotName', Thrift.Type.STRING, 2);
    output.writeString(this.slotName);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 4);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlotImageParam = module.exports.AdvertSlotImageParam = function(args) {
  this.advertId = null;
  this.fromSource = null;
  this.type = null;
  if (args) {
    if (args.advertId !== undefined) {
      this.advertId = args.advertId;
    }
    if (args.fromSource !== undefined) {
      this.fromSource = args.fromSource;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
AdvertSlotImageParam.prototype = {};
AdvertSlotImageParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.advertId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fromSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlotImageParam.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlotImageParam');
  if (this.advertId !== null && this.advertId !== undefined) {
    output.writeFieldBegin('advertId', Thrift.Type.I32, 1);
    output.writeI32(this.advertId);
    output.writeFieldEnd();
  }
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.I32, 2);
    output.writeI32(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlotImageListResult = module.exports.AdvertSlotImageListResult = function(args) {
  this.result = null;
  this.slotImageList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.slotImageList !== undefined) {
      this.slotImageList = args.slotImageList;
    }
  }
};
AdvertSlotImageListResult.prototype = {};
AdvertSlotImageListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.slotImageList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.AdvertSlotImage();
          elem54.read(input);
          this.slotImageList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlotImageListResult.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlotImageListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.slotImageList !== null && this.slotImageList !== undefined) {
    output.writeFieldBegin('slotImageList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.slotImageList.length);
    for (var iter55 in this.slotImageList)
    {
      if (this.slotImageList.hasOwnProperty(iter55))
      {
        iter55 = this.slotImageList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlotImageResult = module.exports.AdvertSlotImageResult = function(args) {
  this.result = null;
  this.slotImage = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.slotImage !== undefined) {
      this.slotImage = args.slotImage;
    }
  }
};
AdvertSlotImageResult.prototype = {};
AdvertSlotImageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.slotImage = new ttypes.AdvertSlotImage();
        this.slotImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlotImageResult.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlotImageResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.slotImage !== null && this.slotImage !== undefined) {
    output.writeFieldBegin('slotImage', Thrift.Type.STRUCT, 2);
    this.slotImage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlotImageListParam = module.exports.AdvertSlotImageListParam = function(args) {
  this.slotImageList = null;
  this.advertId = null;
  if (args) {
    if (args.slotImageList !== undefined) {
      this.slotImageList = args.slotImageList;
    }
    if (args.advertId !== undefined) {
      this.advertId = args.advertId;
    }
  }
};
AdvertSlotImageListParam.prototype = {};
AdvertSlotImageListParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.slotImageList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.AdvertSlotImage();
          elem62.read(input);
          this.slotImageList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.advertId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlotImageListParam.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlotImageListParam');
  if (this.slotImageList !== null && this.slotImageList !== undefined) {
    output.writeFieldBegin('slotImageList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.slotImageList.length);
    for (var iter63 in this.slotImageList)
    {
      if (this.slotImageList.hasOwnProperty(iter63))
      {
        iter63 = this.slotImageList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.advertId !== null && this.advertId !== undefined) {
    output.writeFieldBegin('advertId', Thrift.Type.I32, 2);
    output.writeI32(this.advertId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvertSlotListResult = module.exports.AdvertSlotListResult = function(args) {
  this.result = null;
  this.slotList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.slotList !== undefined) {
      this.slotList = args.slotList;
    }
  }
};
AdvertSlotListResult.prototype = {};
AdvertSlotListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.slotList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.AdvertSlot();
          elem70.read(input);
          this.slotList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvertSlotListResult.prototype.write = function(output) {
  output.writeStructBegin('AdvertSlotListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.slotList !== null && this.slotList !== undefined) {
    output.writeFieldBegin('slotList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.slotList.length);
    for (var iter71 in this.slotList)
    {
      if (this.slotList.hasOwnProperty(iter71))
      {
        iter71 = this.slotList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendsPushResult = module.exports.FriendsPushResult = function(args) {
  this.result = null;
  this.img = null;
  this.value = null;
  this.friendsName = null;
  this.dateTime = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.img !== undefined) {
      this.img = args.img;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.friendsName !== undefined) {
      this.friendsName = args.friendsName;
    }
    if (args.dateTime !== undefined) {
      this.dateTime = args.dateTime;
    }
  }
};
FriendsPushResult.prototype = {};
FriendsPushResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.img = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.friendsName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendsPushResult.prototype.write = function(output) {
  output.writeStructBegin('FriendsPushResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.img !== null && this.img !== undefined) {
    output.writeFieldBegin('img', Thrift.Type.STRING, 2);
    output.writeString(this.img);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 3);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.friendsName !== null && this.friendsName !== undefined) {
    output.writeFieldBegin('friendsName', Thrift.Type.STRING, 4);
    output.writeString(this.friendsName);
    output.writeFieldEnd();
  }
  if (this.dateTime !== null && this.dateTime !== undefined) {
    output.writeFieldBegin('dateTime', Thrift.Type.STRING, 5);
    output.writeString(this.dateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendsPush = module.exports.FriendsPush = function(args) {
  this.img = null;
  this.name = null;
  this.pushDate = null;
  this.value = null;
  if (args) {
    if (args.img !== undefined) {
      this.img = args.img;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.pushDate !== undefined) {
      this.pushDate = args.pushDate;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
FriendsPush.prototype = {};
FriendsPush.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.img = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pushDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendsPush.prototype.write = function(output) {
  output.writeStructBegin('FriendsPush');
  if (this.img !== null && this.img !== undefined) {
    output.writeFieldBegin('img', Thrift.Type.STRING, 1);
    output.writeString(this.img);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pushDate !== null && this.pushDate !== undefined) {
    output.writeFieldBegin('pushDate', Thrift.Type.STRING, 3);
    output.writeString(this.pushDate);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FriendsPushListResult = module.exports.FriendsPushListResult = function(args) {
  this.result = null;
  this.pushList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pushList !== undefined) {
      this.pushList = args.pushList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
FriendsPushListResult.prototype = {};
FriendsPushListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.pushList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.FriendsPush();
          elem78.read(input);
          this.pushList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendsPushListResult.prototype.write = function(output) {
  output.writeStructBegin('FriendsPushListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pushList !== null && this.pushList !== undefined) {
    output.writeFieldBegin('pushList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.pushList.length);
    for (var iter79 in this.pushList)
    {
      if (this.pushList.hasOwnProperty(iter79))
      {
        iter79 = this.pushList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

