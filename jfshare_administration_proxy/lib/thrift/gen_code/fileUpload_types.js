//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
FileParam = module.exports.FileParam = function(args) {
  this.productType = null;
  this.DataType = null;
  this.ExpDate_Flag = null;
  this.CardNumber = null;
  this.StartDate = null;
  this.excelKeyUrl = null;
  this.notEncryptFlag = null;
  this.isTestFlag = null;
  this.sellerName = null;
  if (args) {
    if (args.productType !== undefined) {
      this.productType = args.productType;
    }
    if (args.DataType !== undefined) {
      this.DataType = args.DataType;
    }
    if (args.ExpDate_Flag !== undefined) {
      this.ExpDate_Flag = args.ExpDate_Flag;
    }
    if (args.CardNumber !== undefined) {
      this.CardNumber = args.CardNumber;
    }
    if (args.StartDate !== undefined) {
      this.StartDate = args.StartDate;
    }
    if (args.excelKeyUrl !== undefined) {
      this.excelKeyUrl = args.excelKeyUrl;
    }
    if (args.notEncryptFlag !== undefined) {
      this.notEncryptFlag = args.notEncryptFlag;
    }
    if (args.isTestFlag !== undefined) {
      this.isTestFlag = args.isTestFlag;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
  }
};
FileParam.prototype = {};
FileParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.DataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ExpDate_Flag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.CardNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.StartDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.excelKeyUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.notEncryptFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isTestFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileParam.prototype.write = function(output) {
  output.writeStructBegin('FileParam');
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 1);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.DataType !== null && this.DataType !== undefined) {
    output.writeFieldBegin('DataType', Thrift.Type.STRING, 2);
    output.writeString(this.DataType);
    output.writeFieldEnd();
  }
  if (this.ExpDate_Flag !== null && this.ExpDate_Flag !== undefined) {
    output.writeFieldBegin('ExpDate_Flag', Thrift.Type.STRING, 3);
    output.writeString(this.ExpDate_Flag);
    output.writeFieldEnd();
  }
  if (this.CardNumber !== null && this.CardNumber !== undefined) {
    output.writeFieldBegin('CardNumber', Thrift.Type.I64, 4);
    output.writeI64(this.CardNumber);
    output.writeFieldEnd();
  }
  if (this.StartDate !== null && this.StartDate !== undefined) {
    output.writeFieldBegin('StartDate', Thrift.Type.STRING, 5);
    output.writeString(this.StartDate);
    output.writeFieldEnd();
  }
  if (this.excelKeyUrl !== null && this.excelKeyUrl !== undefined) {
    output.writeFieldBegin('excelKeyUrl', Thrift.Type.STRING, 6);
    output.writeString(this.excelKeyUrl);
    output.writeFieldEnd();
  }
  if (this.notEncryptFlag !== null && this.notEncryptFlag !== undefined) {
    output.writeFieldBegin('notEncryptFlag', Thrift.Type.BOOL, 7);
    output.writeBool(this.notEncryptFlag);
    output.writeFieldEnd();
  }
  if (this.isTestFlag !== null && this.isTestFlag !== undefined) {
    output.writeFieldBegin('isTestFlag', Thrift.Type.BOOL, 8);
    output.writeBool(this.isTestFlag);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 9);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuditParam = module.exports.AuditParam = function(args) {
  this.id = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
AuditParam.prototype = {};
AuditParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuditParam.prototype.write = function(output) {
  output.writeStructBegin('AuditParam');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryConditions = module.exports.QueryConditions = function(args) {
  this.sellerName = null;
  this.productName = null;
  this.status = null;
  if (args) {
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
QueryConditions.prototype = {};
QueryConditions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryConditions.prototype.write = function(output) {
  output.writeStructBegin('QueryConditions');
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 1);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyCard = module.exports.ThirdPartyCard = function(args) {
  this.id = null;
  this.orderId = null;
  this.sellerName = null;
  this.productName = null;
  this.productNo = null;
  this.faceValue = null;
  this.cardNumber = null;
  this.applyTime = null;
  this.approveTime = null;
  this.status = null;
  this.expData = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.productNo !== undefined) {
      this.productNo = args.productNo;
    }
    if (args.faceValue !== undefined) {
      this.faceValue = args.faceValue;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.approveTime !== undefined) {
      this.approveTime = args.approveTime;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.expData !== undefined) {
      this.expData = args.expData;
    }
  }
};
ThirdPartyCard.prototype = {};
ThirdPartyCard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.productNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.faceValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.cardNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.applyTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.approveTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.expData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyCard.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyCard');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 3);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 4);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.productNo !== null && this.productNo !== undefined) {
    output.writeFieldBegin('productNo', Thrift.Type.STRING, 5);
    output.writeString(this.productNo);
    output.writeFieldEnd();
  }
  if (this.faceValue !== null && this.faceValue !== undefined) {
    output.writeFieldBegin('faceValue', Thrift.Type.I32, 6);
    output.writeI32(this.faceValue);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.I32, 7);
    output.writeI32(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 8);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.approveTime !== null && this.approveTime !== undefined) {
    output.writeFieldBegin('approveTime', Thrift.Type.STRING, 9);
    output.writeString(this.approveTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 10);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.expData !== null && this.expData !== undefined) {
    output.writeFieldBegin('expData', Thrift.Type.STRING, 11);
    output.writeString(this.expData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyCardResultList = module.exports.ThirdPartyCardResultList = function(args) {
  this.result = null;
  this.thirdPartyCards = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.thirdPartyCards !== undefined) {
      this.thirdPartyCards = args.thirdPartyCards;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ThirdPartyCardResultList.prototype = {};
ThirdPartyCardResultList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.thirdPartyCards = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ThirdPartyCard();
          elem6.read(input);
          this.thirdPartyCards.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyCardResultList.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyCardResultList');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.thirdPartyCards !== null && this.thirdPartyCards !== undefined) {
    output.writeFieldBegin('thirdPartyCards', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.thirdPartyCards.length);
    for (var iter7 in this.thirdPartyCards)
    {
      if (this.thirdPartyCards.hasOwnProperty(iter7))
      {
        iter7 = this.thirdPartyCards[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Recharge = module.exports.Recharge = function(args) {
  this.id = null;
  this.orderId = null;
  this.userId = null;
  this.chargeType = null;
  this.chargeChannel = null;
  this.state1 = null;
  this.state2 = null;
  this.chargeReqdate = null;
  this.chargeNotifydate = null;
  this.chargeMoney = null;
  this.businessCode = null;
  this.chargeAddr = null;
  this.thirdOrderNo = null;
  this.blance = null;
  this.applyTime = null;
  this.chargeNumblance = null;
  this.createTime = null;
  this.updateTime = null;
  this.reqOutNo = null;
  this.company = null;
  this.flowno = null;
  this.ext1 = null;
  this.ext2 = null;
  this.ext3 = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chargeType !== undefined) {
      this.chargeType = args.chargeType;
    }
    if (args.chargeChannel !== undefined) {
      this.chargeChannel = args.chargeChannel;
    }
    if (args.state1 !== undefined) {
      this.state1 = args.state1;
    }
    if (args.state2 !== undefined) {
      this.state2 = args.state2;
    }
    if (args.chargeReqdate !== undefined) {
      this.chargeReqdate = args.chargeReqdate;
    }
    if (args.chargeNotifydate !== undefined) {
      this.chargeNotifydate = args.chargeNotifydate;
    }
    if (args.chargeMoney !== undefined) {
      this.chargeMoney = args.chargeMoney;
    }
    if (args.businessCode !== undefined) {
      this.businessCode = args.businessCode;
    }
    if (args.chargeAddr !== undefined) {
      this.chargeAddr = args.chargeAddr;
    }
    if (args.thirdOrderNo !== undefined) {
      this.thirdOrderNo = args.thirdOrderNo;
    }
    if (args.blance !== undefined) {
      this.blance = args.blance;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.chargeNumblance !== undefined) {
      this.chargeNumblance = args.chargeNumblance;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.reqOutNo !== undefined) {
      this.reqOutNo = args.reqOutNo;
    }
    if (args.company !== undefined) {
      this.company = args.company;
    }
    if (args.flowno !== undefined) {
      this.flowno = args.flowno;
    }
    if (args.ext1 !== undefined) {
      this.ext1 = args.ext1;
    }
    if (args.ext2 !== undefined) {
      this.ext2 = args.ext2;
    }
    if (args.ext3 !== undefined) {
      this.ext3 = args.ext3;
    }
  }
};
Recharge.prototype = {};
Recharge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.chargeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.chargeChannel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.chargeReqdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.chargeNotifydate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.chargeMoney = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.businessCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.chargeAddr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.thirdOrderNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.blance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.applyTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.chargeNumblance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.reqOutNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.flowno = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.ext1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.ext2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.ext3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Recharge.prototype.write = function(output) {
  output.writeStructBegin('Recharge');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.chargeType !== null && this.chargeType !== undefined) {
    output.writeFieldBegin('chargeType', Thrift.Type.I32, 4);
    output.writeI32(this.chargeType);
    output.writeFieldEnd();
  }
  if (this.chargeChannel !== null && this.chargeChannel !== undefined) {
    output.writeFieldBegin('chargeChannel', Thrift.Type.I32, 5);
    output.writeI32(this.chargeChannel);
    output.writeFieldEnd();
  }
  if (this.state1 !== null && this.state1 !== undefined) {
    output.writeFieldBegin('state1', Thrift.Type.I32, 6);
    output.writeI32(this.state1);
    output.writeFieldEnd();
  }
  if (this.state2 !== null && this.state2 !== undefined) {
    output.writeFieldBegin('state2', Thrift.Type.I32, 7);
    output.writeI32(this.state2);
    output.writeFieldEnd();
  }
  if (this.chargeReqdate !== null && this.chargeReqdate !== undefined) {
    output.writeFieldBegin('chargeReqdate', Thrift.Type.STRING, 8);
    output.writeString(this.chargeReqdate);
    output.writeFieldEnd();
  }
  if (this.chargeNotifydate !== null && this.chargeNotifydate !== undefined) {
    output.writeFieldBegin('chargeNotifydate', Thrift.Type.STRING, 9);
    output.writeString(this.chargeNotifydate);
    output.writeFieldEnd();
  }
  if (this.chargeMoney !== null && this.chargeMoney !== undefined) {
    output.writeFieldBegin('chargeMoney', Thrift.Type.STRING, 10);
    output.writeString(this.chargeMoney);
    output.writeFieldEnd();
  }
  if (this.businessCode !== null && this.businessCode !== undefined) {
    output.writeFieldBegin('businessCode', Thrift.Type.STRING, 11);
    output.writeString(this.businessCode);
    output.writeFieldEnd();
  }
  if (this.chargeAddr !== null && this.chargeAddr !== undefined) {
    output.writeFieldBegin('chargeAddr', Thrift.Type.STRING, 12);
    output.writeString(this.chargeAddr);
    output.writeFieldEnd();
  }
  if (this.thirdOrderNo !== null && this.thirdOrderNo !== undefined) {
    output.writeFieldBegin('thirdOrderNo', Thrift.Type.STRING, 13);
    output.writeString(this.thirdOrderNo);
    output.writeFieldEnd();
  }
  if (this.blance !== null && this.blance !== undefined) {
    output.writeFieldBegin('blance', Thrift.Type.STRING, 14);
    output.writeString(this.blance);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 15);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.chargeNumblance !== null && this.chargeNumblance !== undefined) {
    output.writeFieldBegin('chargeNumblance', Thrift.Type.STRING, 16);
    output.writeString(this.chargeNumblance);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 17);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 18);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.reqOutNo !== null && this.reqOutNo !== undefined) {
    output.writeFieldBegin('reqOutNo', Thrift.Type.STRING, 19);
    output.writeString(this.reqOutNo);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 20);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.flowno !== null && this.flowno !== undefined) {
    output.writeFieldBegin('flowno', Thrift.Type.STRING, 21);
    output.writeString(this.flowno);
    output.writeFieldEnd();
  }
  if (this.ext1 !== null && this.ext1 !== undefined) {
    output.writeFieldBegin('ext1', Thrift.Type.STRING, 22);
    output.writeString(this.ext1);
    output.writeFieldEnd();
  }
  if (this.ext2 !== null && this.ext2 !== undefined) {
    output.writeFieldBegin('ext2', Thrift.Type.STRING, 23);
    output.writeString(this.ext2);
    output.writeFieldEnd();
  }
  if (this.ext3 !== null && this.ext3 !== undefined) {
    output.writeFieldBegin('ext3', Thrift.Type.STRING, 24);
    output.writeString(this.ext3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RechargeListResult = module.exports.RechargeListResult = function(args) {
  this.result = null;
  this.recharges = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.recharges !== undefined) {
      this.recharges = args.recharges;
    }
  }
};
RechargeListResult.prototype = {};
RechargeListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.recharges = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Recharge();
          elem14.read(input);
          this.recharges.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RechargeListResult.prototype.write = function(output) {
  output.writeStructBegin('RechargeListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.recharges !== null && this.recharges !== undefined) {
    output.writeFieldBegin('recharges', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recharges.length);
    for (var iter15 in this.recharges)
    {
      if (this.recharges.hasOwnProperty(iter15))
      {
        iter15 = this.recharges[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotifyRecharge = module.exports.NotifyRecharge = function(args) {
  this.agtPhone = null;
  this.reqStreamId = null;
  this.state = null;
  this.sign = null;
  if (args) {
    if (args.agtPhone !== undefined) {
      this.agtPhone = args.agtPhone;
    }
    if (args.reqStreamId !== undefined) {
      this.reqStreamId = args.reqStreamId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
  }
};
NotifyRecharge.prototype = {};
NotifyRecharge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agtPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reqStreamId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotifyRecharge.prototype.write = function(output) {
  output.writeStructBegin('NotifyRecharge');
  if (this.agtPhone !== null && this.agtPhone !== undefined) {
    output.writeFieldBegin('agtPhone', Thrift.Type.STRING, 1);
    output.writeString(this.agtPhone);
    output.writeFieldEnd();
  }
  if (this.reqStreamId !== null && this.reqStreamId !== undefined) {
    output.writeFieldBegin('reqStreamId', Thrift.Type.STRING, 2);
    output.writeString(this.reqStreamId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 4);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameParam = module.exports.ThirdGameParam = function(args) {
  this.thirdGameId = null;
  this.firstpy = null;
  this.name = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
    if (args.firstpy !== undefined) {
      this.firstpy = args.firstpy;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThirdGameParam.prototype = {};
ThirdGameParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thirdGameId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstpy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameParam');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  if (this.firstpy !== null && this.firstpy !== undefined) {
    output.writeFieldBegin('firstpy', Thrift.Type.STRING, 2);
    output.writeString(this.firstpy);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGame = module.exports.ThirdGame = function(args) {
  this.thirdGameId = null;
  this.corp = null;
  this.code = null;
  this.startbuy = null;
  this.endbuy = null;
  this.contbuy = null;
  this.spacenum = null;
  this.buyunit = null;
  this.gameunit = null;
  this.name = null;
  this.needparam = null;
  this.mprice = null;
  this.point = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
    if (args.corp !== undefined) {
      this.corp = args.corp;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.startbuy !== undefined) {
      this.startbuy = args.startbuy;
    }
    if (args.endbuy !== undefined) {
      this.endbuy = args.endbuy;
    }
    if (args.contbuy !== undefined) {
      this.contbuy = args.contbuy;
    }
    if (args.spacenum !== undefined) {
      this.spacenum = args.spacenum;
    }
    if (args.buyunit !== undefined) {
      this.buyunit = args.buyunit;
    }
    if (args.gameunit !== undefined) {
      this.gameunit = args.gameunit;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.needparam !== undefined) {
      this.needparam = args.needparam;
    }
    if (args.mprice !== undefined) {
      this.mprice = args.mprice;
    }
    if (args.point !== undefined) {
      this.point = args.point;
    }
  }
};
ThirdGame.prototype = {};
ThirdGame.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thirdGameId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.corp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startbuy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endbuy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.contbuy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.spacenum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.buyunit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.gameunit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.needparam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.mprice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.point = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGame.prototype.write = function(output) {
  output.writeStructBegin('ThirdGame');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  if (this.corp !== null && this.corp !== undefined) {
    output.writeFieldBegin('corp', Thrift.Type.STRING, 2);
    output.writeString(this.corp);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 3);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.startbuy !== null && this.startbuy !== undefined) {
    output.writeFieldBegin('startbuy', Thrift.Type.STRING, 4);
    output.writeString(this.startbuy);
    output.writeFieldEnd();
  }
  if (this.endbuy !== null && this.endbuy !== undefined) {
    output.writeFieldBegin('endbuy', Thrift.Type.STRING, 5);
    output.writeString(this.endbuy);
    output.writeFieldEnd();
  }
  if (this.contbuy !== null && this.contbuy !== undefined) {
    output.writeFieldBegin('contbuy', Thrift.Type.STRING, 6);
    output.writeString(this.contbuy);
    output.writeFieldEnd();
  }
  if (this.spacenum !== null && this.spacenum !== undefined) {
    output.writeFieldBegin('spacenum', Thrift.Type.I32, 7);
    output.writeI32(this.spacenum);
    output.writeFieldEnd();
  }
  if (this.buyunit !== null && this.buyunit !== undefined) {
    output.writeFieldBegin('buyunit', Thrift.Type.STRING, 8);
    output.writeString(this.buyunit);
    output.writeFieldEnd();
  }
  if (this.gameunit !== null && this.gameunit !== undefined) {
    output.writeFieldBegin('gameunit', Thrift.Type.STRING, 9);
    output.writeString(this.gameunit);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.needparam !== null && this.needparam !== undefined) {
    output.writeFieldBegin('needparam', Thrift.Type.STRING, 11);
    output.writeString(this.needparam);
    output.writeFieldEnd();
  }
  if (this.mprice !== null && this.mprice !== undefined) {
    output.writeFieldBegin('mprice', Thrift.Type.STRING, 12);
    output.writeString(this.mprice);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRING, 13);
    output.writeString(this.point);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameRechargeParam = module.exports.ThirdGameRechargeParam = function(args) {
  this.thirdGameId = null;
  this.account = null;
  this.gameAreaId = null;
  this.gameAreaName = null;
  this.gameServerId = null;
  this.gameServerName = null;
  this.buyNum = null;
  this.totalAmount = null;
  this.price = null;
  this.roleId = null;
  this.roleName = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.gameAreaId !== undefined) {
      this.gameAreaId = args.gameAreaId;
    }
    if (args.gameAreaName !== undefined) {
      this.gameAreaName = args.gameAreaName;
    }
    if (args.gameServerId !== undefined) {
      this.gameServerId = args.gameServerId;
    }
    if (args.gameServerName !== undefined) {
      this.gameServerName = args.gameServerName;
    }
    if (args.buyNum !== undefined) {
      this.buyNum = args.buyNum;
    }
    if (args.totalAmount !== undefined) {
      this.totalAmount = args.totalAmount;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.roleId !== undefined) {
      this.roleId = args.roleId;
    }
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
  }
};
ThirdGameRechargeParam.prototype = {};
ThirdGameRechargeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thirdGameId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.gameAreaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.gameAreaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gameServerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.gameServerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.buyNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.totalAmount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.roleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameRechargeParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameRechargeParam');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.gameAreaId !== null && this.gameAreaId !== undefined) {
    output.writeFieldBegin('gameAreaId', Thrift.Type.STRING, 3);
    output.writeString(this.gameAreaId);
    output.writeFieldEnd();
  }
  if (this.gameAreaName !== null && this.gameAreaName !== undefined) {
    output.writeFieldBegin('gameAreaName', Thrift.Type.STRING, 4);
    output.writeString(this.gameAreaName);
    output.writeFieldEnd();
  }
  if (this.gameServerId !== null && this.gameServerId !== undefined) {
    output.writeFieldBegin('gameServerId', Thrift.Type.STRING, 5);
    output.writeString(this.gameServerId);
    output.writeFieldEnd();
  }
  if (this.gameServerName !== null && this.gameServerName !== undefined) {
    output.writeFieldBegin('gameServerName', Thrift.Type.STRING, 6);
    output.writeString(this.gameServerName);
    output.writeFieldEnd();
  }
  if (this.buyNum !== null && this.buyNum !== undefined) {
    output.writeFieldBegin('buyNum', Thrift.Type.STRING, 7);
    output.writeString(this.buyNum);
    output.writeFieldEnd();
  }
  if (this.totalAmount !== null && this.totalAmount !== undefined) {
    output.writeFieldBegin('totalAmount', Thrift.Type.STRING, 8);
    output.writeString(this.totalAmount);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 9);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.roleId !== null && this.roleId !== undefined) {
    output.writeFieldBegin('roleId', Thrift.Type.STRING, 10);
    output.writeString(this.roleId);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 11);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PYGameList = module.exports.PYGameList = function(args) {
  this.py = null;
  this.listGame = null;
  if (args) {
    if (args.py !== undefined) {
      this.py = args.py;
    }
    if (args.listGame !== undefined) {
      this.listGame = args.listGame;
    }
  }
};
PYGameList.prototype = {};
PYGameList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.py = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.listGame = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ThirdGame();
          elem22.read(input);
          this.listGame.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PYGameList.prototype.write = function(output) {
  output.writeStructBegin('PYGameList');
  if (this.py !== null && this.py !== undefined) {
    output.writeFieldBegin('py', Thrift.Type.STRING, 1);
    output.writeString(this.py);
    output.writeFieldEnd();
  }
  if (this.listGame !== null && this.listGame !== undefined) {
    output.writeFieldBegin('listGame', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.listGame.length);
    for (var iter23 in this.listGame)
    {
      if (this.listGame.hasOwnProperty(iter23))
      {
        iter23 = this.listGame[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameListResult = module.exports.ThirdGameListResult = function(args) {
  this.result = null;
  this.ThirdGame = null;
  this.pyThirdGameList = null;
  this.thirdGameList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.ThirdGame !== undefined) {
      this.ThirdGame = args.ThirdGame;
    }
    if (args.pyThirdGameList !== undefined) {
      this.pyThirdGameList = args.pyThirdGameList;
    }
    if (args.thirdGameList !== undefined) {
      this.thirdGameList = args.thirdGameList;
    }
  }
};
ThirdGameListResult.prototype = {};
ThirdGameListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ThirdGame = new ttypes.ThirdGame();
        this.ThirdGame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.pyThirdGameList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.PYGameList();
          elem30.read(input);
          this.pyThirdGameList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.thirdGameList = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new ttypes.ThirdGame();
          elem37.read(input);
          this.thirdGameList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameListResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.ThirdGame !== null && this.ThirdGame !== undefined) {
    output.writeFieldBegin('ThirdGame', Thrift.Type.STRUCT, 2);
    this.ThirdGame.write(output);
    output.writeFieldEnd();
  }
  if (this.pyThirdGameList !== null && this.pyThirdGameList !== undefined) {
    output.writeFieldBegin('pyThirdGameList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pyThirdGameList.length);
    for (var iter38 in this.pyThirdGameList)
    {
      if (this.pyThirdGameList.hasOwnProperty(iter38))
      {
        iter38 = this.pyThirdGameList[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.thirdGameList !== null && this.thirdGameList !== undefined) {
    output.writeFieldBegin('thirdGameList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.thirdGameList.length);
    for (var iter39 in this.thirdGameList)
    {
      if (this.thirdGameList.hasOwnProperty(iter39))
      {
        iter39 = this.thirdGameList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameSeaver = module.exports.GameSeaver = function(args) {
  this.gameSeaverName = null;
  this.gameSeaverId = null;
  if (args) {
    if (args.gameSeaverName !== undefined) {
      this.gameSeaverName = args.gameSeaverName;
    }
    if (args.gameSeaverId !== undefined) {
      this.gameSeaverId = args.gameSeaverId;
    }
  }
};
GameSeaver.prototype = {};
GameSeaver.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSeaverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.gameSeaverId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameSeaver.prototype.write = function(output) {
  output.writeStructBegin('GameSeaver');
  if (this.gameSeaverName !== null && this.gameSeaverName !== undefined) {
    output.writeFieldBegin('gameSeaverName', Thrift.Type.STRING, 1);
    output.writeString(this.gameSeaverName);
    output.writeFieldEnd();
  }
  if (this.gameSeaverId !== null && this.gameSeaverId !== undefined) {
    output.writeFieldBegin('gameSeaverId', Thrift.Type.STRING, 2);
    output.writeString(this.gameSeaverId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameArea = module.exports.GameArea = function(args) {
  this.gameAreaName = null;
  this.gameAreaId = null;
  this.gameSeaverList = null;
  if (args) {
    if (args.gameAreaName !== undefined) {
      this.gameAreaName = args.gameAreaName;
    }
    if (args.gameAreaId !== undefined) {
      this.gameAreaId = args.gameAreaId;
    }
    if (args.gameSeaverList !== undefined) {
      this.gameSeaverList = args.gameSeaverList;
    }
  }
};
GameArea.prototype = {};
GameArea.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameAreaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.gameAreaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.gameSeaverList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.GameSeaver();
          elem46.read(input);
          this.gameSeaverList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameArea.prototype.write = function(output) {
  output.writeStructBegin('GameArea');
  if (this.gameAreaName !== null && this.gameAreaName !== undefined) {
    output.writeFieldBegin('gameAreaName', Thrift.Type.STRING, 1);
    output.writeString(this.gameAreaName);
    output.writeFieldEnd();
  }
  if (this.gameAreaId !== null && this.gameAreaId !== undefined) {
    output.writeFieldBegin('gameAreaId', Thrift.Type.STRING, 2);
    output.writeString(this.gameAreaId);
    output.writeFieldEnd();
  }
  if (this.gameSeaverList !== null && this.gameSeaverList !== undefined) {
    output.writeFieldBegin('gameSeaverList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.gameSeaverList.length);
    for (var iter47 in this.gameSeaverList)
    {
      if (this.gameSeaverList.hasOwnProperty(iter47))
      {
        iter47 = this.gameSeaverList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameAreaListResult = module.exports.GameAreaListResult = function(args) {
  this.result = null;
  this.gameAreaList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.gameAreaList !== undefined) {
      this.gameAreaList = args.gameAreaList;
    }
  }
};
GameAreaListResult.prototype = {};
GameAreaListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.gameAreaList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.GameArea();
          elem54.read(input);
          this.gameAreaList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameAreaListResult.prototype.write = function(output) {
  output.writeStructBegin('GameAreaListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.gameAreaList !== null && this.gameAreaList !== undefined) {
    output.writeFieldBegin('gameAreaList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.gameAreaList.length);
    for (var iter55 in this.gameAreaList)
    {
      if (this.gameAreaList.hasOwnProperty(iter55))
      {
        iter55 = this.gameAreaList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameRoleResult = module.exports.GameRoleResult = function(args) {
  this.result = null;
  this.roleName = null;
  this.roleId = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
    if (args.roleId !== undefined) {
      this.roleId = args.roleId;
    }
  }
};
GameRoleResult.prototype = {};
GameRoleResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.roleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameRoleResult.prototype.write = function(output) {
  output.writeStructBegin('GameRoleResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.roleId !== null && this.roleId !== undefined) {
    output.writeFieldBegin('roleId', Thrift.Type.STRING, 3);
    output.writeString(this.roleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameCallBackParam = module.exports.ThirdGameCallBackParam = function(args) {
  this.retcode = null;
  this.username = null;
  this.gameapi = null;
  this.sporderid = null;
  this.money = null;
  this.sign = null;
  if (args) {
    if (args.retcode !== undefined) {
      this.retcode = args.retcode;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.gameapi !== undefined) {
      this.gameapi = args.gameapi;
    }
    if (args.sporderid !== undefined) {
      this.sporderid = args.sporderid;
    }
    if (args.money !== undefined) {
      this.money = args.money;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
  }
};
ThirdGameCallBackParam.prototype = {};
ThirdGameCallBackParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retcode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.gameapi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sporderid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.money = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameCallBackParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameCallBackParam');
  if (this.retcode !== null && this.retcode !== undefined) {
    output.writeFieldBegin('retcode', Thrift.Type.STRING, 1);
    output.writeString(this.retcode);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.gameapi !== null && this.gameapi !== undefined) {
    output.writeFieldBegin('gameapi', Thrift.Type.STRING, 3);
    output.writeString(this.gameapi);
    output.writeFieldEnd();
  }
  if (this.sporderid !== null && this.sporderid !== undefined) {
    output.writeFieldBegin('sporderid', Thrift.Type.STRING, 4);
    output.writeString(this.sporderid);
    output.writeFieldEnd();
  }
  if (this.money !== null && this.money !== undefined) {
    output.writeFieldBegin('money', Thrift.Type.STRING, 5);
    output.writeString(this.money);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 6);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameOrderParam = module.exports.ThirdGameOrderParam = function(args) {
  this.orderId = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
ThirdGameOrderParam.prototype = {};
ThirdGameOrderParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameOrderParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameOrderParam');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameOrder = module.exports.ThirdGameOrder = function(args) {
  this.orderId = null;
  this.account = null;
  this.state = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
ThirdGameOrder.prototype = {};
ThirdGameOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameOrder.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameOrder');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameOrderListResult = module.exports.ThirdGameOrderListResult = function(args) {
  this.result = null;
  this.thirdGameOrder = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.thirdGameOrder !== undefined) {
      this.thirdGameOrder = args.thirdGameOrder;
    }
  }
};
ThirdGameOrderListResult.prototype = {};
ThirdGameOrderListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.thirdGameOrder = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.ThirdGameOrder();
          elem62.read(input);
          this.thirdGameOrder.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameOrderListResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameOrderListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.thirdGameOrder !== null && this.thirdGameOrder !== undefined) {
    output.writeFieldBegin('thirdGameOrder', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.thirdGameOrder.length);
    for (var iter63 in this.thirdGameOrder)
    {
      if (this.thirdGameOrder.hasOwnProperty(iter63))
      {
        iter63 = this.thirdGameOrder[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MobileDic = module.exports.MobileDic = function(args) {
  this.province = null;
  this.operator = null;
  if (args) {
    if (args.province !== undefined) {
      this.province = args.province;
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
  }
};
MobileDic.prototype = {};
MobileDic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MobileDic.prototype.write = function(output) {
  output.writeStructBegin('MobileDic');
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 1);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Flow = module.exports.Flow = function(args) {
  this.flowCode = null;
  this.flowPrice = null;
  this.flowName = null;
  this.operator = null;
  this.type = null;
  this.province = null;
  if (args) {
    if (args.flowCode !== undefined) {
      this.flowCode = args.flowCode;
    }
    if (args.flowPrice !== undefined) {
      this.flowPrice = args.flowPrice;
    }
    if (args.flowName !== undefined) {
      this.flowName = args.flowName;
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.province !== undefined) {
      this.province = args.province;
    }
  }
};
Flow.prototype = {};
Flow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.flowCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.flowPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Flow.prototype.write = function(output) {
  output.writeStructBegin('Flow');
  if (this.flowCode !== null && this.flowCode !== undefined) {
    output.writeFieldBegin('flowCode', Thrift.Type.STRING, 1);
    output.writeString(this.flowCode);
    output.writeFieldEnd();
  }
  if (this.flowPrice !== null && this.flowPrice !== undefined) {
    output.writeFieldBegin('flowPrice', Thrift.Type.STRING, 2);
    output.writeString(this.flowPrice);
    output.writeFieldEnd();
  }
  if (this.flowName !== null && this.flowName !== undefined) {
    output.writeFieldBegin('flowName', Thrift.Type.STRING, 3);
    output.writeString(this.flowName);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 4);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 6);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FlowResult = module.exports.FlowResult = function(args) {
  this.result = null;
  this.flow = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.flow !== undefined) {
      this.flow = args.flow;
    }
  }
};
FlowResult.prototype = {};
FlowResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.flow = new ttypes.Flow();
        this.flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowResult.prototype.write = function(output) {
  output.writeStructBegin('FlowResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.flow !== null && this.flow !== undefined) {
    output.writeFieldBegin('flow', Thrift.Type.STRUCT, 2);
    this.flow.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MobileDicResult = module.exports.MobileDicResult = function(args) {
  this.result = null;
  this.mobileDic = null;
  this.flowList = null;
  this.localList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.mobileDic !== undefined) {
      this.mobileDic = args.mobileDic;
    }
    if (args.flowList !== undefined) {
      this.flowList = args.flowList;
    }
    if (args.localList !== undefined) {
      this.localList = args.localList;
    }
  }
};
MobileDicResult.prototype = {};
MobileDicResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mobileDic = new ttypes.MobileDic();
        this.mobileDic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.flowList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.Flow();
          elem70.read(input);
          this.flowList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.localList = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = new ttypes.Flow();
          elem77.read(input);
          this.localList.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MobileDicResult.prototype.write = function(output) {
  output.writeStructBegin('MobileDicResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.mobileDic !== null && this.mobileDic !== undefined) {
    output.writeFieldBegin('mobileDic', Thrift.Type.STRUCT, 2);
    this.mobileDic.write(output);
    output.writeFieldEnd();
  }
  if (this.flowList !== null && this.flowList !== undefined) {
    output.writeFieldBegin('flowList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.flowList.length);
    for (var iter78 in this.flowList)
    {
      if (this.flowList.hasOwnProperty(iter78))
      {
        iter78 = this.flowList[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.localList !== null && this.localList !== undefined) {
    output.writeFieldBegin('localList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.localList.length);
    for (var iter79 in this.localList)
    {
      if (this.localList.hasOwnProperty(iter79))
      {
        iter79 = this.localList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivStatisticsParam = module.exports.ActivStatisticsParam = function(args) {
  this.activName = null;
  this.activState = null;
  this.createStartTime = null;
  this.createStopTime = null;
  this.beginStartTime = null;
  this.beginStopTime = null;
  this.endStartTime = null;
  this.endStopTime = null;
  if (args) {
    if (args.activName !== undefined) {
      this.activName = args.activName;
    }
    if (args.activState !== undefined) {
      this.activState = args.activState;
    }
    if (args.createStartTime !== undefined) {
      this.createStartTime = args.createStartTime;
    }
    if (args.createStopTime !== undefined) {
      this.createStopTime = args.createStopTime;
    }
    if (args.beginStartTime !== undefined) {
      this.beginStartTime = args.beginStartTime;
    }
    if (args.beginStopTime !== undefined) {
      this.beginStopTime = args.beginStopTime;
    }
    if (args.endStartTime !== undefined) {
      this.endStartTime = args.endStartTime;
    }
    if (args.endStopTime !== undefined) {
      this.endStopTime = args.endStopTime;
    }
  }
};
ActivStatisticsParam.prototype = {};
ActivStatisticsParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createStopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.beginStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.beginStopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.endStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.endStopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivStatisticsParam.prototype.write = function(output) {
  output.writeStructBegin('ActivStatisticsParam');
  if (this.activName !== null && this.activName !== undefined) {
    output.writeFieldBegin('activName', Thrift.Type.STRING, 1);
    output.writeString(this.activName);
    output.writeFieldEnd();
  }
  if (this.activState !== null && this.activState !== undefined) {
    output.writeFieldBegin('activState', Thrift.Type.I32, 2);
    output.writeI32(this.activState);
    output.writeFieldEnd();
  }
  if (this.createStartTime !== null && this.createStartTime !== undefined) {
    output.writeFieldBegin('createStartTime', Thrift.Type.STRING, 3);
    output.writeString(this.createStartTime);
    output.writeFieldEnd();
  }
  if (this.createStopTime !== null && this.createStopTime !== undefined) {
    output.writeFieldBegin('createStopTime', Thrift.Type.STRING, 4);
    output.writeString(this.createStopTime);
    output.writeFieldEnd();
  }
  if (this.beginStartTime !== null && this.beginStartTime !== undefined) {
    output.writeFieldBegin('beginStartTime', Thrift.Type.STRING, 5);
    output.writeString(this.beginStartTime);
    output.writeFieldEnd();
  }
  if (this.beginStopTime !== null && this.beginStopTime !== undefined) {
    output.writeFieldBegin('beginStopTime', Thrift.Type.STRING, 6);
    output.writeString(this.beginStopTime);
    output.writeFieldEnd();
  }
  if (this.endStartTime !== null && this.endStartTime !== undefined) {
    output.writeFieldBegin('endStartTime', Thrift.Type.STRING, 7);
    output.writeString(this.endStartTime);
    output.writeFieldEnd();
  }
  if (this.endStopTime !== null && this.endStopTime !== undefined) {
    output.writeFieldBegin('endStopTime', Thrift.Type.STRING, 8);
    output.writeString(this.endStopTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivDetailStatisticsParam = module.exports.ActivDetailStatisticsParam = function(args) {
  this.userMobile = null;
  this.couponState = null;
  this.couponSource = null;
  this.getStartTime = null;
  this.getStopTime = null;
  this.useStartTime = null;
  this.useStopTime = null;
  if (args) {
    if (args.userMobile !== undefined) {
      this.userMobile = args.userMobile;
    }
    if (args.couponState !== undefined) {
      this.couponState = args.couponState;
    }
    if (args.couponSource !== undefined) {
      this.couponSource = args.couponSource;
    }
    if (args.getStartTime !== undefined) {
      this.getStartTime = args.getStartTime;
    }
    if (args.getStopTime !== undefined) {
      this.getStopTime = args.getStopTime;
    }
    if (args.useStartTime !== undefined) {
      this.useStartTime = args.useStartTime;
    }
    if (args.useStopTime !== undefined) {
      this.useStopTime = args.useStopTime;
    }
  }
};
ActivDetailStatisticsParam.prototype = {};
ActivDetailStatisticsParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userMobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.couponState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.couponSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.getStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.getStopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.useStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.useStopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivDetailStatisticsParam.prototype.write = function(output) {
  output.writeStructBegin('ActivDetailStatisticsParam');
  if (this.userMobile !== null && this.userMobile !== undefined) {
    output.writeFieldBegin('userMobile', Thrift.Type.STRING, 1);
    output.writeString(this.userMobile);
    output.writeFieldEnd();
  }
  if (this.couponState !== null && this.couponState !== undefined) {
    output.writeFieldBegin('couponState', Thrift.Type.I32, 2);
    output.writeI32(this.couponState);
    output.writeFieldEnd();
  }
  if (this.couponSource !== null && this.couponSource !== undefined) {
    output.writeFieldBegin('couponSource', Thrift.Type.I32, 3);
    output.writeI32(this.couponSource);
    output.writeFieldEnd();
  }
  if (this.getStartTime !== null && this.getStartTime !== undefined) {
    output.writeFieldBegin('getStartTime', Thrift.Type.STRING, 4);
    output.writeString(this.getStartTime);
    output.writeFieldEnd();
  }
  if (this.getStopTime !== null && this.getStopTime !== undefined) {
    output.writeFieldBegin('getStopTime', Thrift.Type.STRING, 5);
    output.writeString(this.getStopTime);
    output.writeFieldEnd();
  }
  if (this.useStartTime !== null && this.useStartTime !== undefined) {
    output.writeFieldBegin('useStartTime', Thrift.Type.STRING, 6);
    output.writeString(this.useStartTime);
    output.writeFieldEnd();
  }
  if (this.useStopTime !== null && this.useStopTime !== undefined) {
    output.writeFieldBegin('useStopTime', Thrift.Type.STRING, 7);
    output.writeString(this.useStopTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponStatisticsParam = module.exports.CouponStatisticsParam = function(args) {
  this.factor = null;
  this.findAll = null;
  this.allUsable = null;
  this.category = null;
  this.brand = null;
  this.merchant = null;
  this.fixed = null;
  if (args) {
    if (args.factor !== undefined) {
      this.factor = args.factor;
    }
    if (args.findAll !== undefined) {
      this.findAll = args.findAll;
    }
    if (args.allUsable !== undefined) {
      this.allUsable = args.allUsable;
    }
    if (args.category !== undefined) {
      this.category = args.category;
    }
    if (args.brand !== undefined) {
      this.brand = args.brand;
    }
    if (args.merchant !== undefined) {
      this.merchant = args.merchant;
    }
    if (args.fixed !== undefined) {
      this.fixed = args.fixed;
    }
  }
};
CouponStatisticsParam.prototype = {};
CouponStatisticsParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.factor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.findAll = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.allUsable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.category = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.brand = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.merchant = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.fixed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponStatisticsParam.prototype.write = function(output) {
  output.writeStructBegin('CouponStatisticsParam');
  if (this.factor !== null && this.factor !== undefined) {
    output.writeFieldBegin('factor', Thrift.Type.I32, 1);
    output.writeI32(this.factor);
    output.writeFieldEnd();
  }
  if (this.findAll !== null && this.findAll !== undefined) {
    output.writeFieldBegin('findAll', Thrift.Type.BOOL, 2);
    output.writeBool(this.findAll);
    output.writeFieldEnd();
  }
  if (this.allUsable !== null && this.allUsable !== undefined) {
    output.writeFieldBegin('allUsable', Thrift.Type.BOOL, 3);
    output.writeBool(this.allUsable);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.BOOL, 4);
    output.writeBool(this.category);
    output.writeFieldEnd();
  }
  if (this.brand !== null && this.brand !== undefined) {
    output.writeFieldBegin('brand', Thrift.Type.BOOL, 5);
    output.writeBool(this.brand);
    output.writeFieldEnd();
  }
  if (this.merchant !== null && this.merchant !== undefined) {
    output.writeFieldBegin('merchant', Thrift.Type.BOOL, 6);
    output.writeBool(this.merchant);
    output.writeFieldEnd();
  }
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.BOOL, 7);
    output.writeBool(this.fixed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponActiv = module.exports.CouponActiv = function(args) {
  this.activId = null;
  this.activName = null;
  this.activImg = null;
  this.startTime = null;
  this.endTime = null;
  this.couponValue = null;
  this.scoreLimit = null;
  this.couponNum = null;
  this.couponBeginTime = null;
  this.couponEndTime = null;
  this.couponType = null;
  this.couponTypeConfig = null;
  this.userType = null;
  this.regStartTime = null;
  this.regstopTime = null;
  this.userLimit = null;
  this.h5Config = null;
  this.sendLimit = null;
  if (args) {
    if (args.activId !== undefined) {
      this.activId = args.activId;
    }
    if (args.activName !== undefined) {
      this.activName = args.activName;
    }
    if (args.activImg !== undefined) {
      this.activImg = args.activImg;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.couponValue !== undefined) {
      this.couponValue = args.couponValue;
    }
    if (args.scoreLimit !== undefined) {
      this.scoreLimit = args.scoreLimit;
    }
    if (args.couponNum !== undefined) {
      this.couponNum = args.couponNum;
    }
    if (args.couponBeginTime !== undefined) {
      this.couponBeginTime = args.couponBeginTime;
    }
    if (args.couponEndTime !== undefined) {
      this.couponEndTime = args.couponEndTime;
    }
    if (args.couponType !== undefined) {
      this.couponType = args.couponType;
    }
    if (args.couponTypeConfig !== undefined) {
      this.couponTypeConfig = args.couponTypeConfig;
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.regStartTime !== undefined) {
      this.regStartTime = args.regStartTime;
    }
    if (args.regstopTime !== undefined) {
      this.regstopTime = args.regstopTime;
    }
    if (args.userLimit !== undefined) {
      this.userLimit = args.userLimit;
    }
    if (args.h5Config !== undefined) {
      this.h5Config = args.h5Config;
    }
    if (args.sendLimit !== undefined) {
      this.sendLimit = args.sendLimit;
    }
  }
};
CouponActiv.prototype = {};
CouponActiv.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activImg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.couponValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.scoreLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.couponNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.couponBeginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.couponEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.couponType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.couponTypeConfig = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.regStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.regstopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.userLimit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.h5Config = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.sendLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponActiv.prototype.write = function(output) {
  output.writeStructBegin('CouponActiv');
  if (this.activId !== null && this.activId !== undefined) {
    output.writeFieldBegin('activId', Thrift.Type.I32, 1);
    output.writeI32(this.activId);
    output.writeFieldEnd();
  }
  if (this.activName !== null && this.activName !== undefined) {
    output.writeFieldBegin('activName', Thrift.Type.STRING, 2);
    output.writeString(this.activName);
    output.writeFieldEnd();
  }
  if (this.activImg !== null && this.activImg !== undefined) {
    output.writeFieldBegin('activImg', Thrift.Type.STRING, 3);
    output.writeString(this.activImg);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 4);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 5);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.couponValue !== null && this.couponValue !== undefined) {
    output.writeFieldBegin('couponValue', Thrift.Type.I32, 6);
    output.writeI32(this.couponValue);
    output.writeFieldEnd();
  }
  if (this.scoreLimit !== null && this.scoreLimit !== undefined) {
    output.writeFieldBegin('scoreLimit', Thrift.Type.I32, 7);
    output.writeI32(this.scoreLimit);
    output.writeFieldEnd();
  }
  if (this.couponNum !== null && this.couponNum !== undefined) {
    output.writeFieldBegin('couponNum', Thrift.Type.I32, 8);
    output.writeI32(this.couponNum);
    output.writeFieldEnd();
  }
  if (this.couponBeginTime !== null && this.couponBeginTime !== undefined) {
    output.writeFieldBegin('couponBeginTime', Thrift.Type.STRING, 9);
    output.writeString(this.couponBeginTime);
    output.writeFieldEnd();
  }
  if (this.couponEndTime !== null && this.couponEndTime !== undefined) {
    output.writeFieldBegin('couponEndTime', Thrift.Type.STRING, 10);
    output.writeString(this.couponEndTime);
    output.writeFieldEnd();
  }
  if (this.couponType !== null && this.couponType !== undefined) {
    output.writeFieldBegin('couponType', Thrift.Type.I32, 11);
    output.writeI32(this.couponType);
    output.writeFieldEnd();
  }
  if (this.couponTypeConfig !== null && this.couponTypeConfig !== undefined) {
    output.writeFieldBegin('couponTypeConfig', Thrift.Type.STRING, 12);
    output.writeString(this.couponTypeConfig);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 13);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.regStartTime !== null && this.regStartTime !== undefined) {
    output.writeFieldBegin('regStartTime', Thrift.Type.STRING, 14);
    output.writeString(this.regStartTime);
    output.writeFieldEnd();
  }
  if (this.regstopTime !== null && this.regstopTime !== undefined) {
    output.writeFieldBegin('regstopTime', Thrift.Type.STRING, 15);
    output.writeString(this.regstopTime);
    output.writeFieldEnd();
  }
  if (this.userLimit !== null && this.userLimit !== undefined) {
    output.writeFieldBegin('userLimit', Thrift.Type.STRING, 16);
    output.writeString(this.userLimit);
    output.writeFieldEnd();
  }
  if (this.h5Config !== null && this.h5Config !== undefined) {
    output.writeFieldBegin('h5Config', Thrift.Type.STRING, 17);
    output.writeString(this.h5Config);
    output.writeFieldEnd();
  }
  if (this.sendLimit !== null && this.sendLimit !== undefined) {
    output.writeFieldBegin('sendLimit', Thrift.Type.I32, 18);
    output.writeI32(this.sendLimit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponActivDetail = module.exports.CouponActivDetail = function(args) {
  this.activId = null;
  this.activName = null;
  this.activImg = null;
  this.startTime = null;
  this.endTime = null;
  this.couponValue = null;
  this.scoreLimit = null;
  this.couponNum = null;
  this.couponBeginTime = null;
  this.couponEndTime = null;
  this.couponType = null;
  this.couponTypeConfig = null;
  this.userType = null;
  this.regStartTime = null;
  this.regstopTime = null;
  this.userLimit = null;
  this.h5Config = null;
  this.sendNum = null;
  this.usedNum = null;
  this.createTime = null;
  this.state = null;
  if (args) {
    if (args.activId !== undefined) {
      this.activId = args.activId;
    }
    if (args.activName !== undefined) {
      this.activName = args.activName;
    }
    if (args.activImg !== undefined) {
      this.activImg = args.activImg;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.couponValue !== undefined) {
      this.couponValue = args.couponValue;
    }
    if (args.scoreLimit !== undefined) {
      this.scoreLimit = args.scoreLimit;
    }
    if (args.couponNum !== undefined) {
      this.couponNum = args.couponNum;
    }
    if (args.couponBeginTime !== undefined) {
      this.couponBeginTime = args.couponBeginTime;
    }
    if (args.couponEndTime !== undefined) {
      this.couponEndTime = args.couponEndTime;
    }
    if (args.couponType !== undefined) {
      this.couponType = args.couponType;
    }
    if (args.couponTypeConfig !== undefined) {
      this.couponTypeConfig = args.couponTypeConfig;
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.regStartTime !== undefined) {
      this.regStartTime = args.regStartTime;
    }
    if (args.regstopTime !== undefined) {
      this.regstopTime = args.regstopTime;
    }
    if (args.userLimit !== undefined) {
      this.userLimit = args.userLimit;
    }
    if (args.h5Config !== undefined) {
      this.h5Config = args.h5Config;
    }
    if (args.sendNum !== undefined) {
      this.sendNum = args.sendNum;
    }
    if (args.usedNum !== undefined) {
      this.usedNum = args.usedNum;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
CouponActivDetail.prototype = {};
CouponActivDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activImg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.couponValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.scoreLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.couponNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.couponBeginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.couponEndTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.couponType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.couponTypeConfig = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.regStartTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.regstopTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.userLimit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.h5Config = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.sendNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.usedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponActivDetail.prototype.write = function(output) {
  output.writeStructBegin('CouponActivDetail');
  if (this.activId !== null && this.activId !== undefined) {
    output.writeFieldBegin('activId', Thrift.Type.I32, 1);
    output.writeI32(this.activId);
    output.writeFieldEnd();
  }
  if (this.activName !== null && this.activName !== undefined) {
    output.writeFieldBegin('activName', Thrift.Type.STRING, 2);
    output.writeString(this.activName);
    output.writeFieldEnd();
  }
  if (this.activImg !== null && this.activImg !== undefined) {
    output.writeFieldBegin('activImg', Thrift.Type.STRING, 3);
    output.writeString(this.activImg);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 4);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 5);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.couponValue !== null && this.couponValue !== undefined) {
    output.writeFieldBegin('couponValue', Thrift.Type.I32, 6);
    output.writeI32(this.couponValue);
    output.writeFieldEnd();
  }
  if (this.scoreLimit !== null && this.scoreLimit !== undefined) {
    output.writeFieldBegin('scoreLimit', Thrift.Type.I32, 7);
    output.writeI32(this.scoreLimit);
    output.writeFieldEnd();
  }
  if (this.couponNum !== null && this.couponNum !== undefined) {
    output.writeFieldBegin('couponNum', Thrift.Type.I32, 8);
    output.writeI32(this.couponNum);
    output.writeFieldEnd();
  }
  if (this.couponBeginTime !== null && this.couponBeginTime !== undefined) {
    output.writeFieldBegin('couponBeginTime', Thrift.Type.STRING, 9);
    output.writeString(this.couponBeginTime);
    output.writeFieldEnd();
  }
  if (this.couponEndTime !== null && this.couponEndTime !== undefined) {
    output.writeFieldBegin('couponEndTime', Thrift.Type.STRING, 10);
    output.writeString(this.couponEndTime);
    output.writeFieldEnd();
  }
  if (this.couponType !== null && this.couponType !== undefined) {
    output.writeFieldBegin('couponType', Thrift.Type.I32, 11);
    output.writeI32(this.couponType);
    output.writeFieldEnd();
  }
  if (this.couponTypeConfig !== null && this.couponTypeConfig !== undefined) {
    output.writeFieldBegin('couponTypeConfig', Thrift.Type.STRING, 12);
    output.writeString(this.couponTypeConfig);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 13);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.regStartTime !== null && this.regStartTime !== undefined) {
    output.writeFieldBegin('regStartTime', Thrift.Type.STRING, 14);
    output.writeString(this.regStartTime);
    output.writeFieldEnd();
  }
  if (this.regstopTime !== null && this.regstopTime !== undefined) {
    output.writeFieldBegin('regstopTime', Thrift.Type.STRING, 15);
    output.writeString(this.regstopTime);
    output.writeFieldEnd();
  }
  if (this.userLimit !== null && this.userLimit !== undefined) {
    output.writeFieldBegin('userLimit', Thrift.Type.STRING, 16);
    output.writeString(this.userLimit);
    output.writeFieldEnd();
  }
  if (this.h5Config !== null && this.h5Config !== undefined) {
    output.writeFieldBegin('h5Config', Thrift.Type.STRING, 17);
    output.writeString(this.h5Config);
    output.writeFieldEnd();
  }
  if (this.sendNum !== null && this.sendNum !== undefined) {
    output.writeFieldBegin('sendNum', Thrift.Type.I32, 18);
    output.writeI32(this.sendNum);
    output.writeFieldEnd();
  }
  if (this.usedNum !== null && this.usedNum !== undefined) {
    output.writeFieldBegin('usedNum', Thrift.Type.I32, 19);
    output.writeI32(this.usedNum);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 20);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 21);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponActivSource = module.exports.CouponActivSource = function(args) {
  this.id = null;
  this.name = null;
  this.detail = null;
  this.createTime = null;
  this.state = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.detail !== undefined) {
      this.detail = args.detail;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
CouponActivSource.prototype = {};
CouponActivSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.detail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponActivSource.prototype.write = function(output) {
  output.writeStructBegin('CouponActivSource');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.detail !== null && this.detail !== undefined) {
    output.writeFieldBegin('detail', Thrift.Type.STRING, 3);
    output.writeString(this.detail);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 4);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Coupon = module.exports.Coupon = function(args) {
  this.id = null;
  this.mobile = null;
  this.couponState = null;
  this.receiveTime = null;
  this.useTime = null;
  this.couponSource = null;
  this.userId = null;
  this.activeId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.couponState !== undefined) {
      this.couponState = args.couponState;
    }
    if (args.receiveTime !== undefined) {
      this.receiveTime = args.receiveTime;
    }
    if (args.useTime !== undefined) {
      this.useTime = args.useTime;
    }
    if (args.couponSource !== undefined) {
      this.couponSource = args.couponSource;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.activeId !== undefined) {
      this.activeId = args.activeId;
    }
  }
};
Coupon.prototype = {};
Coupon.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.couponState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.receiveTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.useTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.couponSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.activeId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Coupon.prototype.write = function(output) {
  output.writeStructBegin('Coupon');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.couponState !== null && this.couponState !== undefined) {
    output.writeFieldBegin('couponState', Thrift.Type.I32, 3);
    output.writeI32(this.couponState);
    output.writeFieldEnd();
  }
  if (this.receiveTime !== null && this.receiveTime !== undefined) {
    output.writeFieldBegin('receiveTime', Thrift.Type.STRING, 4);
    output.writeString(this.receiveTime);
    output.writeFieldEnd();
  }
  if (this.useTime !== null && this.useTime !== undefined) {
    output.writeFieldBegin('useTime', Thrift.Type.STRING, 5);
    output.writeString(this.useTime);
    output.writeFieldEnd();
  }
  if (this.couponSource !== null && this.couponSource !== undefined) {
    output.writeFieldBegin('couponSource', Thrift.Type.I32, 6);
    output.writeI32(this.couponSource);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 7);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.activeId !== null && this.activeId !== undefined) {
    output.writeFieldBegin('activeId', Thrift.Type.I32, 8);
    output.writeI32(this.activeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivListResult = module.exports.ActivListResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.activeList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.activeList !== undefined) {
      this.activeList = args.activeList;
    }
  }
};
ActivListResult.prototype = {};
ActivListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.activeList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.CouponActivDetail();
          elem86.read(input);
          this.activeList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivListResult.prototype.write = function(output) {
  output.writeStructBegin('ActivListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.activeList !== null && this.activeList !== undefined) {
    output.writeFieldBegin('activeList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.activeList.length);
    for (var iter87 in this.activeList)
    {
      if (this.activeList.hasOwnProperty(iter87))
      {
        iter87 = this.activeList[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponListResult = module.exports.CouponListResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.couponList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.couponList !== undefined) {
      this.couponList = args.couponList;
    }
  }
};
CouponListResult.prototype = {};
CouponListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.couponList = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.Coupon();
          elem94.read(input);
          this.couponList.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponListResult.prototype.write = function(output) {
  output.writeStructBegin('CouponListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.couponList !== null && this.couponList !== undefined) {
    output.writeFieldBegin('couponList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.couponList.length);
    for (var iter95 in this.couponList)
    {
      if (this.couponList.hasOwnProperty(iter95))
      {
        iter95 = this.couponList[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebActivResult = module.exports.WebActivResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.activeList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.activeList !== undefined) {
      this.activeList = args.activeList;
    }
  }
};
WebActivResult.prototype = {};
WebActivResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.activeList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.CouponActivDetail();
          elem102.read(input);
          this.activeList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebActivResult.prototype.write = function(output) {
  output.writeStructBegin('WebActivResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.activeList !== null && this.activeList !== undefined) {
    output.writeFieldBegin('activeList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.activeList.length);
    for (var iter103 in this.activeList)
    {
      if (this.activeList.hasOwnProperty(iter103))
      {
        iter103 = this.activeList[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SelectCouponResult = module.exports.SelectCouponResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.activeList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.activeList !== undefined) {
      this.activeList = args.activeList;
    }
  }
};
SelectCouponResult.prototype = {};
SelectCouponResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.activeList = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.CouponActivDetail();
          elem110.read(input);
          this.activeList.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SelectCouponResult.prototype.write = function(output) {
  output.writeStructBegin('SelectCouponResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.activeList !== null && this.activeList !== undefined) {
    output.writeFieldBegin('activeList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.activeList.length);
    for (var iter111 in this.activeList)
    {
      if (this.activeList.hasOwnProperty(iter111))
      {
        iter111 = this.activeList[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserCouponListResult = module.exports.UserCouponListResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.couponList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.couponList !== undefined) {
      this.couponList = args.couponList;
    }
  }
};
UserCouponListResult.prototype = {};
UserCouponListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.couponList = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Coupon();
          elem118.read(input);
          this.couponList.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCouponListResult.prototype.write = function(output) {
  output.writeStructBegin('UserCouponListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.couponList !== null && this.couponList !== undefined) {
    output.writeFieldBegin('couponList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.couponList.length);
    for (var iter119 in this.couponList)
    {
      if (this.couponList.hasOwnProperty(iter119))
      {
        iter119 = this.couponList[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveByProductResult = module.exports.ActiveByProductResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.couponList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.couponList !== undefined) {
      this.couponList = args.couponList;
    }
  }
};
ActiveByProductResult.prototype = {};
ActiveByProductResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.couponList = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Coupon();
          elem126.read(input);
          this.couponList.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveByProductResult.prototype.write = function(output) {
  output.writeStructBegin('ActiveByProductResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.couponList !== null && this.couponList !== undefined) {
    output.writeFieldBegin('couponList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.couponList.length);
    for (var iter127 in this.couponList)
    {
      if (this.couponList.hasOwnProperty(iter127))
      {
        iter127 = this.couponList[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponConsumeResult = module.exports.CouponConsumeResult = function(args) {
  this.result = null;
  this.openCouponList = null;
  this.offCouponList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.openCouponList !== undefined) {
      this.openCouponList = args.openCouponList;
    }
    if (args.offCouponList !== undefined) {
      this.offCouponList = args.offCouponList;
    }
  }
};
CouponConsumeResult.prototype = {};
CouponConsumeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.openCouponList = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.Coupon();
          elem134.read(input);
          this.openCouponList.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.offCouponList = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = new ttypes.Coupon();
          elem141.read(input);
          this.offCouponList.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponConsumeResult.prototype.write = function(output) {
  output.writeStructBegin('CouponConsumeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.openCouponList !== null && this.openCouponList !== undefined) {
    output.writeFieldBegin('openCouponList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.openCouponList.length);
    for (var iter142 in this.openCouponList)
    {
      if (this.openCouponList.hasOwnProperty(iter142))
      {
        iter142 = this.openCouponList[iter142];
        iter142.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offCouponList !== null && this.offCouponList !== undefined) {
    output.writeFieldBegin('offCouponList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.offCouponList.length);
    for (var iter143 in this.offCouponList)
    {
      if (this.offCouponList.hasOwnProperty(iter143))
      {
        iter143 = this.offCouponList[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponNumResult = module.exports.CouponNumResult = function(args) {
  this.result = null;
  this.noUseNum = null;
  this.alreadyUsedNum = null;
  this.timeOutNum = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.noUseNum !== undefined) {
      this.noUseNum = args.noUseNum;
    }
    if (args.alreadyUsedNum !== undefined) {
      this.alreadyUsedNum = args.alreadyUsedNum;
    }
    if (args.timeOutNum !== undefined) {
      this.timeOutNum = args.timeOutNum;
    }
  }
};
CouponNumResult.prototype = {};
CouponNumResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.noUseNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.alreadyUsedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.timeOutNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponNumResult.prototype.write = function(output) {
  output.writeStructBegin('CouponNumResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.noUseNum !== null && this.noUseNum !== undefined) {
    output.writeFieldBegin('noUseNum', Thrift.Type.I32, 2);
    output.writeI32(this.noUseNum);
    output.writeFieldEnd();
  }
  if (this.alreadyUsedNum !== null && this.alreadyUsedNum !== undefined) {
    output.writeFieldBegin('alreadyUsedNum', Thrift.Type.I32, 3);
    output.writeI32(this.alreadyUsedNum);
    output.writeFieldEnd();
  }
  if (this.timeOutNum !== null && this.timeOutNum !== undefined) {
    output.writeFieldBegin('timeOutNum', Thrift.Type.I32, 4);
    output.writeI32(this.timeOutNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivityLimitResult = module.exports.ActivityLimitResult = function(args) {
  this.result = null;
  this.type = null;
  this.limitContent = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.limitContent !== undefined) {
      this.limitContent = args.limitContent;
    }
  }
};
ActivityLimitResult.prototype = {};
ActivityLimitResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.limitContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityLimitResult.prototype.write = function(output) {
  output.writeStructBegin('ActivityLimitResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.limitContent !== null && this.limitContent !== undefined) {
    output.writeFieldBegin('limitContent', Thrift.Type.STRING, 3);
    output.writeString(this.limitContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserCouponDetail = module.exports.UserCouponDetail = function(args) {
  this.id = null;
  this.scoreLimit = null;
  this.value = null;
  this.type = null;
  this.desc = null;
  this.beginTime = null;
  this.endTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.scoreLimit !== undefined) {
      this.scoreLimit = args.scoreLimit;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.beginTime !== undefined) {
      this.beginTime = args.beginTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
UserCouponDetail.prototype = {};
UserCouponDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.scoreLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.beginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCouponDetail.prototype.write = function(output) {
  output.writeStructBegin('UserCouponDetail');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.scoreLimit !== null && this.scoreLimit !== undefined) {
    output.writeFieldBegin('scoreLimit', Thrift.Type.I32, 2);
    output.writeI32(this.scoreLimit);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 3);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 5);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.beginTime !== null && this.beginTime !== undefined) {
    output.writeFieldBegin('beginTime', Thrift.Type.STRING, 6);
    output.writeString(this.beginTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 7);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserCouponDetailListResult = module.exports.UserCouponDetailListResult = function(args) {
  this.result = null;
  this.useList = null;
  this.noUsedList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.useList !== undefined) {
      this.useList = args.useList;
    }
    if (args.noUsedList !== undefined) {
      this.noUsedList = args.noUsedList;
    }
  }
};
UserCouponDetailListResult.prototype = {};
UserCouponDetailListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.useList = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new ttypes.UserCouponDetail();
          elem150.read(input);
          this.useList.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size151 = 0;
        var _rtmp3155;
        this.noUsedList = [];
        var _etype154 = 0;
        _rtmp3155 = input.readListBegin();
        _etype154 = _rtmp3155.etype;
        _size151 = _rtmp3155.size;
        for (var _i156 = 0; _i156 < _size151; ++_i156)
        {
          var elem157 = null;
          elem157 = new ttypes.UserCouponDetail();
          elem157.read(input);
          this.noUsedList.push(elem157);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCouponDetailListResult.prototype.write = function(output) {
  output.writeStructBegin('UserCouponDetailListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.useList !== null && this.useList !== undefined) {
    output.writeFieldBegin('useList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.useList.length);
    for (var iter158 in this.useList)
    {
      if (this.useList.hasOwnProperty(iter158))
      {
        iter158 = this.useList[iter158];
        iter158.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.noUsedList !== null && this.noUsedList !== undefined) {
    output.writeFieldBegin('noUsedList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.noUsedList.length);
    for (var iter159 in this.noUsedList)
    {
      if (this.noUsedList.hasOwnProperty(iter159))
      {
        iter159 = this.noUsedList[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductDetail = module.exports.ProductDetail = function(args) {
  this.productId = null;
  this.brandId = null;
  this.subjectId = null;
  this.sellerId = null;
  this.price = null;
  this.num = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.brandId !== undefined) {
      this.brandId = args.brandId;
    }
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
  }
};
ProductDetail.prototype = {};
ProductDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.price = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductDetail.prototype.write = function(output) {
  output.writeStructBegin('ProductDetail');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 2);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 3);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 4);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.I32, 5);
    output.writeI32(this.price);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 6);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserCouponMutexResult = module.exports.UserCouponMutexResult = function(args) {
  this.result = null;
  this.couponIdList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.couponIdList !== undefined) {
      this.couponIdList = args.couponIdList;
    }
  }
};
UserCouponMutexResult.prototype = {};
UserCouponMutexResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.couponIdList = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString();
          this.couponIdList.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCouponMutexResult.prototype.write = function(output) {
  output.writeStructBegin('UserCouponMutexResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.couponIdList !== null && this.couponIdList !== undefined) {
    output.writeFieldBegin('couponIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.couponIdList.length);
    for (var iter167 in this.couponIdList)
    {
      if (this.couponIdList.hasOwnProperty(iter167))
      {
        iter167 = this.couponIdList[iter167];
        output.writeString(iter167);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

