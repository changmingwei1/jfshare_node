//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var order_ttypes = require('./order_types')
var pay_ttypes = require('./pay_types')


var ttypes = module.exports = {};
BuySellerDetail = module.exports.BuySellerDetail = function(args) {
  this.sellerId = null;
  this.sellerName = null;
  this.buyerComment = null;
  this.productList = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.buyerComment !== undefined) {
      this.buyerComment = args.buyerComment;
    }
    if (args.productList !== undefined) {
      this.productList = args.productList;
    }
  }
};
BuySellerDetail.prototype = {};
BuySellerDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.buyerComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.productList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new order_ttypes.OrderInfo();
          elem6.read(input);
          this.productList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuySellerDetail.prototype.write = function(output) {
  output.writeStructBegin('BuySellerDetail');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 2);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.buyerComment !== null && this.buyerComment !== undefined) {
    output.writeFieldBegin('buyerComment', Thrift.Type.STRING, 3);
    output.writeString(this.buyerComment);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter7 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter7))
      {
        iter7 = this.productList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyInfo = module.exports.BuyInfo = function(args) {
  this.userId = null;
  this.userName = null;
  this.amount = null;
  this.payChannel = null;
  this.deliverInfo = null;
  this.sellerDetailList = null;
  this.fromSource = null;
  this.wi = null;
  this.exchangeScore = null;
  this.exchangeCash = null;
  this.tradeCode = null;
  this.fromBatch = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.deliverInfo !== undefined) {
      this.deliverInfo = args.deliverInfo;
    }
    if (args.sellerDetailList !== undefined) {
      this.sellerDetailList = args.sellerDetailList;
    }
    if (args.fromSource !== undefined) {
      this.fromSource = args.fromSource;
    }
    if (args.wi !== undefined) {
      this.wi = args.wi;
    }
    if (args.exchangeScore !== undefined) {
      this.exchangeScore = args.exchangeScore;
    }
    if (args.exchangeCash !== undefined) {
      this.exchangeCash = args.exchangeCash;
    }
    if (args.tradeCode !== undefined) {
      this.tradeCode = args.tradeCode;
    }
    if (args.fromBatch !== undefined) {
      this.fromBatch = args.fromBatch;
    }
  }
};
BuyInfo.prototype = {};
BuyInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payChannel = new pay_ttypes.PayChannel();
        this.payChannel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.deliverInfo = new order_ttypes.DeliverInfo();
        this.deliverInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.sellerDetailList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.BuySellerDetail();
          elem14.read(input);
          this.sellerDetailList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.fromSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.wi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.exchangeScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeCash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.tradeCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.fromBatch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyInfo.prototype.write = function(output) {
  output.writeStructBegin('BuyInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 3);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.STRUCT, 4);
    this.payChannel.write(output);
    output.writeFieldEnd();
  }
  if (this.deliverInfo !== null && this.deliverInfo !== undefined) {
    output.writeFieldBegin('deliverInfo', Thrift.Type.STRUCT, 5);
    this.deliverInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.sellerDetailList !== null && this.sellerDetailList !== undefined) {
    output.writeFieldBegin('sellerDetailList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.sellerDetailList.length);
    for (var iter15 in this.sellerDetailList)
    {
      if (this.sellerDetailList.hasOwnProperty(iter15))
      {
        iter15 = this.sellerDetailList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.I32, 7);
    output.writeI32(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.wi !== null && this.wi !== undefined) {
    output.writeFieldBegin('wi', Thrift.Type.STRING, 8);
    output.writeString(this.wi);
    output.writeFieldEnd();
  }
  if (this.exchangeScore !== null && this.exchangeScore !== undefined) {
    output.writeFieldBegin('exchangeScore', Thrift.Type.I32, 9);
    output.writeI32(this.exchangeScore);
    output.writeFieldEnd();
  }
  if (this.exchangeCash !== null && this.exchangeCash !== undefined) {
    output.writeFieldBegin('exchangeCash', Thrift.Type.STRING, 10);
    output.writeString(this.exchangeCash);
    output.writeFieldEnd();
  }
  if (this.tradeCode !== null && this.tradeCode !== undefined) {
    output.writeFieldBegin('tradeCode', Thrift.Type.STRING, 11);
    output.writeString(this.tradeCode);
    output.writeFieldEnd();
  }
  if (this.fromBatch !== null && this.fromBatch !== undefined) {
    output.writeFieldBegin('fromBatch', Thrift.Type.I32, 12);
    output.writeI32(this.fromBatch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderConfirmResult = module.exports.OrderConfirmResult = function(args) {
  this.result = null;
  this.orderIdList = null;
  this.extend = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.orderIdList !== undefined) {
      this.orderIdList = args.orderIdList;
    }
    if (args.extend !== undefined) {
      this.extend = args.extend;
    }
  }
};
OrderConfirmResult.prototype = {};
OrderConfirmResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.orderIdList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.orderIdList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.extend = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderConfirmResult.prototype.write = function(output) {
  output.writeStructBegin('OrderConfirmResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.orderIdList !== null && this.orderIdList !== undefined) {
    output.writeFieldBegin('orderIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.orderIdList.length);
    for (var iter23 in this.orderIdList)
    {
      if (this.orderIdList.hasOwnProperty(iter23))
      {
        iter23 = this.orderIdList[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.STRING, 3);
    output.writeString(this.extend);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

