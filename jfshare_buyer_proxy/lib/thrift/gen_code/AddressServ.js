//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./address_types');
//HELPER FUNCTIONS AND STRUCTURES

AddressServ_addAddress_args = function(args) {
  this.addressInfo = null;
  if (args) {
    if (args.addressInfo !== undefined) {
      this.addressInfo = args.addressInfo;
    }
  }
};
AddressServ_addAddress_args.prototype = {};
AddressServ_addAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressInfo = new ttypes.AddressInfo();
        this.addressInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_addAddress_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_addAddress_args');
  if (this.addressInfo !== null && this.addressInfo !== undefined) {
    output.writeFieldBegin('addressInfo', Thrift.Type.STRUCT, 1);
    this.addressInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_addAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_addAddress_result.prototype = {};
AddressServ_addAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_addAddress_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_addAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_updateAddress_args = function(args) {
  this.addressInfo = null;
  if (args) {
    if (args.addressInfo !== undefined) {
      this.addressInfo = args.addressInfo;
    }
  }
};
AddressServ_updateAddress_args.prototype = {};
AddressServ_updateAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressInfo = new ttypes.AddressInfo();
        this.addressInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_updateAddress_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_updateAddress_args');
  if (this.addressInfo !== null && this.addressInfo !== undefined) {
    output.writeFieldBegin('addressInfo', Thrift.Type.STRUCT, 1);
    this.addressInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_updateAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_updateAddress_result.prototype = {};
AddressServ_updateAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_updateAddress_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_updateAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_delAddress_args = function(args) {
  this.userId = null;
  this.id = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
AddressServ_delAddress_args.prototype = {};
AddressServ_delAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_delAddress_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_delAddress_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_delAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_delAddress_result.prototype = {};
AddressServ_delAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_delAddress_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_delAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_queryAddress_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AddressServ_queryAddress_args.prototype = {};
AddressServ_queryAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_queryAddress_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_queryAddress_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_queryAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_queryAddress_result.prototype = {};
AddressServ_queryAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddressInfoListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_queryAddress_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_queryAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_queryAddressById_args = function(args) {
  this.id = null;
  this.userId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AddressServ_queryAddressById_args.prototype = {};
AddressServ_queryAddressById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_queryAddressById_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_queryAddressById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_queryAddressById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_queryAddressById_result.prototype = {};
AddressServ_queryAddressById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddressInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_queryAddressById_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_queryAddressById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_queryAddressInfo_args = function(args) {
  this.id = null;
  this.userId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AddressServ_queryAddressInfo_args.prototype = {};
AddressServ_queryAddressInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_queryAddressInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_queryAddressInfo_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_queryAddressInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_queryAddressInfo_result.prototype = {};
AddressServ_queryAddressInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_queryAddressInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_queryAddressInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_setDefaultAddress_args = function(args) {
  this.userId = null;
  this.addressId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.addressId !== undefined) {
      this.addressId = args.addressId;
    }
  }
};
AddressServ_setDefaultAddress_args.prototype = {};
AddressServ_setDefaultAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.addressId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_setDefaultAddress_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_setDefaultAddress_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.addressId !== null && this.addressId !== undefined) {
    output.writeFieldBegin('addressId', Thrift.Type.I32, 2);
    output.writeI32(this.addressId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_setDefaultAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_setDefaultAddress_result.prototype = {};
AddressServ_setDefaultAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_setDefaultAddress_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_setDefaultAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_getDefaultAddress_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AddressServ_getDefaultAddress_args.prototype = {};
AddressServ_getDefaultAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_getDefaultAddress_args.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_getDefaultAddress_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServ_getDefaultAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AddressServ_getDefaultAddress_result.prototype = {};
AddressServ_getDefaultAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddressInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressServ_getDefaultAddress_result.prototype.write = function(output) {
  output.writeStructBegin('AddressServ_getDefaultAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
AddressServClient.prototype = {};
AddressServClient.prototype.seqid = function() { return this._seqid; }
AddressServClient.prototype.new_seqid = function() { return this._seqid += 1; }
AddressServClient.prototype.addAddress = function(addressInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addAddress(addressInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addAddress(addressInfo);
  }
};

AddressServClient.prototype.send_addAddress = function(addressInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_addAddress_args();
  args.addressInfo = addressInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_addAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_addAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addAddress failed: unknown result');
};
AddressServClient.prototype.updateAddress = function(addressInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateAddress(addressInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateAddress(addressInfo);
  }
};

AddressServClient.prototype.send_updateAddress = function(addressInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_updateAddress_args();
  args.addressInfo = addressInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_updateAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_updateAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateAddress failed: unknown result');
};
AddressServClient.prototype.delAddress = function(userId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delAddress(userId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delAddress(userId, id);
  }
};

AddressServClient.prototype.send_delAddress = function(userId, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_delAddress_args();
  args.userId = userId;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_delAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_delAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delAddress failed: unknown result');
};
AddressServClient.prototype.queryAddress = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryAddress(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryAddress(userId);
  }
};

AddressServClient.prototype.send_queryAddress = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_queryAddress_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_queryAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_queryAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryAddress failed: unknown result');
};
AddressServClient.prototype.queryAddressById = function(id, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryAddressById(id, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryAddressById(id, userId);
  }
};

AddressServClient.prototype.send_queryAddressById = function(id, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryAddressById', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_queryAddressById_args();
  args.id = id;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_queryAddressById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_queryAddressById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryAddressById failed: unknown result');
};
AddressServClient.prototype.queryAddressInfo = function(id, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryAddressInfo(id, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryAddressInfo(id, userId);
  }
};

AddressServClient.prototype.send_queryAddressInfo = function(id, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryAddressInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_queryAddressInfo_args();
  args.id = id;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_queryAddressInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_queryAddressInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryAddressInfo failed: unknown result');
};
AddressServClient.prototype.setDefaultAddress = function(userId, addressId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setDefaultAddress(userId, addressId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setDefaultAddress(userId, addressId);
  }
};

AddressServClient.prototype.send_setDefaultAddress = function(userId, addressId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setDefaultAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_setDefaultAddress_args();
  args.userId = userId;
  args.addressId = addressId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_setDefaultAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_setDefaultAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setDefaultAddress failed: unknown result');
};
AddressServClient.prototype.getDefaultAddress = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultAddress(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultAddress(userId);
  }
};

AddressServClient.prototype.send_getDefaultAddress = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDefaultAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new AddressServ_getDefaultAddress_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AddressServClient.prototype.recv_getDefaultAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AddressServ_getDefaultAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultAddress failed: unknown result');
};
AddressServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AddressServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AddressServProcessor.prototype.process_addAddress = function(seqid, input, output) {
  var args = new AddressServ_addAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addAddress.length === 1) {
    Q.fcall(this._handler.addAddress, args.addressInfo)
      .then(function(result) {
        var result = new AddressServ_addAddress_result({success: result});
        output.writeMessageBegin("addAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_addAddress_result(err);
        output.writeMessageBegin("addAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addAddress(args.addressInfo,  function (err, result) {
      var result = new AddressServ_addAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_updateAddress = function(seqid, input, output) {
  var args = new AddressServ_updateAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateAddress.length === 1) {
    Q.fcall(this._handler.updateAddress, args.addressInfo)
      .then(function(result) {
        var result = new AddressServ_updateAddress_result({success: result});
        output.writeMessageBegin("updateAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_updateAddress_result(err);
        output.writeMessageBegin("updateAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateAddress(args.addressInfo,  function (err, result) {
      var result = new AddressServ_updateAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_delAddress = function(seqid, input, output) {
  var args = new AddressServ_delAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delAddress.length === 2) {
    Q.fcall(this._handler.delAddress, args.userId, args.id)
      .then(function(result) {
        var result = new AddressServ_delAddress_result({success: result});
        output.writeMessageBegin("delAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_delAddress_result(err);
        output.writeMessageBegin("delAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delAddress(args.userId, args.id,  function (err, result) {
      var result = new AddressServ_delAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("delAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_queryAddress = function(seqid, input, output) {
  var args = new AddressServ_queryAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryAddress.length === 1) {
    Q.fcall(this._handler.queryAddress, args.userId)
      .then(function(result) {
        var result = new AddressServ_queryAddress_result({success: result});
        output.writeMessageBegin("queryAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_queryAddress_result(err);
        output.writeMessageBegin("queryAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryAddress(args.userId,  function (err, result) {
      var result = new AddressServ_queryAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_queryAddressById = function(seqid, input, output) {
  var args = new AddressServ_queryAddressById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryAddressById.length === 2) {
    Q.fcall(this._handler.queryAddressById, args.id, args.userId)
      .then(function(result) {
        var result = new AddressServ_queryAddressById_result({success: result});
        output.writeMessageBegin("queryAddressById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_queryAddressById_result(err);
        output.writeMessageBegin("queryAddressById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryAddressById(args.id, args.userId,  function (err, result) {
      var result = new AddressServ_queryAddressById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryAddressById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_queryAddressInfo = function(seqid, input, output) {
  var args = new AddressServ_queryAddressInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryAddressInfo.length === 2) {
    Q.fcall(this._handler.queryAddressInfo, args.id, args.userId)
      .then(function(result) {
        var result = new AddressServ_queryAddressInfo_result({success: result});
        output.writeMessageBegin("queryAddressInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_queryAddressInfo_result(err);
        output.writeMessageBegin("queryAddressInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryAddressInfo(args.id, args.userId,  function (err, result) {
      var result = new AddressServ_queryAddressInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryAddressInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_setDefaultAddress = function(seqid, input, output) {
  var args = new AddressServ_setDefaultAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setDefaultAddress.length === 2) {
    Q.fcall(this._handler.setDefaultAddress, args.userId, args.addressId)
      .then(function(result) {
        var result = new AddressServ_setDefaultAddress_result({success: result});
        output.writeMessageBegin("setDefaultAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_setDefaultAddress_result(err);
        output.writeMessageBegin("setDefaultAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setDefaultAddress(args.userId, args.addressId,  function (err, result) {
      var result = new AddressServ_setDefaultAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setDefaultAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AddressServProcessor.prototype.process_getDefaultAddress = function(seqid, input, output) {
  var args = new AddressServ_getDefaultAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDefaultAddress.length === 1) {
    Q.fcall(this._handler.getDefaultAddress, args.userId)
      .then(function(result) {
        var result = new AddressServ_getDefaultAddress_result({success: result});
        output.writeMessageBegin("getDefaultAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AddressServ_getDefaultAddress_result(err);
        output.writeMessageBegin("getDefaultAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDefaultAddress(args.userId,  function (err, result) {
      var result = new AddressServ_getDefaultAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getDefaultAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

