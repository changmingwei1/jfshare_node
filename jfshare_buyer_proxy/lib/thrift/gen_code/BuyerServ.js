//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./buyer_types');
//HELPER FUNCTIONS AND STRUCTURES

BuyerServ_buyerIsExist_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
  }
};
BuyerServ_buyerIsExist_args.prototype = {};
BuyerServ_buyerIsExist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_buyerIsExist_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_buyerIsExist_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_buyerIsExist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_buyerIsExist_result.prototype = {};
BuyerServ_buyerIsExist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.BoolResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_buyerIsExist_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_buyerIsExist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signin_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_signin_args.prototype = {};
BuyerServ_signin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_signin_result.prototype = {};
BuyerServ_signin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newSignin_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_newSignin_args.prototype = {};
BuyerServ_newSignin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newSignin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newSignin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newSignin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_newSignin_result.prototype = {};
BuyerServ_newSignin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newSignin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newSignin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_login_args = function(args) {
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_login_args.prototype = {};
BuyerServ_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_login_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_login_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_login_result.prototype = {};
BuyerServ_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_login_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newLogin_args = function(args) {
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_newLogin_args.prototype = {};
BuyerServ_newLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newLogin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newLogin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_newLogin_result.prototype = {};
BuyerServ_newLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newLogin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_smsLogin_args = function(args) {
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_smsLogin_args.prototype = {};
BuyerServ_smsLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_smsLogin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_smsLogin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_smsLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_smsLogin_result.prototype = {};
BuyerServ_smsLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_smsLogin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_smsLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_logout_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_logout_args.prototype = {};
BuyerServ_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_logout_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_logout_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_logout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_logout_result.prototype = {};
BuyerServ_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_logout_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_logout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isOnline_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_isOnline_args.prototype = {};
BuyerServ_isOnline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isOnline_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isOnline_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isOnline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isOnline_result.prototype = {};
BuyerServ_isOnline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isOnline_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isOnline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getOnlineInfo_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_getOnlineInfo_args.prototype = {};
BuyerServ_getOnlineInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getOnlineInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getOnlineInfo_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getOnlineInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getOnlineInfo_result.prototype = {};
BuyerServ_getOnlineInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getOnlineInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getOnlineInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_pwdFind_args = function(args) {
  this.findWay = null;
  this.account = null;
  if (args) {
    if (args.findWay !== undefined) {
      this.findWay = args.findWay;
    }
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
BuyerServ_pwdFind_args.prototype = {};
BuyerServ_pwdFind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.findWay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_pwdFind_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_pwdFind_args');
  if (this.findWay !== null && this.findWay !== undefined) {
    output.writeFieldBegin('findWay', Thrift.Type.I32, 1);
    output.writeI32(this.findWay);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_pwdFind_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_pwdFind_result.prototype = {};
BuyerServ_pwdFind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_pwdFind_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_pwdFind_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getBuyer_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_getBuyer_args.prototype = {};
BuyerServ_getBuyer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getBuyer_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getBuyer_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getBuyer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getBuyer_result.prototype = {};
BuyerServ_getBuyer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getBuyer_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getBuyer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_updateBuyer_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_updateBuyer_args.prototype = {};
BuyerServ_updateBuyer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_updateBuyer_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_updateBuyer_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_updateBuyer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_updateBuyer_result.prototype = {};
BuyerServ_updateBuyer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_updateBuyer_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_updateBuyer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_args = function(args) {
  this.newPwd = null;
  this.buyer = null;
  if (args) {
    if (args.newPwd !== undefined) {
      this.newPwd = args.newPwd;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_resetBuyerPwd_args.prototype = {};
BuyerServ_resetBuyerPwd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.newPwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_resetBuyerPwd_args');
  if (this.newPwd !== null && this.newPwd !== undefined) {
    output.writeFieldBegin('newPwd', Thrift.Type.STRING, 1);
    output.writeString(this.newPwd);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_resetBuyerPwd_result.prototype = {};
BuyerServ_resetBuyerPwd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_resetBuyerPwd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_args = function(args) {
  this.newPwd = null;
  this.buyer = null;
  if (args) {
    if (args.newPwd !== undefined) {
      this.newPwd = args.newPwd;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_newResetBuyerPwd_args.prototype = {};
BuyerServ_newResetBuyerPwd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.newPwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newResetBuyerPwd_args');
  if (this.newPwd !== null && this.newPwd !== undefined) {
    output.writeFieldBegin('newPwd', Thrift.Type.STRING, 1);
    output.writeString(this.newPwd);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_newResetBuyerPwd_result.prototype = {};
BuyerServ_newResetBuyerPwd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newResetBuyerPwd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signinThirdParty_args = function(args) {
  this.loginLog = null;
  this.thirdUser = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.thirdUser !== undefined) {
      this.thirdUser = args.thirdUser;
    }
  }
};
BuyerServ_signinThirdParty_args.prototype = {};
BuyerServ_signinThirdParty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.thirdUser = new ttypes.ThirdpartyUser();
        this.thirdUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signinThirdParty_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signinThirdParty_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.thirdUser !== null && this.thirdUser !== undefined) {
    output.writeFieldBegin('thirdUser', Thrift.Type.STRUCT, 2);
    this.thirdUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signinThirdParty_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_signinThirdParty_result.prototype = {};
BuyerServ_signinThirdParty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signinThirdParty_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signinThirdParty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isBindThirdParty_args = function(args) {
  this.thirdType = null;
  this.loginLog = null;
  if (args) {
    if (args.thirdType !== undefined) {
      this.thirdType = args.thirdType;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_isBindThirdParty_args.prototype = {};
BuyerServ_isBindThirdParty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thirdType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isBindThirdParty_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isBindThirdParty_args');
  if (this.thirdType !== null && this.thirdType !== undefined) {
    output.writeFieldBegin('thirdType', Thrift.Type.STRING, 1);
    output.writeString(this.thirdType);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isBindThirdParty_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isBindThirdParty_result.prototype = {};
BuyerServ_isBindThirdParty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isBindThirdParty_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isBindThirdParty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getAuthInfo_args = function(args) {
  this.authInfo = null;
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.authInfo !== undefined) {
      this.authInfo = args.authInfo;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_getAuthInfo_args.prototype = {};
BuyerServ_getAuthInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authInfo = new ttypes.AuthInfo();
        this.authInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getAuthInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getAuthInfo_args');
  if (this.authInfo !== null && this.authInfo !== undefined) {
    output.writeFieldBegin('authInfo', Thrift.Type.STRUCT, 1);
    this.authInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 3);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getAuthInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getAuthInfo_result.prototype = {};
BuyerServ_getAuthInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getAuthInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getAuthInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_validAuth_args = function(args) {
  this.loginLog = null;
  this.authInfo = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.authInfo !== undefined) {
      this.authInfo = args.authInfo;
    }
  }
};
BuyerServ_validAuth_args.prototype = {};
BuyerServ_validAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authInfo = new ttypes.AuthInfo();
        this.authInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_validAuth_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_validAuth_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.authInfo !== null && this.authInfo !== undefined) {
    output.writeFieldBegin('authInfo', Thrift.Type.STRUCT, 2);
    this.authInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_validAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_validAuth_result.prototype = {};
BuyerServ_validAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_validAuth_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_validAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BuyerServClient.prototype = {};
BuyerServClient.prototype.seqid = function() { return this._seqid; }
BuyerServClient.prototype.new_seqid = function() { return this._seqid += 1; }
BuyerServClient.prototype.buyerIsExist = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_buyerIsExist(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_buyerIsExist(loginName);
  }
};

BuyerServClient.prototype.send_buyerIsExist = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('buyerIsExist', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_buyerIsExist_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_buyerIsExist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_buyerIsExist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('buyerIsExist failed: unknown result');
};
BuyerServClient.prototype.signin = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signin(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signin(buyer);
  }
};

BuyerServClient.prototype.send_signin = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_signin_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_signin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_signin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signin failed: unknown result');
};
BuyerServClient.prototype.newSignin = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newSignin(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newSignin(buyer);
  }
};

BuyerServClient.prototype.send_newSignin = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newSignin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_newSignin_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_newSignin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_newSignin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newSignin failed: unknown result');
};
BuyerServClient.prototype.login = function(buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_login(buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_login(buyer, loginLog);
  }
};

BuyerServClient.prototype.send_login = function(buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_login_args();
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
BuyerServClient.prototype.newLogin = function(buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newLogin(buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newLogin(buyer, loginLog);
  }
};

BuyerServClient.prototype.send_newLogin = function(buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newLogin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_newLogin_args();
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_newLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_newLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newLogin failed: unknown result');
};
BuyerServClient.prototype.smsLogin = function(buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_smsLogin(buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_smsLogin(buyer, loginLog);
  }
};

BuyerServClient.prototype.send_smsLogin = function(buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('smsLogin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_smsLogin_args();
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_smsLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_smsLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('smsLogin failed: unknown result');
};
BuyerServClient.prototype.logout = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logout(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logout(loginLog);
  }
};

BuyerServClient.prototype.send_logout = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_logout_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_logout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_logout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('logout failed: unknown result');
};
BuyerServClient.prototype.isOnline = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isOnline(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isOnline(loginLog);
  }
};

BuyerServClient.prototype.send_isOnline = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isOnline', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isOnline_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isOnline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isOnline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isOnline failed: unknown result');
};
BuyerServClient.prototype.getOnlineInfo = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOnlineInfo(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOnlineInfo(loginLog);
  }
};

BuyerServClient.prototype.send_getOnlineInfo = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOnlineInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getOnlineInfo_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getOnlineInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getOnlineInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOnlineInfo failed: unknown result');
};
BuyerServClient.prototype.pwdFind = function(findWay, account, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pwdFind(findWay, account);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pwdFind(findWay, account);
  }
};

BuyerServClient.prototype.send_pwdFind = function(findWay, account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pwdFind', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_pwdFind_args();
  args.findWay = findWay;
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_pwdFind = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_pwdFind_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pwdFind failed: unknown result');
};
BuyerServClient.prototype.getBuyer = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuyer(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuyer(buyer);
  }
};

BuyerServClient.prototype.send_getBuyer = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuyer', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getBuyer_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getBuyer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getBuyer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuyer failed: unknown result');
};
BuyerServClient.prototype.updateBuyer = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuyer(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuyer(buyer);
  }
};

BuyerServClient.prototype.send_updateBuyer = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuyer', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_updateBuyer_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_updateBuyer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_updateBuyer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBuyer failed: unknown result');
};
BuyerServClient.prototype.resetBuyerPwd = function(newPwd, buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetBuyerPwd(newPwd, buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetBuyerPwd(newPwd, buyer);
  }
};

BuyerServClient.prototype.send_resetBuyerPwd = function(newPwd, buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetBuyerPwd', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_resetBuyerPwd_args();
  args.newPwd = newPwd;
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_resetBuyerPwd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_resetBuyerPwd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resetBuyerPwd failed: unknown result');
};
BuyerServClient.prototype.newResetBuyerPwd = function(newPwd, buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newResetBuyerPwd(newPwd, buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newResetBuyerPwd(newPwd, buyer);
  }
};

BuyerServClient.prototype.send_newResetBuyerPwd = function(newPwd, buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newResetBuyerPwd', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_newResetBuyerPwd_args();
  args.newPwd = newPwd;
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_newResetBuyerPwd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_newResetBuyerPwd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newResetBuyerPwd failed: unknown result');
};
BuyerServClient.prototype.signinThirdParty = function(loginLog, thirdUser, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signinThirdParty(loginLog, thirdUser);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signinThirdParty(loginLog, thirdUser);
  }
};

BuyerServClient.prototype.send_signinThirdParty = function(loginLog, thirdUser) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signinThirdParty', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_signinThirdParty_args();
  args.loginLog = loginLog;
  args.thirdUser = thirdUser;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_signinThirdParty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_signinThirdParty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signinThirdParty failed: unknown result');
};
BuyerServClient.prototype.isBindThirdParty = function(thirdType, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isBindThirdParty(thirdType, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isBindThirdParty(thirdType, loginLog);
  }
};

BuyerServClient.prototype.send_isBindThirdParty = function(thirdType, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isBindThirdParty', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isBindThirdParty_args();
  args.thirdType = thirdType;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isBindThirdParty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isBindThirdParty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isBindThirdParty failed: unknown result');
};
BuyerServClient.prototype.getAuthInfo = function(authInfo, buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAuthInfo(authInfo, buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAuthInfo(authInfo, buyer, loginLog);
  }
};

BuyerServClient.prototype.send_getAuthInfo = function(authInfo, buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAuthInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getAuthInfo_args();
  args.authInfo = authInfo;
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getAuthInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getAuthInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAuthInfo failed: unknown result');
};
BuyerServClient.prototype.validAuth = function(loginLog, authInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validAuth(loginLog, authInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validAuth(loginLog, authInfo);
  }
};

BuyerServClient.prototype.send_validAuth = function(loginLog, authInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_validAuth_args();
  args.loginLog = loginLog;
  args.authInfo = authInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_validAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_validAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validAuth failed: unknown result');
};
BuyerServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BuyerServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BuyerServProcessor.prototype.process_buyerIsExist = function(seqid, input, output) {
  var args = new BuyerServ_buyerIsExist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.buyerIsExist.length === 1) {
    Q.fcall(this._handler.buyerIsExist, args.loginName)
      .then(function(result) {
        var result = new BuyerServ_buyerIsExist_result({success: result});
        output.writeMessageBegin("buyerIsExist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_buyerIsExist_result(err);
        output.writeMessageBegin("buyerIsExist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.buyerIsExist(args.loginName,  function (err, result) {
      var result = new BuyerServ_buyerIsExist_result((err != null ? err : {success: result}));
      output.writeMessageBegin("buyerIsExist", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_signin = function(seqid, input, output) {
  var args = new BuyerServ_signin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signin.length === 1) {
    Q.fcall(this._handler.signin, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_signin_result({success: result});
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_signin_result(err);
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signin(args.buyer,  function (err, result) {
      var result = new BuyerServ_signin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_newSignin = function(seqid, input, output) {
  var args = new BuyerServ_newSignin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newSignin.length === 1) {
    Q.fcall(this._handler.newSignin, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_newSignin_result({success: result});
        output.writeMessageBegin("newSignin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_newSignin_result(err);
        output.writeMessageBegin("newSignin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newSignin(args.buyer,  function (err, result) {
      var result = new BuyerServ_newSignin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("newSignin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new BuyerServ_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.login.length === 2) {
    Q.fcall(this._handler.login, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_login_result(err);
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.login(args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_login_result((err != null ? err : {success: result}));
      output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_newLogin = function(seqid, input, output) {
  var args = new BuyerServ_newLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newLogin.length === 2) {
    Q.fcall(this._handler.newLogin, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_newLogin_result({success: result});
        output.writeMessageBegin("newLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_newLogin_result(err);
        output.writeMessageBegin("newLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newLogin(args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_newLogin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("newLogin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_smsLogin = function(seqid, input, output) {
  var args = new BuyerServ_smsLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.smsLogin.length === 2) {
    Q.fcall(this._handler.smsLogin, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_smsLogin_result({success: result});
        output.writeMessageBegin("smsLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_smsLogin_result(err);
        output.writeMessageBegin("smsLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.smsLogin(args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_smsLogin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("smsLogin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_logout = function(seqid, input, output) {
  var args = new BuyerServ_logout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logout.length === 1) {
    Q.fcall(this._handler.logout, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_logout_result({success: result});
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_logout_result(err);
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.logout(args.loginLog,  function (err, result) {
      var result = new BuyerServ_logout_result((err != null ? err : {success: result}));
      output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isOnline = function(seqid, input, output) {
  var args = new BuyerServ_isOnline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isOnline.length === 1) {
    Q.fcall(this._handler.isOnline, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_isOnline_result({success: result});
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isOnline_result(err);
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isOnline(args.loginLog,  function (err, result) {
      var result = new BuyerServ_isOnline_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getOnlineInfo = function(seqid, input, output) {
  var args = new BuyerServ_getOnlineInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOnlineInfo.length === 1) {
    Q.fcall(this._handler.getOnlineInfo, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_getOnlineInfo_result({success: result});
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getOnlineInfo_result(err);
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getOnlineInfo(args.loginLog,  function (err, result) {
      var result = new BuyerServ_getOnlineInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_pwdFind = function(seqid, input, output) {
  var args = new BuyerServ_pwdFind_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pwdFind.length === 2) {
    Q.fcall(this._handler.pwdFind, args.findWay, args.account)
      .then(function(result) {
        var result = new BuyerServ_pwdFind_result({success: result});
        output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_pwdFind_result(err);
        output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pwdFind(args.findWay, args.account,  function (err, result) {
      var result = new BuyerServ_pwdFind_result((err != null ? err : {success: result}));
      output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getBuyer = function(seqid, input, output) {
  var args = new BuyerServ_getBuyer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuyer.length === 1) {
    Q.fcall(this._handler.getBuyer, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_getBuyer_result({success: result});
        output.writeMessageBegin("getBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getBuyer_result(err);
        output.writeMessageBegin("getBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuyer(args.buyer,  function (err, result) {
      var result = new BuyerServ_getBuyer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getBuyer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_updateBuyer = function(seqid, input, output) {
  var args = new BuyerServ_updateBuyer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuyer.length === 1) {
    Q.fcall(this._handler.updateBuyer, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_updateBuyer_result({success: result});
        output.writeMessageBegin("updateBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_updateBuyer_result(err);
        output.writeMessageBegin("updateBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuyer(args.buyer,  function (err, result) {
      var result = new BuyerServ_updateBuyer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateBuyer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_resetBuyerPwd = function(seqid, input, output) {
  var args = new BuyerServ_resetBuyerPwd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetBuyerPwd.length === 2) {
    Q.fcall(this._handler.resetBuyerPwd, args.newPwd, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_resetBuyerPwd_result({success: result});
        output.writeMessageBegin("resetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_resetBuyerPwd_result(err);
        output.writeMessageBegin("resetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetBuyerPwd(args.newPwd, args.buyer,  function (err, result) {
      var result = new BuyerServ_resetBuyerPwd_result((err != null ? err : {success: result}));
      output.writeMessageBegin("resetBuyerPwd", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_newResetBuyerPwd = function(seqid, input, output) {
  var args = new BuyerServ_newResetBuyerPwd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newResetBuyerPwd.length === 2) {
    Q.fcall(this._handler.newResetBuyerPwd, args.newPwd, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_newResetBuyerPwd_result({success: result});
        output.writeMessageBegin("newResetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_newResetBuyerPwd_result(err);
        output.writeMessageBegin("newResetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newResetBuyerPwd(args.newPwd, args.buyer,  function (err, result) {
      var result = new BuyerServ_newResetBuyerPwd_result((err != null ? err : {success: result}));
      output.writeMessageBegin("newResetBuyerPwd", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_signinThirdParty = function(seqid, input, output) {
  var args = new BuyerServ_signinThirdParty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signinThirdParty.length === 2) {
    Q.fcall(this._handler.signinThirdParty, args.loginLog, args.thirdUser)
      .then(function(result) {
        var result = new BuyerServ_signinThirdParty_result({success: result});
        output.writeMessageBegin("signinThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_signinThirdParty_result(err);
        output.writeMessageBegin("signinThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signinThirdParty(args.loginLog, args.thirdUser,  function (err, result) {
      var result = new BuyerServ_signinThirdParty_result((err != null ? err : {success: result}));
      output.writeMessageBegin("signinThirdParty", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isBindThirdParty = function(seqid, input, output) {
  var args = new BuyerServ_isBindThirdParty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isBindThirdParty.length === 2) {
    Q.fcall(this._handler.isBindThirdParty, args.thirdType, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_isBindThirdParty_result({success: result});
        output.writeMessageBegin("isBindThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isBindThirdParty_result(err);
        output.writeMessageBegin("isBindThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isBindThirdParty(args.thirdType, args.loginLog,  function (err, result) {
      var result = new BuyerServ_isBindThirdParty_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isBindThirdParty", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getAuthInfo = function(seqid, input, output) {
  var args = new BuyerServ_getAuthInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAuthInfo.length === 3) {
    Q.fcall(this._handler.getAuthInfo, args.authInfo, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_getAuthInfo_result({success: result});
        output.writeMessageBegin("getAuthInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getAuthInfo_result(err);
        output.writeMessageBegin("getAuthInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAuthInfo(args.authInfo, args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_getAuthInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getAuthInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_validAuth = function(seqid, input, output) {
  var args = new BuyerServ_validAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validAuth.length === 2) {
    Q.fcall(this._handler.validAuth, args.loginLog, args.authInfo)
      .then(function(result) {
        var result = new BuyerServ_validAuth_result({success: result});
        output.writeMessageBegin("validAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_validAuth_result(err);
        output.writeMessageBegin("validAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validAuth(args.loginLog, args.authInfo,  function (err, result) {
      var result = new BuyerServ_validAuth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("validAuth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

