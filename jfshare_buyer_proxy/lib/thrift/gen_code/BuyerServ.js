//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./buyer_types');
//HELPER FUNCTIONS AND STRUCTURES

BuyerServ_buyerIsExist_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
  }
};
BuyerServ_buyerIsExist_args.prototype = {};
BuyerServ_buyerIsExist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_buyerIsExist_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_buyerIsExist_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_buyerIsExist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_buyerIsExist_result.prototype = {};
BuyerServ_buyerIsExist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.BoolResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_buyerIsExist_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_buyerIsExist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signin_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_signin_args.prototype = {};
BuyerServ_signin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_signin_result.prototype = {};
BuyerServ_signin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newSignin_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_newSignin_args.prototype = {};
BuyerServ_newSignin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newSignin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newSignin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newSignin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_newSignin_result.prototype = {};
BuyerServ_newSignin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newSignin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newSignin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_login_args = function(args) {
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_login_args.prototype = {};
BuyerServ_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_login_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_login_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_login_result.prototype = {};
BuyerServ_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_login_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newLogin_args = function(args) {
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_newLogin_args.prototype = {};
BuyerServ_newLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newLogin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newLogin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_newLogin_result.prototype = {};
BuyerServ_newLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newLogin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_smsLogin_args = function(args) {
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_smsLogin_args.prototype = {};
BuyerServ_smsLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_smsLogin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_smsLogin_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_smsLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_smsLogin_result.prototype = {};
BuyerServ_smsLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_smsLogin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_smsLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_logout_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_logout_args.prototype = {};
BuyerServ_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_logout_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_logout_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_logout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_logout_result.prototype = {};
BuyerServ_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_logout_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_logout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isOnline_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_isOnline_args.prototype = {};
BuyerServ_isOnline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isOnline_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isOnline_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isOnline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isOnline_result.prototype = {};
BuyerServ_isOnline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isOnline_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isOnline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getOnlineInfo_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_getOnlineInfo_args.prototype = {};
BuyerServ_getOnlineInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getOnlineInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getOnlineInfo_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getOnlineInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getOnlineInfo_result.prototype = {};
BuyerServ_getOnlineInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getOnlineInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getOnlineInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_pwdFind_args = function(args) {
  this.findWay = null;
  this.account = null;
  if (args) {
    if (args.findWay !== undefined) {
      this.findWay = args.findWay;
    }
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
BuyerServ_pwdFind_args.prototype = {};
BuyerServ_pwdFind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.findWay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_pwdFind_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_pwdFind_args');
  if (this.findWay !== null && this.findWay !== undefined) {
    output.writeFieldBegin('findWay', Thrift.Type.I32, 1);
    output.writeI32(this.findWay);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_pwdFind_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_pwdFind_result.prototype = {};
BuyerServ_pwdFind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_pwdFind_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_pwdFind_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getBuyer_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_getBuyer_args.prototype = {};
BuyerServ_getBuyer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getBuyer_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getBuyer_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getBuyer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getBuyer_result.prototype = {};
BuyerServ_getBuyer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getBuyer_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getBuyer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getBuyerInfo_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_getBuyerInfo_args.prototype = {};
BuyerServ_getBuyerInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getBuyerInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getBuyerInfo_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getBuyerInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getBuyerInfo_result.prototype = {};
BuyerServ_getBuyerInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getBuyerInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getBuyerInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getListBuyer_args = function(args) {
  this.userIdList = null;
  if (args) {
    if (args.userIdList !== undefined) {
      this.userIdList = args.userIdList;
    }
  }
};
BuyerServ_getListBuyer_args.prototype = {};
BuyerServ_getListBuyer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.userIdList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32();
          this.userIdList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getListBuyer_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getListBuyer_args');
  if (this.userIdList !== null && this.userIdList !== undefined) {
    output.writeFieldBegin('userIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.userIdList.length);
    for (var iter39 in this.userIdList)
    {
      if (this.userIdList.hasOwnProperty(iter39))
      {
        iter39 = this.userIdList[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getListBuyer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getListBuyer_result.prototype = {};
BuyerServ_getListBuyer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getListBuyer_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getListBuyer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_updateBuyer_args = function(args) {
  this.buyer = null;
  if (args) {
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_updateBuyer_args.prototype = {};
BuyerServ_updateBuyer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_updateBuyer_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_updateBuyer_args');
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 1);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_updateBuyer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_updateBuyer_result.prototype = {};
BuyerServ_updateBuyer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_updateBuyer_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_updateBuyer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_args = function(args) {
  this.newPwd = null;
  this.buyer = null;
  if (args) {
    if (args.newPwd !== undefined) {
      this.newPwd = args.newPwd;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_resetBuyerPwd_args.prototype = {};
BuyerServ_resetBuyerPwd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.newPwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_resetBuyerPwd_args');
  if (this.newPwd !== null && this.newPwd !== undefined) {
    output.writeFieldBegin('newPwd', Thrift.Type.STRING, 1);
    output.writeString(this.newPwd);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_resetBuyerPwd_result.prototype = {};
BuyerServ_resetBuyerPwd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_resetBuyerPwd_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_resetBuyerPwd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_args = function(args) {
  this.newPwd = null;
  this.buyer = null;
  if (args) {
    if (args.newPwd !== undefined) {
      this.newPwd = args.newPwd;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
  }
};
BuyerServ_newResetBuyerPwd_args.prototype = {};
BuyerServ_newResetBuyerPwd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.newPwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newResetBuyerPwd_args');
  if (this.newPwd !== null && this.newPwd !== undefined) {
    output.writeFieldBegin('newPwd', Thrift.Type.STRING, 1);
    output.writeString(this.newPwd);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_newResetBuyerPwd_result.prototype = {};
BuyerServ_newResetBuyerPwd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_newResetBuyerPwd_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_newResetBuyerPwd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signinThirdParty_args = function(args) {
  this.loginLog = null;
  this.thirdUser = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.thirdUser !== undefined) {
      this.thirdUser = args.thirdUser;
    }
  }
};
BuyerServ_signinThirdParty_args.prototype = {};
BuyerServ_signinThirdParty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.thirdUser = new ttypes.ThirdpartyUser();
        this.thirdUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signinThirdParty_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signinThirdParty_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.thirdUser !== null && this.thirdUser !== undefined) {
    output.writeFieldBegin('thirdUser', Thrift.Type.STRUCT, 2);
    this.thirdUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_signinThirdParty_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_signinThirdParty_result.prototype = {};
BuyerServ_signinThirdParty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_signinThirdParty_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_signinThirdParty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isBindThirdParty_args = function(args) {
  this.thirdType = null;
  this.loginLog = null;
  if (args) {
    if (args.thirdType !== undefined) {
      this.thirdType = args.thirdType;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_isBindThirdParty_args.prototype = {};
BuyerServ_isBindThirdParty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thirdType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isBindThirdParty_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isBindThirdParty_args');
  if (this.thirdType !== null && this.thirdType !== undefined) {
    output.writeFieldBegin('thirdType', Thrift.Type.STRING, 1);
    output.writeString(this.thirdType);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isBindThirdParty_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isBindThirdParty_result.prototype = {};
BuyerServ_isBindThirdParty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isBindThirdParty_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isBindThirdParty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getAuthInfo_args = function(args) {
  this.authInfo = null;
  this.buyer = null;
  this.loginLog = null;
  if (args) {
    if (args.authInfo !== undefined) {
      this.authInfo = args.authInfo;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
  }
};
BuyerServ_getAuthInfo_args.prototype = {};
BuyerServ_getAuthInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authInfo = new ttypes.AuthInfo();
        this.authInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getAuthInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getAuthInfo_args');
  if (this.authInfo !== null && this.authInfo !== undefined) {
    output.writeFieldBegin('authInfo', Thrift.Type.STRUCT, 1);
    this.authInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 3);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getAuthInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getAuthInfo_result.prototype = {};
BuyerServ_getAuthInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getAuthInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getAuthInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_validAuth_args = function(args) {
  this.loginLog = null;
  this.authInfo = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.authInfo !== undefined) {
      this.authInfo = args.authInfo;
    }
  }
};
BuyerServ_validAuth_args.prototype = {};
BuyerServ_validAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authInfo = new ttypes.AuthInfo();
        this.authInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_validAuth_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_validAuth_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.authInfo !== null && this.authInfo !== undefined) {
    output.writeFieldBegin('authInfo', Thrift.Type.STRUCT, 2);
    this.authInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_validAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_validAuth_result.prototype = {};
BuyerServ_validAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_validAuth_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_validAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_thirdUserSignin_args = function(args) {
  this.loginLog = null;
  this.UserThird = null;
  this.validateInfo = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.UserThird !== undefined) {
      this.UserThird = args.UserThird;
    }
    if (args.validateInfo !== undefined) {
      this.validateInfo = args.validateInfo;
    }
  }
};
BuyerServ_thirdUserSignin_args.prototype = {};
BuyerServ_thirdUserSignin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.UserThird = new ttypes.UserInfoThird();
        this.UserThird.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validateInfo = new ttypes.ValidateInfo();
        this.validateInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_thirdUserSignin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_thirdUserSignin_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.UserThird !== null && this.UserThird !== undefined) {
    output.writeFieldBegin('UserThird', Thrift.Type.STRUCT, 2);
    this.UserThird.write(output);
    output.writeFieldEnd();
  }
  if (this.validateInfo !== null && this.validateInfo !== undefined) {
    output.writeFieldBegin('validateInfo', Thrift.Type.STRUCT, 3);
    this.validateInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_thirdUserSignin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_thirdUserSignin_result.prototype = {};
BuyerServ_thirdUserSignin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_thirdUserSignin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_thirdUserSignin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isExitsThirdUser_args = function(args) {
  this.loginLog = null;
  this.validateInfo = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.validateInfo !== undefined) {
      this.validateInfo = args.validateInfo;
    }
  }
};
BuyerServ_isExitsThirdUser_args.prototype = {};
BuyerServ_isExitsThirdUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validateInfo = new ttypes.ValidateInfo();
        this.validateInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isExitsThirdUser_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isExitsThirdUser_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.validateInfo !== null && this.validateInfo !== undefined) {
    output.writeFieldBegin('validateInfo', Thrift.Type.STRUCT, 2);
    this.validateInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isExitsThirdUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isExitsThirdUser_result.prototype = {};
BuyerServ_isExitsThirdUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isExitsThirdUser_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isExitsThirdUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_requestHttps_args = function(args) {
  this.url = null;
  this.extInfo = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.extInfo !== undefined) {
      this.extInfo = args.extInfo;
    }
  }
};
BuyerServ_requestHttps_args.prototype = {};
BuyerServ_requestHttps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_requestHttps_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_requestHttps_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.extInfo !== null && this.extInfo !== undefined) {
    output.writeFieldBegin('extInfo', Thrift.Type.STRING, 2);
    output.writeString(this.extInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_requestHttps_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_requestHttps_result.prototype = {};
BuyerServ_requestHttps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_requestHttps_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_requestHttps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_H5ThirdLogin_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
BuyerServ_H5ThirdLogin_args.prototype = {};
BuyerServ_H5ThirdLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.H5ThirdLoginParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_H5ThirdLogin_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_H5ThirdLogin_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_H5ThirdLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_H5ThirdLogin_result.prototype = {};
BuyerServ_H5ThirdLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.H5ThirdLoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_H5ThirdLogin_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_H5ThirdLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isPurchaseMobile_args = function(args) {
  this.mobile = null;
  if (args) {
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
  }
};
BuyerServ_isPurchaseMobile_args.prototype = {};
BuyerServ_isPurchaseMobile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isPurchaseMobile_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isPurchaseMobile_args');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isPurchaseMobile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isPurchaseMobile_result.prototype = {};
BuyerServ_isPurchaseMobile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PurchaseMobileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isPurchaseMobile_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isPurchaseMobile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isDisableUser_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
BuyerServ_isDisableUser_args.prototype = {};
BuyerServ_isDisableUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.IsDisableUseParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isDisableUser_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isDisableUser_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_isDisableUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_isDisableUser_result.prototype = {};
BuyerServ_isDisableUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_isDisableUser_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_isDisableUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_smsLoginEnterAmount_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
BuyerServ_smsLoginEnterAmount_args.prototype = {};
BuyerServ_smsLoginEnterAmount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.SmsLoginEnterAmountParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_smsLoginEnterAmount_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_smsLoginEnterAmount_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_smsLoginEnterAmount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_smsLoginEnterAmount_result.prototype = {};
BuyerServ_smsLoginEnterAmount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmsLoginEnterAmountResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_smsLoginEnterAmount_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_smsLoginEnterAmount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_thirdSigninCheck_args = function(args) {
  this.loginLog = null;
  this.UserThird = null;
  this.validateInfo = null;
  if (args) {
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.UserThird !== undefined) {
      this.UserThird = args.UserThird;
    }
    if (args.validateInfo !== undefined) {
      this.validateInfo = args.validateInfo;
    }
  }
};
BuyerServ_thirdSigninCheck_args.prototype = {};
BuyerServ_thirdSigninCheck_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.UserThird = new ttypes.UserInfoThird();
        this.UserThird.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.validateInfo = new ttypes.ValidateInfo();
        this.validateInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_thirdSigninCheck_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_thirdSigninCheck_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.UserThird !== null && this.UserThird !== undefined) {
    output.writeFieldBegin('UserThird', Thrift.Type.STRUCT, 2);
    this.UserThird.write(output);
    output.writeFieldEnd();
  }
  if (this.validateInfo !== null && this.validateInfo !== undefined) {
    output.writeFieldBegin('validateInfo', Thrift.Type.STRUCT, 3);
    this.validateInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_thirdSigninCheck_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_thirdSigninCheck_result.prototype = {};
BuyerServ_thirdSigninCheck_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuyerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_thirdSigninCheck_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_thirdSigninCheck_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_checkAppH5Token_args = function(args) {
  this.token = null;
  this.mobileNo = null;
  this.openId = null;
  this.mac = null;
  this.accessCode = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.mobileNo !== undefined) {
      this.mobileNo = args.mobileNo;
    }
    if (args.openId !== undefined) {
      this.openId = args.openId;
    }
    if (args.mac !== undefined) {
      this.mac = args.mac;
    }
    if (args.accessCode !== undefined) {
      this.accessCode = args.accessCode;
    }
  }
};
BuyerServ_checkAppH5Token_args.prototype = {};
BuyerServ_checkAppH5Token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobileNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.openId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.accessCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_checkAppH5Token_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_checkAppH5Token_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.mobileNo !== null && this.mobileNo !== undefined) {
    output.writeFieldBegin('mobileNo', Thrift.Type.STRING, 2);
    output.writeString(this.mobileNo);
    output.writeFieldEnd();
  }
  if (this.openId !== null && this.openId !== undefined) {
    output.writeFieldBegin('openId', Thrift.Type.STRING, 3);
    output.writeString(this.openId);
    output.writeFieldEnd();
  }
  if (this.mac !== null && this.mac !== undefined) {
    output.writeFieldBegin('mac', Thrift.Type.STRING, 4);
    output.writeString(this.mac);
    output.writeFieldEnd();
  }
  if (this.accessCode !== null && this.accessCode !== undefined) {
    output.writeFieldBegin('accessCode', Thrift.Type.STRING, 5);
    output.writeString(this.accessCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_checkAppH5Token_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_checkAppH5Token_result.prototype = {};
BuyerServ_checkAppH5Token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_checkAppH5Token_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_checkAppH5Token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByUnionId_args = function(args) {
  this.unionId = null;
  if (args) {
    if (args.unionId !== undefined) {
      this.unionId = args.unionId;
    }
  }
};
BuyerServ_getProfileFromWeixinByUnionId_args.prototype = {};
BuyerServ_getProfileFromWeixinByUnionId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByUnionId_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getProfileFromWeixinByUnionId_args');
  if (this.unionId !== null && this.unionId !== undefined) {
    output.writeFieldBegin('unionId', Thrift.Type.STRING, 1);
    output.writeString(this.unionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByUnionId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getProfileFromWeixinByUnionId_result.prototype = {};
BuyerServ_getProfileFromWeixinByUnionId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WXProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByUnionId_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getProfileFromWeixinByUnionId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByCode_args = function(args) {
  this.code = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
  }
};
BuyerServ_getProfileFromWeixinByCode_args.prototype = {};
BuyerServ_getProfileFromWeixinByCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByCode_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getProfileFromWeixinByCode_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getProfileFromWeixinByCode_result.prototype = {};
BuyerServ_getProfileFromWeixinByCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WXProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getProfileFromWeixinByCode_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getProfileFromWeixinByCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getWeiXinJSconfig_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
BuyerServ_getWeiXinJSconfig_args.prototype = {};
BuyerServ_getWeiXinJSconfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getWeiXinJSconfig_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getWeiXinJSconfig_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_getWeiXinJSconfig_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_getWeiXinJSconfig_result.prototype = {};
BuyerServ_getWeiXinJSconfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WXConfigResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_getWeiXinJSconfig_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_getWeiXinJSconfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_floretPassData_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
BuyerServ_floretPassData_args.prototype = {};
BuyerServ_floretPassData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.FloretUserParam();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_floretPassData_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_floretPassData_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_floretPassData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_floretPassData_result.prototype = {};
BuyerServ_floretPassData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_floretPassData_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_floretPassData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_OnLineApply_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
BuyerServ_OnLineApply_args.prototype = {};
BuyerServ_OnLineApply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.OnlineUserParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_OnLineApply_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_OnLineApply_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_OnLineApply_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_OnLineApply_result.prototype = {};
BuyerServ_OnLineApply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_OnLineApply_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_OnLineApply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_queryExpress_args = function(args) {
  this.code = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
  }
};
BuyerServ_queryExpress_args.prototype = {};
BuyerServ_queryExpress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_queryExpress_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_queryExpress_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, -1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_queryExpress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_queryExpress_result.prototype = {};
BuyerServ_queryExpress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExpressResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_queryExpress_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_queryExpress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_sellerCheckCode_args = function(args) {
  this.sellerId = null;
  this.code = null;
  this.sztCardId = null;
  this.sellerName = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.sztCardId !== undefined) {
      this.sztCardId = args.sztCardId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
  }
};
BuyerServ_sellerCheckCode_args.prototype = {};
BuyerServ_sellerCheckCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sztCardId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_sellerCheckCode_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_sellerCheckCode_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 1);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.sztCardId !== null && this.sztCardId !== undefined) {
    output.writeFieldBegin('sztCardId', Thrift.Type.STRING, 3);
    output.writeString(this.sztCardId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 4);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_sellerCheckCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_sellerCheckCode_result.prototype = {};
BuyerServ_sellerCheckCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_sellerCheckCode_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_sellerCheckCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_sendMobileNote_args = function(args) {
  this.mobile = null;
  this.type = null;
  if (args) {
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
BuyerServ_sendMobileNote_args.prototype = {};
BuyerServ_sendMobileNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case -2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_sendMobileNote_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_sendMobileNote_args');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, -1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, -2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_sendMobileNote_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_sendMobileNote_result.prototype = {};
BuyerServ_sendMobileNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_sendMobileNote_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_sendMobileNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_findVerifyRecord_args = function(args) {
  this.sellerId = null;
  this.pagination = null;
  this.vrParam = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.vrParam !== undefined) {
      this.vrParam = args.vrParam;
    }
  }
};
BuyerServ_findVerifyRecord_args.prototype = {};
BuyerServ_findVerifyRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.vrParam = new ttypes.VerifyRecordParam();
        this.vrParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_findVerifyRecord_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_findVerifyRecord_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 1);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.vrParam !== null && this.vrParam !== undefined) {
    output.writeFieldBegin('vrParam', Thrift.Type.STRUCT, 3);
    this.vrParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_findVerifyRecord_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_findVerifyRecord_result.prototype = {};
BuyerServ_findVerifyRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerifyRecordResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_findVerifyRecord_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_findVerifyRecord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_exportVerifyRecord_args = function(args) {
  this.sellerId = null;
  this.vrParam = null;
  if (args) {
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.vrParam !== undefined) {
      this.vrParam = args.vrParam;
    }
  }
};
BuyerServ_exportVerifyRecord_args.prototype = {};
BuyerServ_exportVerifyRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.vrParam = new ttypes.VerifyRecordParam();
        this.vrParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_exportVerifyRecord_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_exportVerifyRecord_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 1);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.vrParam !== null && this.vrParam !== undefined) {
    output.writeFieldBegin('vrParam', Thrift.Type.STRUCT, 2);
    this.vrParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_exportVerifyRecord_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_exportVerifyRecord_result.prototype = {};
BuyerServ_exportVerifyRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_exportVerifyRecord_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_exportVerifyRecord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_searchAdminExpressInfo_args = function(args) {
  this.serialNumber = null;
  if (args) {
    if (args.serialNumber !== undefined) {
      this.serialNumber = args.serialNumber;
    }
  }
};
BuyerServ_searchAdminExpressInfo_args.prototype = {};
BuyerServ_searchAdminExpressInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_searchAdminExpressInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_searchAdminExpressInfo_args');
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 1);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_searchAdminExpressInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_searchAdminExpressInfo_result.prototype = {};
BuyerServ_searchAdminExpressInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AdminExpressResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_searchAdminExpressInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_searchAdminExpressInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_searchCriteriaForXiaoHuaUser_args = function(args) {
  this.searchCriteriaForXiaoHua = null;
  this.pagination = null;
  if (args) {
    if (args.searchCriteriaForXiaoHua !== undefined) {
      this.searchCriteriaForXiaoHua = args.searchCriteriaForXiaoHua;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
BuyerServ_searchCriteriaForXiaoHuaUser_args.prototype = {};
BuyerServ_searchCriteriaForXiaoHuaUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchCriteriaForXiaoHua = new ttypes.SearchCriteriaForXiaoHua();
        this.searchCriteriaForXiaoHua.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_searchCriteriaForXiaoHuaUser_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_searchCriteriaForXiaoHuaUser_args');
  if (this.searchCriteriaForXiaoHua !== null && this.searchCriteriaForXiaoHua !== undefined) {
    output.writeFieldBegin('searchCriteriaForXiaoHua', Thrift.Type.STRUCT, 1);
    this.searchCriteriaForXiaoHua.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_searchCriteriaForXiaoHuaUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_searchCriteriaForXiaoHuaUser_result.prototype = {};
BuyerServ_searchCriteriaForXiaoHuaUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AdminFloretUserParaResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_searchCriteriaForXiaoHuaUser_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_searchCriteriaForXiaoHuaUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_exportFloretUserTable_args = function(args) {
  this.searchCriteriaForXiaoHua = null;
  if (args) {
    if (args.searchCriteriaForXiaoHua !== undefined) {
      this.searchCriteriaForXiaoHua = args.searchCriteriaForXiaoHua;
    }
  }
};
BuyerServ_exportFloretUserTable_args.prototype = {};
BuyerServ_exportFloretUserTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchCriteriaForXiaoHua = new ttypes.SearchCriteriaForXiaoHua();
        this.searchCriteriaForXiaoHua.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_exportFloretUserTable_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_exportFloretUserTable_args');
  if (this.searchCriteriaForXiaoHua !== null && this.searchCriteriaForXiaoHua !== undefined) {
    output.writeFieldBegin('searchCriteriaForXiaoHua', Thrift.Type.STRUCT, 1);
    this.searchCriteriaForXiaoHua.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_exportFloretUserTable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_exportFloretUserTable_result.prototype = {};
BuyerServ_exportFloretUserTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_exportFloretUserTable_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_exportFloretUserTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_importExpressInfoToDB_args = function(args) {
  this.exurl = null;
  if (args) {
    if (args.exurl !== undefined) {
      this.exurl = args.exurl;
    }
  }
};
BuyerServ_importExpressInfoToDB_args.prototype = {};
BuyerServ_importExpressInfoToDB_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.exurl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_importExpressInfoToDB_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_importExpressInfoToDB_args');
  if (this.exurl !== null && this.exurl !== undefined) {
    output.writeFieldBegin('exurl', Thrift.Type.STRING, 1);
    output.writeString(this.exurl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_importExpressInfoToDB_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_importExpressInfoToDB_result.prototype = {};
BuyerServ_importExpressInfoToDB_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_importExpressInfoToDB_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_importExpressInfoToDB_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_importSZTCartToDB_args = function(args) {
  this.exurl = null;
  if (args) {
    if (args.exurl !== undefined) {
      this.exurl = args.exurl;
    }
  }
};
BuyerServ_importSZTCartToDB_args.prototype = {};
BuyerServ_importSZTCartToDB_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.exurl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_importSZTCartToDB_args.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_importSZTCartToDB_args');
  if (this.exurl !== null && this.exurl !== undefined) {
    output.writeFieldBegin('exurl', Thrift.Type.STRING, 1);
    output.writeString(this.exurl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServ_importSZTCartToDB_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BuyerServ_importSZTCartToDB_result.prototype = {};
BuyerServ_importSZTCartToDB_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerServ_importSZTCartToDB_result.prototype.write = function(output) {
  output.writeStructBegin('BuyerServ_importSZTCartToDB_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BuyerServClient.prototype = {};
BuyerServClient.prototype.seqid = function() { return this._seqid; }
BuyerServClient.prototype.new_seqid = function() { return this._seqid += 1; }
BuyerServClient.prototype.buyerIsExist = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_buyerIsExist(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_buyerIsExist(loginName);
  }
};

BuyerServClient.prototype.send_buyerIsExist = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('buyerIsExist', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_buyerIsExist_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_buyerIsExist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_buyerIsExist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('buyerIsExist failed: unknown result');
};
BuyerServClient.prototype.signin = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signin(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signin(buyer);
  }
};

BuyerServClient.prototype.send_signin = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_signin_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_signin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_signin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signin failed: unknown result');
};
BuyerServClient.prototype.newSignin = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newSignin(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newSignin(buyer);
  }
};

BuyerServClient.prototype.send_newSignin = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newSignin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_newSignin_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_newSignin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_newSignin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newSignin failed: unknown result');
};
BuyerServClient.prototype.login = function(buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_login(buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_login(buyer, loginLog);
  }
};

BuyerServClient.prototype.send_login = function(buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_login_args();
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
BuyerServClient.prototype.newLogin = function(buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newLogin(buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newLogin(buyer, loginLog);
  }
};

BuyerServClient.prototype.send_newLogin = function(buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newLogin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_newLogin_args();
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_newLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_newLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newLogin failed: unknown result');
};
BuyerServClient.prototype.smsLogin = function(buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_smsLogin(buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_smsLogin(buyer, loginLog);
  }
};

BuyerServClient.prototype.send_smsLogin = function(buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('smsLogin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_smsLogin_args();
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_smsLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_smsLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('smsLogin failed: unknown result');
};
BuyerServClient.prototype.logout = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logout(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logout(loginLog);
  }
};

BuyerServClient.prototype.send_logout = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_logout_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_logout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_logout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('logout failed: unknown result');
};
BuyerServClient.prototype.isOnline = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isOnline(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isOnline(loginLog);
  }
};

BuyerServClient.prototype.send_isOnline = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isOnline', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isOnline_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isOnline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isOnline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isOnline failed: unknown result');
};
BuyerServClient.prototype.getOnlineInfo = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOnlineInfo(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOnlineInfo(loginLog);
  }
};

BuyerServClient.prototype.send_getOnlineInfo = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOnlineInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getOnlineInfo_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getOnlineInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getOnlineInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOnlineInfo failed: unknown result');
};
BuyerServClient.prototype.pwdFind = function(findWay, account, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pwdFind(findWay, account);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pwdFind(findWay, account);
  }
};

BuyerServClient.prototype.send_pwdFind = function(findWay, account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pwdFind', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_pwdFind_args();
  args.findWay = findWay;
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_pwdFind = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_pwdFind_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pwdFind failed: unknown result');
};
BuyerServClient.prototype.getBuyer = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuyer(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuyer(buyer);
  }
};

BuyerServClient.prototype.send_getBuyer = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuyer', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getBuyer_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getBuyer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getBuyer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuyer failed: unknown result');
};
BuyerServClient.prototype.getBuyerInfo = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuyerInfo(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuyerInfo(buyer);
  }
};

BuyerServClient.prototype.send_getBuyerInfo = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuyerInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getBuyerInfo_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getBuyerInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getBuyerInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuyerInfo failed: unknown result');
};
BuyerServClient.prototype.getListBuyer = function(userIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getListBuyer(userIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getListBuyer(userIdList);
  }
};

BuyerServClient.prototype.send_getListBuyer = function(userIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getListBuyer', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getListBuyer_args();
  args.userIdList = userIdList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getListBuyer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getListBuyer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getListBuyer failed: unknown result');
};
BuyerServClient.prototype.updateBuyer = function(buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuyer(buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuyer(buyer);
  }
};

BuyerServClient.prototype.send_updateBuyer = function(buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuyer', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_updateBuyer_args();
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_updateBuyer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_updateBuyer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBuyer failed: unknown result');
};
BuyerServClient.prototype.resetBuyerPwd = function(newPwd, buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetBuyerPwd(newPwd, buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetBuyerPwd(newPwd, buyer);
  }
};

BuyerServClient.prototype.send_resetBuyerPwd = function(newPwd, buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetBuyerPwd', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_resetBuyerPwd_args();
  args.newPwd = newPwd;
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_resetBuyerPwd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_resetBuyerPwd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resetBuyerPwd failed: unknown result');
};
BuyerServClient.prototype.newResetBuyerPwd = function(newPwd, buyer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newResetBuyerPwd(newPwd, buyer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newResetBuyerPwd(newPwd, buyer);
  }
};

BuyerServClient.prototype.send_newResetBuyerPwd = function(newPwd, buyer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newResetBuyerPwd', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_newResetBuyerPwd_args();
  args.newPwd = newPwd;
  args.buyer = buyer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_newResetBuyerPwd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_newResetBuyerPwd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newResetBuyerPwd failed: unknown result');
};
BuyerServClient.prototype.signinThirdParty = function(loginLog, thirdUser, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signinThirdParty(loginLog, thirdUser);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signinThirdParty(loginLog, thirdUser);
  }
};

BuyerServClient.prototype.send_signinThirdParty = function(loginLog, thirdUser) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signinThirdParty', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_signinThirdParty_args();
  args.loginLog = loginLog;
  args.thirdUser = thirdUser;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_signinThirdParty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_signinThirdParty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signinThirdParty failed: unknown result');
};
BuyerServClient.prototype.isBindThirdParty = function(thirdType, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isBindThirdParty(thirdType, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isBindThirdParty(thirdType, loginLog);
  }
};

BuyerServClient.prototype.send_isBindThirdParty = function(thirdType, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isBindThirdParty', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isBindThirdParty_args();
  args.thirdType = thirdType;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isBindThirdParty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isBindThirdParty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isBindThirdParty failed: unknown result');
};
BuyerServClient.prototype.getAuthInfo = function(authInfo, buyer, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAuthInfo(authInfo, buyer, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAuthInfo(authInfo, buyer, loginLog);
  }
};

BuyerServClient.prototype.send_getAuthInfo = function(authInfo, buyer, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAuthInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getAuthInfo_args();
  args.authInfo = authInfo;
  args.buyer = buyer;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getAuthInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getAuthInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAuthInfo failed: unknown result');
};
BuyerServClient.prototype.validAuth = function(loginLog, authInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validAuth(loginLog, authInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validAuth(loginLog, authInfo);
  }
};

BuyerServClient.prototype.send_validAuth = function(loginLog, authInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_validAuth_args();
  args.loginLog = loginLog;
  args.authInfo = authInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_validAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_validAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validAuth failed: unknown result');
};
BuyerServClient.prototype.thirdUserSignin = function(loginLog, UserThird, validateInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_thirdUserSignin(loginLog, UserThird, validateInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_thirdUserSignin(loginLog, UserThird, validateInfo);
  }
};

BuyerServClient.prototype.send_thirdUserSignin = function(loginLog, UserThird, validateInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('thirdUserSignin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_thirdUserSignin_args();
  args.loginLog = loginLog;
  args.UserThird = UserThird;
  args.validateInfo = validateInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_thirdUserSignin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_thirdUserSignin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('thirdUserSignin failed: unknown result');
};
BuyerServClient.prototype.isExitsThirdUser = function(loginLog, validateInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isExitsThirdUser(loginLog, validateInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isExitsThirdUser(loginLog, validateInfo);
  }
};

BuyerServClient.prototype.send_isExitsThirdUser = function(loginLog, validateInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isExitsThirdUser', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isExitsThirdUser_args();
  args.loginLog = loginLog;
  args.validateInfo = validateInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isExitsThirdUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isExitsThirdUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isExitsThirdUser failed: unknown result');
};
BuyerServClient.prototype.requestHttps = function(url, extInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestHttps(url, extInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestHttps(url, extInfo);
  }
};

BuyerServClient.prototype.send_requestHttps = function(url, extInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestHttps', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_requestHttps_args();
  args.url = url;
  args.extInfo = extInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_requestHttps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_requestHttps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestHttps failed: unknown result');
};
BuyerServClient.prototype.H5ThirdLogin = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_H5ThirdLogin(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_H5ThirdLogin(param);
  }
};

BuyerServClient.prototype.send_H5ThirdLogin = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('H5ThirdLogin', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_H5ThirdLogin_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_H5ThirdLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_H5ThirdLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('H5ThirdLogin failed: unknown result');
};
BuyerServClient.prototype.isPurchaseMobile = function(mobile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isPurchaseMobile(mobile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isPurchaseMobile(mobile);
  }
};

BuyerServClient.prototype.send_isPurchaseMobile = function(mobile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isPurchaseMobile', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isPurchaseMobile_args();
  args.mobile = mobile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isPurchaseMobile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isPurchaseMobile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isPurchaseMobile failed: unknown result');
};
BuyerServClient.prototype.isDisableUser = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isDisableUser(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isDisableUser(param);
  }
};

BuyerServClient.prototype.send_isDisableUser = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isDisableUser', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_isDisableUser_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_isDisableUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_isDisableUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isDisableUser failed: unknown result');
};
BuyerServClient.prototype.smsLoginEnterAmount = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_smsLoginEnterAmount(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_smsLoginEnterAmount(param);
  }
};

BuyerServClient.prototype.send_smsLoginEnterAmount = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('smsLoginEnterAmount', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_smsLoginEnterAmount_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_smsLoginEnterAmount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_smsLoginEnterAmount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('smsLoginEnterAmount failed: unknown result');
};
BuyerServClient.prototype.thirdSigninCheck = function(loginLog, UserThird, validateInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_thirdSigninCheck(loginLog, UserThird, validateInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_thirdSigninCheck(loginLog, UserThird, validateInfo);
  }
};

BuyerServClient.prototype.send_thirdSigninCheck = function(loginLog, UserThird, validateInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('thirdSigninCheck', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_thirdSigninCheck_args();
  args.loginLog = loginLog;
  args.UserThird = UserThird;
  args.validateInfo = validateInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_thirdSigninCheck = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_thirdSigninCheck_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('thirdSigninCheck failed: unknown result');
};
BuyerServClient.prototype.checkAppH5Token = function(token, mobileNo, openId, mac, accessCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAppH5Token(token, mobileNo, openId, mac, accessCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAppH5Token(token, mobileNo, openId, mac, accessCode);
  }
};

BuyerServClient.prototype.send_checkAppH5Token = function(token, mobileNo, openId, mac, accessCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkAppH5Token', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_checkAppH5Token_args();
  args.token = token;
  args.mobileNo = mobileNo;
  args.openId = openId;
  args.mac = mac;
  args.accessCode = accessCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_checkAppH5Token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_checkAppH5Token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAppH5Token failed: unknown result');
};
BuyerServClient.prototype.getProfileFromWeixinByUnionId = function(unionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfileFromWeixinByUnionId(unionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfileFromWeixinByUnionId(unionId);
  }
};

BuyerServClient.prototype.send_getProfileFromWeixinByUnionId = function(unionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfileFromWeixinByUnionId', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getProfileFromWeixinByUnionId_args();
  args.unionId = unionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getProfileFromWeixinByUnionId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getProfileFromWeixinByUnionId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfileFromWeixinByUnionId failed: unknown result');
};
BuyerServClient.prototype.getProfileFromWeixinByCode = function(code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfileFromWeixinByCode(code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfileFromWeixinByCode(code);
  }
};

BuyerServClient.prototype.send_getProfileFromWeixinByCode = function(code) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfileFromWeixinByCode', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getProfileFromWeixinByCode_args();
  args.code = code;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getProfileFromWeixinByCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getProfileFromWeixinByCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfileFromWeixinByCode failed: unknown result');
};
BuyerServClient.prototype.getWeiXinJSconfig = function(url, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getWeiXinJSconfig(url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getWeiXinJSconfig(url);
  }
};

BuyerServClient.prototype.send_getWeiXinJSconfig = function(url) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWeiXinJSconfig', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_getWeiXinJSconfig_args();
  args.url = url;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_getWeiXinJSconfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_getWeiXinJSconfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWeiXinJSconfig failed: unknown result');
};
BuyerServClient.prototype.floretPassData = function(user, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_floretPassData(user);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_floretPassData(user);
  }
};

BuyerServClient.prototype.send_floretPassData = function(user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('floretPassData', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_floretPassData_args();
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_floretPassData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_floretPassData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('floretPassData failed: unknown result');
};
BuyerServClient.prototype.OnLineApply = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_OnLineApply(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_OnLineApply(param);
  }
};

BuyerServClient.prototype.send_OnLineApply = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('OnLineApply', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_OnLineApply_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_OnLineApply = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_OnLineApply_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('OnLineApply failed: unknown result');
};
BuyerServClient.prototype.queryExpress = function(code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryExpress(code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryExpress(code);
  }
};

BuyerServClient.prototype.send_queryExpress = function(code) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryExpress', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_queryExpress_args();
  args.code = code;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_queryExpress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_queryExpress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryExpress failed: unknown result');
};
BuyerServClient.prototype.sellerCheckCode = function(sellerId, code, sztCardId, sellerName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sellerCheckCode(sellerId, code, sztCardId, sellerName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sellerCheckCode(sellerId, code, sztCardId, sellerName);
  }
};

BuyerServClient.prototype.send_sellerCheckCode = function(sellerId, code, sztCardId, sellerName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sellerCheckCode', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_sellerCheckCode_args();
  args.sellerId = sellerId;
  args.code = code;
  args.sztCardId = sztCardId;
  args.sellerName = sellerName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_sellerCheckCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_sellerCheckCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sellerCheckCode failed: unknown result');
};
BuyerServClient.prototype.sendMobileNote = function(mobile, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMobileNote(mobile, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMobileNote(mobile, type);
  }
};

BuyerServClient.prototype.send_sendMobileNote = function(mobile, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMobileNote', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_sendMobileNote_args();
  args.mobile = mobile;
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_sendMobileNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_sendMobileNote_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMobileNote failed: unknown result');
};
BuyerServClient.prototype.findVerifyRecord = function(sellerId, pagination, vrParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findVerifyRecord(sellerId, pagination, vrParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findVerifyRecord(sellerId, pagination, vrParam);
  }
};

BuyerServClient.prototype.send_findVerifyRecord = function(sellerId, pagination, vrParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findVerifyRecord', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_findVerifyRecord_args();
  args.sellerId = sellerId;
  args.pagination = pagination;
  args.vrParam = vrParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_findVerifyRecord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_findVerifyRecord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findVerifyRecord failed: unknown result');
};
BuyerServClient.prototype.exportVerifyRecord = function(sellerId, vrParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportVerifyRecord(sellerId, vrParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportVerifyRecord(sellerId, vrParam);
  }
};

BuyerServClient.prototype.send_exportVerifyRecord = function(sellerId, vrParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportVerifyRecord', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_exportVerifyRecord_args();
  args.sellerId = sellerId;
  args.vrParam = vrParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_exportVerifyRecord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_exportVerifyRecord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportVerifyRecord failed: unknown result');
};
BuyerServClient.prototype.searchAdminExpressInfo = function(serialNumber, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchAdminExpressInfo(serialNumber);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchAdminExpressInfo(serialNumber);
  }
};

BuyerServClient.prototype.send_searchAdminExpressInfo = function(serialNumber) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchAdminExpressInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_searchAdminExpressInfo_args();
  args.serialNumber = serialNumber;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_searchAdminExpressInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_searchAdminExpressInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchAdminExpressInfo failed: unknown result');
};
BuyerServClient.prototype.searchCriteriaForXiaoHuaUser = function(searchCriteriaForXiaoHua, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchCriteriaForXiaoHuaUser(searchCriteriaForXiaoHua, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchCriteriaForXiaoHuaUser(searchCriteriaForXiaoHua, pagination);
  }
};

BuyerServClient.prototype.send_searchCriteriaForXiaoHuaUser = function(searchCriteriaForXiaoHua, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchCriteriaForXiaoHuaUser', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_searchCriteriaForXiaoHuaUser_args();
  args.searchCriteriaForXiaoHua = searchCriteriaForXiaoHua;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_searchCriteriaForXiaoHuaUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_searchCriteriaForXiaoHuaUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchCriteriaForXiaoHuaUser failed: unknown result');
};
BuyerServClient.prototype.exportFloretUserTable = function(searchCriteriaForXiaoHua, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportFloretUserTable(searchCriteriaForXiaoHua);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportFloretUserTable(searchCriteriaForXiaoHua);
  }
};

BuyerServClient.prototype.send_exportFloretUserTable = function(searchCriteriaForXiaoHua) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportFloretUserTable', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_exportFloretUserTable_args();
  args.searchCriteriaForXiaoHua = searchCriteriaForXiaoHua;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_exportFloretUserTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_exportFloretUserTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportFloretUserTable failed: unknown result');
};
BuyerServClient.prototype.importExpressInfoToDB = function(exurl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_importExpressInfoToDB(exurl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_importExpressInfoToDB(exurl);
  }
};

BuyerServClient.prototype.send_importExpressInfoToDB = function(exurl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importExpressInfoToDB', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_importExpressInfoToDB_args();
  args.exurl = exurl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_importExpressInfoToDB = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_importExpressInfoToDB_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importExpressInfoToDB failed: unknown result');
};
BuyerServClient.prototype.importSZTCartToDB = function(exurl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_importSZTCartToDB(exurl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_importSZTCartToDB(exurl);
  }
};

BuyerServClient.prototype.send_importSZTCartToDB = function(exurl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importSZTCartToDB', Thrift.MessageType.CALL, this.seqid());
  var args = new BuyerServ_importSZTCartToDB_args();
  args.exurl = exurl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BuyerServClient.prototype.recv_importSZTCartToDB = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BuyerServ_importSZTCartToDB_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importSZTCartToDB failed: unknown result');
};
BuyerServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BuyerServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BuyerServProcessor.prototype.process_buyerIsExist = function(seqid, input, output) {
  var args = new BuyerServ_buyerIsExist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.buyerIsExist.length === 1) {
    Q.fcall(this._handler.buyerIsExist, args.loginName)
      .then(function(result) {
        var result = new BuyerServ_buyerIsExist_result({success: result});
        output.writeMessageBegin("buyerIsExist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_buyerIsExist_result(err);
        output.writeMessageBegin("buyerIsExist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.buyerIsExist(args.loginName,  function (err, result) {
      var result = new BuyerServ_buyerIsExist_result((err != null ? err : {success: result}));
      output.writeMessageBegin("buyerIsExist", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_signin = function(seqid, input, output) {
  var args = new BuyerServ_signin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signin.length === 1) {
    Q.fcall(this._handler.signin, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_signin_result({success: result});
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_signin_result(err);
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signin(args.buyer,  function (err, result) {
      var result = new BuyerServ_signin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_newSignin = function(seqid, input, output) {
  var args = new BuyerServ_newSignin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newSignin.length === 1) {
    Q.fcall(this._handler.newSignin, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_newSignin_result({success: result});
        output.writeMessageBegin("newSignin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_newSignin_result(err);
        output.writeMessageBegin("newSignin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newSignin(args.buyer,  function (err, result) {
      var result = new BuyerServ_newSignin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("newSignin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new BuyerServ_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.login.length === 2) {
    Q.fcall(this._handler.login, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_login_result(err);
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.login(args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_login_result((err != null ? err : {success: result}));
      output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_newLogin = function(seqid, input, output) {
  var args = new BuyerServ_newLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newLogin.length === 2) {
    Q.fcall(this._handler.newLogin, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_newLogin_result({success: result});
        output.writeMessageBegin("newLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_newLogin_result(err);
        output.writeMessageBegin("newLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newLogin(args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_newLogin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("newLogin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_smsLogin = function(seqid, input, output) {
  var args = new BuyerServ_smsLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.smsLogin.length === 2) {
    Q.fcall(this._handler.smsLogin, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_smsLogin_result({success: result});
        output.writeMessageBegin("smsLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_smsLogin_result(err);
        output.writeMessageBegin("smsLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.smsLogin(args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_smsLogin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("smsLogin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_logout = function(seqid, input, output) {
  var args = new BuyerServ_logout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logout.length === 1) {
    Q.fcall(this._handler.logout, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_logout_result({success: result});
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_logout_result(err);
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.logout(args.loginLog,  function (err, result) {
      var result = new BuyerServ_logout_result((err != null ? err : {success: result}));
      output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isOnline = function(seqid, input, output) {
  var args = new BuyerServ_isOnline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isOnline.length === 1) {
    Q.fcall(this._handler.isOnline, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_isOnline_result({success: result});
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isOnline_result(err);
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isOnline(args.loginLog,  function (err, result) {
      var result = new BuyerServ_isOnline_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getOnlineInfo = function(seqid, input, output) {
  var args = new BuyerServ_getOnlineInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOnlineInfo.length === 1) {
    Q.fcall(this._handler.getOnlineInfo, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_getOnlineInfo_result({success: result});
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getOnlineInfo_result(err);
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getOnlineInfo(args.loginLog,  function (err, result) {
      var result = new BuyerServ_getOnlineInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_pwdFind = function(seqid, input, output) {
  var args = new BuyerServ_pwdFind_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pwdFind.length === 2) {
    Q.fcall(this._handler.pwdFind, args.findWay, args.account)
      .then(function(result) {
        var result = new BuyerServ_pwdFind_result({success: result});
        output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_pwdFind_result(err);
        output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pwdFind(args.findWay, args.account,  function (err, result) {
      var result = new BuyerServ_pwdFind_result((err != null ? err : {success: result}));
      output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getBuyer = function(seqid, input, output) {
  var args = new BuyerServ_getBuyer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuyer.length === 1) {
    Q.fcall(this._handler.getBuyer, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_getBuyer_result({success: result});
        output.writeMessageBegin("getBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getBuyer_result(err);
        output.writeMessageBegin("getBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuyer(args.buyer,  function (err, result) {
      var result = new BuyerServ_getBuyer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getBuyer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getBuyerInfo = function(seqid, input, output) {
  var args = new BuyerServ_getBuyerInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuyerInfo.length === 1) {
    Q.fcall(this._handler.getBuyerInfo, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_getBuyerInfo_result({success: result});
        output.writeMessageBegin("getBuyerInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getBuyerInfo_result(err);
        output.writeMessageBegin("getBuyerInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuyerInfo(args.buyer,  function (err, result) {
      var result = new BuyerServ_getBuyerInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getBuyerInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getListBuyer = function(seqid, input, output) {
  var args = new BuyerServ_getListBuyer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getListBuyer.length === 1) {
    Q.fcall(this._handler.getListBuyer, args.userIdList)
      .then(function(result) {
        var result = new BuyerServ_getListBuyer_result({success: result});
        output.writeMessageBegin("getListBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getListBuyer_result(err);
        output.writeMessageBegin("getListBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getListBuyer(args.userIdList,  function (err, result) {
      var result = new BuyerServ_getListBuyer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getListBuyer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_updateBuyer = function(seqid, input, output) {
  var args = new BuyerServ_updateBuyer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuyer.length === 1) {
    Q.fcall(this._handler.updateBuyer, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_updateBuyer_result({success: result});
        output.writeMessageBegin("updateBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_updateBuyer_result(err);
        output.writeMessageBegin("updateBuyer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuyer(args.buyer,  function (err, result) {
      var result = new BuyerServ_updateBuyer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateBuyer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_resetBuyerPwd = function(seqid, input, output) {
  var args = new BuyerServ_resetBuyerPwd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetBuyerPwd.length === 2) {
    Q.fcall(this._handler.resetBuyerPwd, args.newPwd, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_resetBuyerPwd_result({success: result});
        output.writeMessageBegin("resetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_resetBuyerPwd_result(err);
        output.writeMessageBegin("resetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetBuyerPwd(args.newPwd, args.buyer,  function (err, result) {
      var result = new BuyerServ_resetBuyerPwd_result((err != null ? err : {success: result}));
      output.writeMessageBegin("resetBuyerPwd", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_newResetBuyerPwd = function(seqid, input, output) {
  var args = new BuyerServ_newResetBuyerPwd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newResetBuyerPwd.length === 2) {
    Q.fcall(this._handler.newResetBuyerPwd, args.newPwd, args.buyer)
      .then(function(result) {
        var result = new BuyerServ_newResetBuyerPwd_result({success: result});
        output.writeMessageBegin("newResetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_newResetBuyerPwd_result(err);
        output.writeMessageBegin("newResetBuyerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newResetBuyerPwd(args.newPwd, args.buyer,  function (err, result) {
      var result = new BuyerServ_newResetBuyerPwd_result((err != null ? err : {success: result}));
      output.writeMessageBegin("newResetBuyerPwd", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_signinThirdParty = function(seqid, input, output) {
  var args = new BuyerServ_signinThirdParty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signinThirdParty.length === 2) {
    Q.fcall(this._handler.signinThirdParty, args.loginLog, args.thirdUser)
      .then(function(result) {
        var result = new BuyerServ_signinThirdParty_result({success: result});
        output.writeMessageBegin("signinThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_signinThirdParty_result(err);
        output.writeMessageBegin("signinThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signinThirdParty(args.loginLog, args.thirdUser,  function (err, result) {
      var result = new BuyerServ_signinThirdParty_result((err != null ? err : {success: result}));
      output.writeMessageBegin("signinThirdParty", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isBindThirdParty = function(seqid, input, output) {
  var args = new BuyerServ_isBindThirdParty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isBindThirdParty.length === 2) {
    Q.fcall(this._handler.isBindThirdParty, args.thirdType, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_isBindThirdParty_result({success: result});
        output.writeMessageBegin("isBindThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isBindThirdParty_result(err);
        output.writeMessageBegin("isBindThirdParty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isBindThirdParty(args.thirdType, args.loginLog,  function (err, result) {
      var result = new BuyerServ_isBindThirdParty_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isBindThirdParty", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getAuthInfo = function(seqid, input, output) {
  var args = new BuyerServ_getAuthInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAuthInfo.length === 3) {
    Q.fcall(this._handler.getAuthInfo, args.authInfo, args.buyer, args.loginLog)
      .then(function(result) {
        var result = new BuyerServ_getAuthInfo_result({success: result});
        output.writeMessageBegin("getAuthInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getAuthInfo_result(err);
        output.writeMessageBegin("getAuthInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAuthInfo(args.authInfo, args.buyer, args.loginLog,  function (err, result) {
      var result = new BuyerServ_getAuthInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getAuthInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_validAuth = function(seqid, input, output) {
  var args = new BuyerServ_validAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validAuth.length === 2) {
    Q.fcall(this._handler.validAuth, args.loginLog, args.authInfo)
      .then(function(result) {
        var result = new BuyerServ_validAuth_result({success: result});
        output.writeMessageBegin("validAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_validAuth_result(err);
        output.writeMessageBegin("validAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validAuth(args.loginLog, args.authInfo,  function (err, result) {
      var result = new BuyerServ_validAuth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("validAuth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_thirdUserSignin = function(seqid, input, output) {
  var args = new BuyerServ_thirdUserSignin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.thirdUserSignin.length === 3) {
    Q.fcall(this._handler.thirdUserSignin, args.loginLog, args.UserThird, args.validateInfo)
      .then(function(result) {
        var result = new BuyerServ_thirdUserSignin_result({success: result});
        output.writeMessageBegin("thirdUserSignin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_thirdUserSignin_result(err);
        output.writeMessageBegin("thirdUserSignin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.thirdUserSignin(args.loginLog, args.UserThird, args.validateInfo,  function (err, result) {
      var result = new BuyerServ_thirdUserSignin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("thirdUserSignin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isExitsThirdUser = function(seqid, input, output) {
  var args = new BuyerServ_isExitsThirdUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isExitsThirdUser.length === 2) {
    Q.fcall(this._handler.isExitsThirdUser, args.loginLog, args.validateInfo)
      .then(function(result) {
        var result = new BuyerServ_isExitsThirdUser_result({success: result});
        output.writeMessageBegin("isExitsThirdUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isExitsThirdUser_result(err);
        output.writeMessageBegin("isExitsThirdUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isExitsThirdUser(args.loginLog, args.validateInfo,  function (err, result) {
      var result = new BuyerServ_isExitsThirdUser_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isExitsThirdUser", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_requestHttps = function(seqid, input, output) {
  var args = new BuyerServ_requestHttps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestHttps.length === 2) {
    Q.fcall(this._handler.requestHttps, args.url, args.extInfo)
      .then(function(result) {
        var result = new BuyerServ_requestHttps_result({success: result});
        output.writeMessageBegin("requestHttps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_requestHttps_result(err);
        output.writeMessageBegin("requestHttps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestHttps(args.url, args.extInfo,  function (err, result) {
      var result = new BuyerServ_requestHttps_result((err != null ? err : {success: result}));
      output.writeMessageBegin("requestHttps", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_H5ThirdLogin = function(seqid, input, output) {
  var args = new BuyerServ_H5ThirdLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.H5ThirdLogin.length === 1) {
    Q.fcall(this._handler.H5ThirdLogin, args.param)
      .then(function(result) {
        var result = new BuyerServ_H5ThirdLogin_result({success: result});
        output.writeMessageBegin("H5ThirdLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_H5ThirdLogin_result(err);
        output.writeMessageBegin("H5ThirdLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.H5ThirdLogin(args.param,  function (err, result) {
      var result = new BuyerServ_H5ThirdLogin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("H5ThirdLogin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isPurchaseMobile = function(seqid, input, output) {
  var args = new BuyerServ_isPurchaseMobile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isPurchaseMobile.length === 1) {
    Q.fcall(this._handler.isPurchaseMobile, args.mobile)
      .then(function(result) {
        var result = new BuyerServ_isPurchaseMobile_result({success: result});
        output.writeMessageBegin("isPurchaseMobile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isPurchaseMobile_result(err);
        output.writeMessageBegin("isPurchaseMobile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isPurchaseMobile(args.mobile,  function (err, result) {
      var result = new BuyerServ_isPurchaseMobile_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isPurchaseMobile", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_isDisableUser = function(seqid, input, output) {
  var args = new BuyerServ_isDisableUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isDisableUser.length === 1) {
    Q.fcall(this._handler.isDisableUser, args.param)
      .then(function(result) {
        var result = new BuyerServ_isDisableUser_result({success: result});
        output.writeMessageBegin("isDisableUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_isDisableUser_result(err);
        output.writeMessageBegin("isDisableUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isDisableUser(args.param,  function (err, result) {
      var result = new BuyerServ_isDisableUser_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isDisableUser", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_smsLoginEnterAmount = function(seqid, input, output) {
  var args = new BuyerServ_smsLoginEnterAmount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.smsLoginEnterAmount.length === 1) {
    Q.fcall(this._handler.smsLoginEnterAmount, args.param)
      .then(function(result) {
        var result = new BuyerServ_smsLoginEnterAmount_result({success: result});
        output.writeMessageBegin("smsLoginEnterAmount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_smsLoginEnterAmount_result(err);
        output.writeMessageBegin("smsLoginEnterAmount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.smsLoginEnterAmount(args.param,  function (err, result) {
      var result = new BuyerServ_smsLoginEnterAmount_result((err != null ? err : {success: result}));
      output.writeMessageBegin("smsLoginEnterAmount", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_thirdSigninCheck = function(seqid, input, output) {
  var args = new BuyerServ_thirdSigninCheck_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.thirdSigninCheck.length === 3) {
    Q.fcall(this._handler.thirdSigninCheck, args.loginLog, args.UserThird, args.validateInfo)
      .then(function(result) {
        var result = new BuyerServ_thirdSigninCheck_result({success: result});
        output.writeMessageBegin("thirdSigninCheck", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_thirdSigninCheck_result(err);
        output.writeMessageBegin("thirdSigninCheck", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.thirdSigninCheck(args.loginLog, args.UserThird, args.validateInfo,  function (err, result) {
      var result = new BuyerServ_thirdSigninCheck_result((err != null ? err : {success: result}));
      output.writeMessageBegin("thirdSigninCheck", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_checkAppH5Token = function(seqid, input, output) {
  var args = new BuyerServ_checkAppH5Token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAppH5Token.length === 5) {
    Q.fcall(this._handler.checkAppH5Token, args.token, args.mobileNo, args.openId, args.mac, args.accessCode)
      .then(function(result) {
        var result = new BuyerServ_checkAppH5Token_result({success: result});
        output.writeMessageBegin("checkAppH5Token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_checkAppH5Token_result(err);
        output.writeMessageBegin("checkAppH5Token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkAppH5Token(args.token, args.mobileNo, args.openId, args.mac, args.accessCode,  function (err, result) {
      var result = new BuyerServ_checkAppH5Token_result((err != null ? err : {success: result}));
      output.writeMessageBegin("checkAppH5Token", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getProfileFromWeixinByUnionId = function(seqid, input, output) {
  var args = new BuyerServ_getProfileFromWeixinByUnionId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfileFromWeixinByUnionId.length === 1) {
    Q.fcall(this._handler.getProfileFromWeixinByUnionId, args.unionId)
      .then(function(result) {
        var result = new BuyerServ_getProfileFromWeixinByUnionId_result({success: result});
        output.writeMessageBegin("getProfileFromWeixinByUnionId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getProfileFromWeixinByUnionId_result(err);
        output.writeMessageBegin("getProfileFromWeixinByUnionId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfileFromWeixinByUnionId(args.unionId,  function (err, result) {
      var result = new BuyerServ_getProfileFromWeixinByUnionId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getProfileFromWeixinByUnionId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getProfileFromWeixinByCode = function(seqid, input, output) {
  var args = new BuyerServ_getProfileFromWeixinByCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfileFromWeixinByCode.length === 1) {
    Q.fcall(this._handler.getProfileFromWeixinByCode, args.code)
      .then(function(result) {
        var result = new BuyerServ_getProfileFromWeixinByCode_result({success: result});
        output.writeMessageBegin("getProfileFromWeixinByCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getProfileFromWeixinByCode_result(err);
        output.writeMessageBegin("getProfileFromWeixinByCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfileFromWeixinByCode(args.code,  function (err, result) {
      var result = new BuyerServ_getProfileFromWeixinByCode_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getProfileFromWeixinByCode", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_getWeiXinJSconfig = function(seqid, input, output) {
  var args = new BuyerServ_getWeiXinJSconfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getWeiXinJSconfig.length === 1) {
    Q.fcall(this._handler.getWeiXinJSconfig, args.url)
      .then(function(result) {
        var result = new BuyerServ_getWeiXinJSconfig_result({success: result});
        output.writeMessageBegin("getWeiXinJSconfig", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_getWeiXinJSconfig_result(err);
        output.writeMessageBegin("getWeiXinJSconfig", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getWeiXinJSconfig(args.url,  function (err, result) {
      var result = new BuyerServ_getWeiXinJSconfig_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getWeiXinJSconfig", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_floretPassData = function(seqid, input, output) {
  var args = new BuyerServ_floretPassData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.floretPassData.length === 1) {
    Q.fcall(this._handler.floretPassData, args.user)
      .then(function(result) {
        var result = new BuyerServ_floretPassData_result({success: result});
        output.writeMessageBegin("floretPassData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_floretPassData_result(err);
        output.writeMessageBegin("floretPassData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.floretPassData(args.user,  function (err, result) {
      var result = new BuyerServ_floretPassData_result((err != null ? err : {success: result}));
      output.writeMessageBegin("floretPassData", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_OnLineApply = function(seqid, input, output) {
  var args = new BuyerServ_OnLineApply_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.OnLineApply.length === 1) {
    Q.fcall(this._handler.OnLineApply, args.param)
      .then(function(result) {
        var result = new BuyerServ_OnLineApply_result({success: result});
        output.writeMessageBegin("OnLineApply", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_OnLineApply_result(err);
        output.writeMessageBegin("OnLineApply", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.OnLineApply(args.param,  function (err, result) {
      var result = new BuyerServ_OnLineApply_result((err != null ? err : {success: result}));
      output.writeMessageBegin("OnLineApply", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_queryExpress = function(seqid, input, output) {
  var args = new BuyerServ_queryExpress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryExpress.length === 1) {
    Q.fcall(this._handler.queryExpress, args.code)
      .then(function(result) {
        var result = new BuyerServ_queryExpress_result({success: result});
        output.writeMessageBegin("queryExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_queryExpress_result(err);
        output.writeMessageBegin("queryExpress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryExpress(args.code,  function (err, result) {
      var result = new BuyerServ_queryExpress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryExpress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_sellerCheckCode = function(seqid, input, output) {
  var args = new BuyerServ_sellerCheckCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sellerCheckCode.length === 4) {
    Q.fcall(this._handler.sellerCheckCode, args.sellerId, args.code, args.sztCardId, args.sellerName)
      .then(function(result) {
        var result = new BuyerServ_sellerCheckCode_result({success: result});
        output.writeMessageBegin("sellerCheckCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_sellerCheckCode_result(err);
        output.writeMessageBegin("sellerCheckCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sellerCheckCode(args.sellerId, args.code, args.sztCardId, args.sellerName,  function (err, result) {
      var result = new BuyerServ_sellerCheckCode_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sellerCheckCode", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_sendMobileNote = function(seqid, input, output) {
  var args = new BuyerServ_sendMobileNote_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMobileNote.length === 2) {
    Q.fcall(this._handler.sendMobileNote, args.mobile, args.type)
      .then(function(result) {
        var result = new BuyerServ_sendMobileNote_result({success: result});
        output.writeMessageBegin("sendMobileNote", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_sendMobileNote_result(err);
        output.writeMessageBegin("sendMobileNote", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMobileNote(args.mobile, args.type,  function (err, result) {
      var result = new BuyerServ_sendMobileNote_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendMobileNote", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_findVerifyRecord = function(seqid, input, output) {
  var args = new BuyerServ_findVerifyRecord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findVerifyRecord.length === 3) {
    Q.fcall(this._handler.findVerifyRecord, args.sellerId, args.pagination, args.vrParam)
      .then(function(result) {
        var result = new BuyerServ_findVerifyRecord_result({success: result});
        output.writeMessageBegin("findVerifyRecord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_findVerifyRecord_result(err);
        output.writeMessageBegin("findVerifyRecord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findVerifyRecord(args.sellerId, args.pagination, args.vrParam,  function (err, result) {
      var result = new BuyerServ_findVerifyRecord_result((err != null ? err : {success: result}));
      output.writeMessageBegin("findVerifyRecord", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_exportVerifyRecord = function(seqid, input, output) {
  var args = new BuyerServ_exportVerifyRecord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportVerifyRecord.length === 2) {
    Q.fcall(this._handler.exportVerifyRecord, args.sellerId, args.vrParam)
      .then(function(result) {
        var result = new BuyerServ_exportVerifyRecord_result({success: result});
        output.writeMessageBegin("exportVerifyRecord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_exportVerifyRecord_result(err);
        output.writeMessageBegin("exportVerifyRecord", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportVerifyRecord(args.sellerId, args.vrParam,  function (err, result) {
      var result = new BuyerServ_exportVerifyRecord_result((err != null ? err : {success: result}));
      output.writeMessageBegin("exportVerifyRecord", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_searchAdminExpressInfo = function(seqid, input, output) {
  var args = new BuyerServ_searchAdminExpressInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchAdminExpressInfo.length === 1) {
    Q.fcall(this._handler.searchAdminExpressInfo, args.serialNumber)
      .then(function(result) {
        var result = new BuyerServ_searchAdminExpressInfo_result({success: result});
        output.writeMessageBegin("searchAdminExpressInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_searchAdminExpressInfo_result(err);
        output.writeMessageBegin("searchAdminExpressInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchAdminExpressInfo(args.serialNumber,  function (err, result) {
      var result = new BuyerServ_searchAdminExpressInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("searchAdminExpressInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_searchCriteriaForXiaoHuaUser = function(seqid, input, output) {
  var args = new BuyerServ_searchCriteriaForXiaoHuaUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchCriteriaForXiaoHuaUser.length === 2) {
    Q.fcall(this._handler.searchCriteriaForXiaoHuaUser, args.searchCriteriaForXiaoHua, args.pagination)
      .then(function(result) {
        var result = new BuyerServ_searchCriteriaForXiaoHuaUser_result({success: result});
        output.writeMessageBegin("searchCriteriaForXiaoHuaUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_searchCriteriaForXiaoHuaUser_result(err);
        output.writeMessageBegin("searchCriteriaForXiaoHuaUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchCriteriaForXiaoHuaUser(args.searchCriteriaForXiaoHua, args.pagination,  function (err, result) {
      var result = new BuyerServ_searchCriteriaForXiaoHuaUser_result((err != null ? err : {success: result}));
      output.writeMessageBegin("searchCriteriaForXiaoHuaUser", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_exportFloretUserTable = function(seqid, input, output) {
  var args = new BuyerServ_exportFloretUserTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportFloretUserTable.length === 1) {
    Q.fcall(this._handler.exportFloretUserTable, args.searchCriteriaForXiaoHua)
      .then(function(result) {
        var result = new BuyerServ_exportFloretUserTable_result({success: result});
        output.writeMessageBegin("exportFloretUserTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_exportFloretUserTable_result(err);
        output.writeMessageBegin("exportFloretUserTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportFloretUserTable(args.searchCriteriaForXiaoHua,  function (err, result) {
      var result = new BuyerServ_exportFloretUserTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("exportFloretUserTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_importExpressInfoToDB = function(seqid, input, output) {
  var args = new BuyerServ_importExpressInfoToDB_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.importExpressInfoToDB.length === 1) {
    Q.fcall(this._handler.importExpressInfoToDB, args.exurl)
      .then(function(result) {
        var result = new BuyerServ_importExpressInfoToDB_result({success: result});
        output.writeMessageBegin("importExpressInfoToDB", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_importExpressInfoToDB_result(err);
        output.writeMessageBegin("importExpressInfoToDB", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.importExpressInfoToDB(args.exurl,  function (err, result) {
      var result = new BuyerServ_importExpressInfoToDB_result((err != null ? err : {success: result}));
      output.writeMessageBegin("importExpressInfoToDB", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BuyerServProcessor.prototype.process_importSZTCartToDB = function(seqid, input, output) {
  var args = new BuyerServ_importSZTCartToDB_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.importSZTCartToDB.length === 1) {
    Q.fcall(this._handler.importSZTCartToDB, args.exurl)
      .then(function(result) {
        var result = new BuyerServ_importSZTCartToDB_result({success: result});
        output.writeMessageBegin("importSZTCartToDB", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BuyerServ_importSZTCartToDB_result(err);
        output.writeMessageBegin("importSZTCartToDB", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.importSZTCartToDB(args.exurl,  function (err, result) {
      var result = new BuyerServ_importSZTCartToDB_result((err != null ? err : {success: result}));
      output.writeMessageBegin("importSZTCartToDB", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

