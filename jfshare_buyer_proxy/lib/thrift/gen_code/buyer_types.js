//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
AuthInfo = module.exports.AuthInfo = function(args) {
  this.token = null;
  this.ppInfo = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ppInfo !== undefined) {
      this.ppInfo = args.ppInfo;
    }
  }
};
AuthInfo.prototype = {};
AuthInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ppInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthInfo.prototype.write = function(output) {
  output.writeStructBegin('AuthInfo');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ppInfo !== null && this.ppInfo !== undefined) {
    output.writeFieldBegin('ppInfo', Thrift.Type.STRING, 2);
    output.writeString(this.ppInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthInfoResult = module.exports.AuthInfoResult = function(args) {
  this.result = null;
  this.authInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.authInfo !== undefined) {
      this.authInfo = args.authInfo;
    }
  }
};
AuthInfoResult.prototype = {};
AuthInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authInfo = new ttypes.AuthInfo();
        this.authInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthInfoResult.prototype.write = function(output) {
  output.writeStructBegin('AuthInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.authInfo !== null && this.authInfo !== undefined) {
    output.writeFieldBegin('authInfo', Thrift.Type.STRUCT, 2);
    this.authInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdpartyUser = module.exports.ThirdpartyUser = function(args) {
  this.signinName = null;
  this.userName = null;
  this.thirdType = null;
  this.custId = null;
  this.accountNo = null;
  this.extInfo = null;
  if (args) {
    if (args.signinName !== undefined) {
      this.signinName = args.signinName;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.thirdType !== undefined) {
      this.thirdType = args.thirdType;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.accountNo !== undefined) {
      this.accountNo = args.accountNo;
    }
    if (args.extInfo !== undefined) {
      this.extInfo = args.extInfo;
    }
  }
};
ThirdpartyUser.prototype = {};
ThirdpartyUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.signinName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.thirdType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.accountNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.extInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdpartyUser.prototype.write = function(output) {
  output.writeStructBegin('ThirdpartyUser');
  if (this.signinName !== null && this.signinName !== undefined) {
    output.writeFieldBegin('signinName', Thrift.Type.STRING, 1);
    output.writeString(this.signinName);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.thirdType !== null && this.thirdType !== undefined) {
    output.writeFieldBegin('thirdType', Thrift.Type.STRING, 3);
    output.writeString(this.thirdType);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 4);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.accountNo !== null && this.accountNo !== undefined) {
    output.writeFieldBegin('accountNo', Thrift.Type.STRING, 5);
    output.writeString(this.accountNo);
    output.writeFieldEnd();
  }
  if (this.extInfo !== null && this.extInfo !== undefined) {
    output.writeFieldBegin('extInfo', Thrift.Type.STRING, 6);
    output.writeString(this.extInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Buyer = module.exports.Buyer = function(args) {
  this.userId = null;
  this.loginName = null;
  this.userName = null;
  this.pwdEnc = null;
  this.favImg = null;
  this.birthday = null;
  this.sex = null;
  this.idCard = null;
  this.mobile = null;
  this.tel = null;
  this.email = null;
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  this.provinceName = null;
  this.cityName = null;
  this.countyName = null;
  this.address = null;
  this.postCode = null;
  this.degree = null;
  this.salary = null;
  this.remark = null;
  this.serial = null;
  this.createTime = null;
  this.lastUpdateTime = null;
  this.state = null;
  this.clientType = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.pwdEnc !== undefined) {
      this.pwdEnc = args.pwdEnc;
    }
    if (args.favImg !== undefined) {
      this.favImg = args.favImg;
    }
    if (args.birthday !== undefined) {
      this.birthday = args.birthday;
    }
    if (args.sex !== undefined) {
      this.sex = args.sex;
    }
    if (args.idCard !== undefined) {
      this.idCard = args.idCard;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.provinceId !== undefined) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined) {
      this.countyId = args.countyId;
    }
    if (args.provinceName !== undefined) {
      this.provinceName = args.provinceName;
    }
    if (args.cityName !== undefined) {
      this.cityName = args.cityName;
    }
    if (args.countyName !== undefined) {
      this.countyName = args.countyName;
    }
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.postCode !== undefined) {
      this.postCode = args.postCode;
    }
    if (args.degree !== undefined) {
      this.degree = args.degree;
    }
    if (args.salary !== undefined) {
      this.salary = args.salary;
    }
    if (args.remark !== undefined) {
      this.remark = args.remark;
    }
    if (args.serial !== undefined) {
      this.serial = args.serial;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
  }
};
Buyer.prototype = {};
Buyer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pwdEnc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.favImg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.birthday = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.sex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.countyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.postCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.degree = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.salary = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.serial = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I32) {
        this.clientType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Buyer.prototype.write = function(output) {
  output.writeStructBegin('Buyer');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 2);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 3);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.pwdEnc !== null && this.pwdEnc !== undefined) {
    output.writeFieldBegin('pwdEnc', Thrift.Type.STRING, 4);
    output.writeString(this.pwdEnc);
    output.writeFieldEnd();
  }
  if (this.favImg !== null && this.favImg !== undefined) {
    output.writeFieldBegin('favImg', Thrift.Type.STRING, 5);
    output.writeString(this.favImg);
    output.writeFieldEnd();
  }
  if (this.birthday !== null && this.birthday !== undefined) {
    output.writeFieldBegin('birthday', Thrift.Type.STRING, 6);
    output.writeString(this.birthday);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.I32, 7);
    output.writeI32(this.sex);
    output.writeFieldEnd();
  }
  if (this.idCard !== null && this.idCard !== undefined) {
    output.writeFieldBegin('idCard', Thrift.Type.STRING, 8);
    output.writeString(this.idCard);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 9);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 10);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 12);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 13);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 14);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 15);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 16);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.countyName !== null && this.countyName !== undefined) {
    output.writeFieldBegin('countyName', Thrift.Type.STRING, 17);
    output.writeString(this.countyName);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 18);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.postCode !== null && this.postCode !== undefined) {
    output.writeFieldBegin('postCode', Thrift.Type.STRING, 19);
    output.writeString(this.postCode);
    output.writeFieldEnd();
  }
  if (this.degree !== null && this.degree !== undefined) {
    output.writeFieldBegin('degree', Thrift.Type.I32, 20);
    output.writeI32(this.degree);
    output.writeFieldEnd();
  }
  if (this.salary !== null && this.salary !== undefined) {
    output.writeFieldBegin('salary', Thrift.Type.I32, 21);
    output.writeI32(this.salary);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 22);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.I32, 23);
    output.writeI32(this.serial);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 24);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 25);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 26);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.I32, 27);
    output.writeI32(this.clientType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginLog = module.exports.LoginLog = function(args) {
  this.userId = null;
  this.tokenId = null;
  this.ip = null;
  this.browser = null;
  this.fromSource = null;
  this.loginAuto = null;
  this.loginTime = null;
  this.logoutTime = null;
  this.clientType = null;
  this.version = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.tokenId !== undefined) {
      this.tokenId = args.tokenId;
    }
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.browser !== undefined) {
      this.browser = args.browser;
    }
    if (args.fromSource !== undefined) {
      this.fromSource = args.fromSource;
    }
    if (args.loginAuto !== undefined) {
      this.loginAuto = args.loginAuto;
    }
    if (args.loginTime !== undefined) {
      this.loginTime = args.loginTime;
    }
    if (args.logoutTime !== undefined) {
      this.logoutTime = args.logoutTime;
    }
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
LoginLog.prototype = {};
LoginLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.browser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.loginAuto = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.loginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.logoutTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.clientType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginLog.prototype.write = function(output) {
  output.writeStructBegin('LoginLog');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.tokenId !== null && this.tokenId !== undefined) {
    output.writeFieldBegin('tokenId', Thrift.Type.STRING, 2);
    output.writeString(this.tokenId);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 3);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.browser !== null && this.browser !== undefined) {
    output.writeFieldBegin('browser', Thrift.Type.STRING, 4);
    output.writeString(this.browser);
    output.writeFieldEnd();
  }
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.I32, 5);
    output.writeI32(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.loginAuto !== null && this.loginAuto !== undefined) {
    output.writeFieldBegin('loginAuto', Thrift.Type.I32, 6);
    output.writeI32(this.loginAuto);
    output.writeFieldEnd();
  }
  if (this.loginTime !== null && this.loginTime !== undefined) {
    output.writeFieldBegin('loginTime', Thrift.Type.STRING, 7);
    output.writeString(this.loginTime);
    output.writeFieldEnd();
  }
  if (this.logoutTime !== null && this.logoutTime !== undefined) {
    output.writeFieldBegin('logoutTime', Thrift.Type.STRING, 8);
    output.writeString(this.logoutTime);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.I32, 9);
    output.writeI32(this.clientType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 10);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerResult = module.exports.BuyerResult = function(args) {
  this.result = null;
  this.buyer = null;
  this.loginLog = null;
  this.value = null;
  this.thirdUser = null;
  this.authInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.loginLog !== undefined) {
      this.loginLog = args.loginLog;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.thirdUser !== undefined) {
      this.thirdUser = args.thirdUser;
    }
    if (args.authInfo !== undefined) {
      this.authInfo = args.authInfo;
    }
  }
};
BuyerResult.prototype = {};
BuyerResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Buyer();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.thirdUser = new ttypes.ThirdpartyUser();
        this.thirdUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.authInfo = new ttypes.AuthInfo();
        this.authInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerResult.prototype.write = function(output) {
  output.writeStructBegin('BuyerResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 3);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 4);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  if (this.thirdUser !== null && this.thirdUser !== undefined) {
    output.writeFieldBegin('thirdUser', Thrift.Type.STRUCT, 5);
    this.thirdUser.write(output);
    output.writeFieldEnd();
  }
  if (this.authInfo !== null && this.authInfo !== undefined) {
    output.writeFieldBegin('authInfo', Thrift.Type.STRUCT, 6);
    this.authInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyerListResult = module.exports.BuyerListResult = function(args) {
  this.result = null;
  this.buyerList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.buyerList !== undefined) {
      this.buyerList = args.buyerList;
    }
  }
};
BuyerListResult.prototype = {};
BuyerListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.buyerList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Buyer();
          elem6.read(input);
          this.buyerList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyerListResult.prototype.write = function(output) {
  output.writeStructBegin('BuyerListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.buyerList !== null && this.buyerList !== undefined) {
    output.writeFieldBegin('buyerList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.buyerList.length);
    for (var iter7 in this.buyerList)
    {
      if (this.buyerList.hasOwnProperty(iter7))
      {
        iter7 = this.buyerList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ValidateInfo = module.exports.ValidateInfo = function(args) {
  this.thirdType = null;
  this.custId = null;
  this.accessToken = null;
  this.openId = null;
  this.valiNum = null;
  this.valiNumType = null;
  if (args) {
    if (args.thirdType !== undefined) {
      this.thirdType = args.thirdType;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.openId !== undefined) {
      this.openId = args.openId;
    }
    if (args.valiNum !== undefined) {
      this.valiNum = args.valiNum;
    }
    if (args.valiNumType !== undefined) {
      this.valiNumType = args.valiNumType;
    }
  }
};
ValidateInfo.prototype = {};
ValidateInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.thirdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.openId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.valiNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.valiNumType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidateInfo.prototype.write = function(output) {
  output.writeStructBegin('ValidateInfo');
  if (this.thirdType !== null && this.thirdType !== undefined) {
    output.writeFieldBegin('thirdType', Thrift.Type.I32, 1);
    output.writeI32(this.thirdType);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 2);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 3);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.openId !== null && this.openId !== undefined) {
    output.writeFieldBegin('openId', Thrift.Type.STRING, 4);
    output.writeString(this.openId);
    output.writeFieldEnd();
  }
  if (this.valiNum !== null && this.valiNum !== undefined) {
    output.writeFieldBegin('valiNum', Thrift.Type.STRING, 5);
    output.writeString(this.valiNum);
    output.writeFieldEnd();
  }
  if (this.valiNumType !== null && this.valiNumType !== undefined) {
    output.writeFieldBegin('valiNumType', Thrift.Type.STRING, 6);
    output.writeString(this.valiNumType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserInfoThird = module.exports.UserInfoThird = function(args) {
  this.custId = null;
  this.mobile = null;
  this.thirdType = null;
  this.extInfo = null;
  if (args) {
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.thirdType !== undefined) {
      this.thirdType = args.thirdType;
    }
    if (args.extInfo !== undefined) {
      this.extInfo = args.extInfo;
    }
  }
};
UserInfoThird.prototype = {};
UserInfoThird.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.thirdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.extInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfoThird.prototype.write = function(output) {
  output.writeStructBegin('UserInfoThird');
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 1);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.thirdType !== null && this.thirdType !== undefined) {
    output.writeFieldBegin('thirdType', Thrift.Type.I32, 3);
    output.writeI32(this.thirdType);
    output.writeFieldEnd();
  }
  if (this.extInfo !== null && this.extInfo !== undefined) {
    output.writeFieldBegin('extInfo', Thrift.Type.STRING, 4);
    output.writeString(this.extInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Profile4WeiXin = module.exports.Profile4WeiXin = function(args) {
  this.openid = null;
  this.nickname = null;
  this.sex = null;
  this.province = null;
  this.city = null;
  this.country = null;
  this.headimgurl = null;
  this.unionid = null;
  this.privilege = null;
  this.access_token = null;
  if (args) {
    if (args.openid !== undefined) {
      this.openid = args.openid;
    }
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.sex !== undefined) {
      this.sex = args.sex;
    }
    if (args.province !== undefined) {
      this.province = args.province;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.headimgurl !== undefined) {
      this.headimgurl = args.headimgurl;
    }
    if (args.unionid !== undefined) {
      this.unionid = args.unionid;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.access_token !== undefined) {
      this.access_token = args.access_token;
    }
  }
};
Profile4WeiXin.prototype = {};
Profile4WeiXin.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.openid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.headimgurl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.unionid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.privilege = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.access_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile4WeiXin.prototype.write = function(output) {
  output.writeStructBegin('Profile4WeiXin');
  if (this.openid !== null && this.openid !== undefined) {
    output.writeFieldBegin('openid', Thrift.Type.STRING, 1);
    output.writeString(this.openid);
    output.writeFieldEnd();
  }
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 2);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.STRING, 3);
    output.writeString(this.sex);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 4);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 6);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.headimgurl !== null && this.headimgurl !== undefined) {
    output.writeFieldBegin('headimgurl', Thrift.Type.STRING, 7);
    output.writeString(this.headimgurl);
    output.writeFieldEnd();
  }
  if (this.unionid !== null && this.unionid !== undefined) {
    output.writeFieldBegin('unionid', Thrift.Type.STRING, 8);
    output.writeString(this.unionid);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.STRING, 9);
    output.writeString(this.privilege);
    output.writeFieldEnd();
  }
  if (this.access_token !== null && this.access_token !== undefined) {
    output.writeFieldBegin('access_token', Thrift.Type.STRING, 10);
    output.writeString(this.access_token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Config4WeiXin = module.exports.Config4WeiXin = function(args) {
  this.url = null;
  this.jsapi_ticket = null;
  this.nonceStr = null;
  this.timestamp = null;
  this.signature = null;
  this.appId = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.jsapi_ticket !== undefined) {
      this.jsapi_ticket = args.jsapi_ticket;
    }
    if (args.nonceStr !== undefined) {
      this.nonceStr = args.nonceStr;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
    if (args.appId !== undefined) {
      this.appId = args.appId;
    }
  }
};
Config4WeiXin.prototype = {};
Config4WeiXin.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jsapi_ticket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nonceStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Config4WeiXin.prototype.write = function(output) {
  output.writeStructBegin('Config4WeiXin');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.jsapi_ticket !== null && this.jsapi_ticket !== undefined) {
    output.writeFieldBegin('jsapi_ticket', Thrift.Type.STRING, 2);
    output.writeString(this.jsapi_ticket);
    output.writeFieldEnd();
  }
  if (this.nonceStr !== null && this.nonceStr !== undefined) {
    output.writeFieldBegin('nonceStr', Thrift.Type.STRING, 3);
    output.writeString(this.nonceStr);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 5);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 6);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WXProfileResult = module.exports.WXProfileResult = function(args) {
  this.result = null;
  this.profile = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.profile !== undefined) {
      this.profile = args.profile;
    }
  }
};
WXProfileResult.prototype = {};
WXProfileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new ttypes.Profile4WeiXin();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WXProfileResult.prototype.write = function(output) {
  output.writeStructBegin('WXProfileResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 2);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WXConfigResult = module.exports.WXConfigResult = function(args) {
  this.result = null;
  this.config = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.config !== undefined) {
      this.config = args.config;
    }
  }
};
WXConfigResult.prototype = {};
WXConfigResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.Config4WeiXin();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WXConfigResult.prototype.write = function(output) {
  output.writeStructBegin('WXConfigResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
    this.config.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

H5ThirdLoginParam = module.exports.H5ThirdLoginParam = function(args) {
  this.requestXml = null;
  if (args) {
    if (args.requestXml !== undefined) {
      this.requestXml = args.requestXml;
    }
  }
};
H5ThirdLoginParam.prototype = {};
H5ThirdLoginParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestXml = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

H5ThirdLoginParam.prototype.write = function(output) {
  output.writeStructBegin('H5ThirdLoginParam');
  if (this.requestXml !== null && this.requestXml !== undefined) {
    output.writeFieldBegin('requestXml', Thrift.Type.STRING, 1);
    output.writeString(this.requestXml);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

H5ThirdLoginResult = module.exports.H5ThirdLoginResult = function(args) {
  this.result = null;
  this.userId = null;
  this.token = null;
  this.ppInfo = null;
  this.mobile = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ppInfo !== undefined) {
      this.ppInfo = args.ppInfo;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
  }
};
H5ThirdLoginResult.prototype = {};
H5ThirdLoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ppInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

H5ThirdLoginResult.prototype.write = function(output) {
  output.writeStructBegin('H5ThirdLoginResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ppInfo !== null && this.ppInfo !== undefined) {
    output.writeFieldBegin('ppInfo', Thrift.Type.STRING, 4);
    output.writeString(this.ppInfo);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 5);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PurchaseMobileResult = module.exports.PurchaseMobileResult = function(args) {
  this.result = null;
  this.value = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
PurchaseMobileResult.prototype = {};
PurchaseMobileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PurchaseMobileResult.prototype.write = function(output) {
  output.writeStructBegin('PurchaseMobileResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 2);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IsDisableUseParam = module.exports.IsDisableUseParam = function(args) {
  this.serial = null;
  this.userId = null;
  this.id = null;
  if (args) {
    if (args.serial !== undefined) {
      this.serial = args.serial;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
IsDisableUseParam.prototype = {};
IsDisableUseParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IsDisableUseParam.prototype.write = function(output) {
  output.writeStructBegin('IsDisableUseParam');
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.STRING, 1);
    output.writeString(this.serial);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmsLoginEnterAmountParam = module.exports.SmsLoginEnterAmountParam = function(args) {
  this.mobile = null;
  this.encryptyParam = null;
  this.captchaDesc = null;
  if (args) {
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.encryptyParam !== undefined) {
      this.encryptyParam = args.encryptyParam;
    }
    if (args.captchaDesc !== undefined) {
      this.captchaDesc = args.captchaDesc;
    }
  }
};
SmsLoginEnterAmountParam.prototype = {};
SmsLoginEnterAmountParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.encryptyParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.captchaDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmsLoginEnterAmountParam.prototype.write = function(output) {
  output.writeStructBegin('SmsLoginEnterAmountParam');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.encryptyParam !== null && this.encryptyParam !== undefined) {
    output.writeFieldBegin('encryptyParam', Thrift.Type.STRING, 2);
    output.writeString(this.encryptyParam);
    output.writeFieldEnd();
  }
  if (this.captchaDesc !== null && this.captchaDesc !== undefined) {
    output.writeFieldBegin('captchaDesc', Thrift.Type.STRING, 3);
    output.writeString(this.captchaDesc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmsLoginEnterAmountResult = module.exports.SmsLoginEnterAmountResult = function(args) {
  this.result = null;
  this.url = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
SmsLoginEnterAmountResult.prototype = {};
SmsLoginEnterAmountResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmsLoginEnterAmountResult.prototype.write = function(output) {
  output.writeStructBegin('SmsLoginEnterAmountResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FloretUserParam = module.exports.FloretUserParam = function(args) {
  this.idCard = null;
  this.mobile = null;
  this.userName = null;
  this.registerTime = null;
  this.creditTime = null;
  this.passTime = null;
  if (args) {
    if (args.idCard !== undefined) {
      this.idCard = args.idCard;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.registerTime !== undefined) {
      this.registerTime = args.registerTime;
    }
    if (args.creditTime !== undefined) {
      this.creditTime = args.creditTime;
    }
    if (args.passTime !== undefined) {
      this.passTime = args.passTime;
    }
  }
};
FloretUserParam.prototype = {};
FloretUserParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registerTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.creditTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.passTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FloretUserParam.prototype.write = function(output) {
  output.writeStructBegin('FloretUserParam');
  if (this.idCard !== null && this.idCard !== undefined) {
    output.writeFieldBegin('idCard', Thrift.Type.STRING, 1);
    output.writeString(this.idCard);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 3);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.registerTime !== null && this.registerTime !== undefined) {
    output.writeFieldBegin('registerTime', Thrift.Type.STRING, 4);
    output.writeString(this.registerTime);
    output.writeFieldEnd();
  }
  if (this.creditTime !== null && this.creditTime !== undefined) {
    output.writeFieldBegin('creditTime', Thrift.Type.STRING, 5);
    output.writeString(this.creditTime);
    output.writeFieldEnd();
  }
  if (this.passTime !== null && this.passTime !== undefined) {
    output.writeFieldBegin('passTime', Thrift.Type.STRING, 6);
    output.writeString(this.passTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OnlineUserParam = module.exports.OnlineUserParam = function(args) {
  this.userName = null;
  this.mobile = null;
  this.address = null;
  this.ticketCode = null;
  if (args) {
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.ticketCode !== undefined) {
      this.ticketCode = args.ticketCode;
    }
  }
};
OnlineUserParam.prototype = {};
OnlineUserParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ticketCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OnlineUserParam.prototype.write = function(output) {
  output.writeStructBegin('OnlineUserParam');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 3);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.ticketCode !== null && this.ticketCode !== undefined) {
    output.writeFieldBegin('ticketCode', Thrift.Type.STRING, 4);
    output.writeString(this.ticketCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FloretUser = module.exports.FloretUser = function(args) {
  this.serialNumber = null;
  this.orderId = null;
  this.userName = null;
  this.mobile = null;
  this.address = null;
  this.applyTime = null;
  this.ticketCode = null;
  if (args) {
    if (args.serialNumber !== undefined) {
      this.serialNumber = args.serialNumber;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.ticketCode !== undefined) {
      this.ticketCode = args.ticketCode;
    }
  }
};
FloretUser.prototype = {};
FloretUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.applyTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.ticketCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FloretUser.prototype.write = function(output) {
  output.writeStructBegin('FloretUser');
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 1);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 3);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 4);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 5);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 6);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.ticketCode !== null && this.ticketCode !== undefined) {
    output.writeFieldBegin('ticketCode', Thrift.Type.STRING, 7);
    output.writeString(this.ticketCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OnLineApplyResult = module.exports.OnLineApplyResult = function(args) {
  this.result = null;
  this.floretUsers = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.floretUsers !== undefined) {
      this.floretUsers = args.floretUsers;
    }
  }
};
OnLineApplyResult.prototype = {};
OnLineApplyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.floretUsers = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.FloretUser();
          elem14.read(input);
          this.floretUsers.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OnLineApplyResult.prototype.write = function(output) {
  output.writeStructBegin('OnLineApplyResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.floretUsers !== null && this.floretUsers !== undefined) {
    output.writeFieldBegin('floretUsers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.floretUsers.length);
    for (var iter15 in this.floretUsers)
    {
      if (this.floretUsers.hasOwnProperty(iter15))
      {
        iter15 = this.floretUsers[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchCriteriaForXiaoHua = module.exports.SearchCriteriaForXiaoHua = function(args) {
  this.registerTimeStart = null;
  this.registerTimeEnd = null;
  this.passTimeStart = null;
  this.passTimeEnd = null;
  this.useTimeStart = null;
  this.useTimeEnd = null;
  this.ticketValid = null;
  this.isOnline = null;
  this.serialNumber = null;
  this.mobile = null;
  this.userName = null;
  this.sellerId = null;
  if (args) {
    if (args.registerTimeStart !== undefined) {
      this.registerTimeStart = args.registerTimeStart;
    }
    if (args.registerTimeEnd !== undefined) {
      this.registerTimeEnd = args.registerTimeEnd;
    }
    if (args.passTimeStart !== undefined) {
      this.passTimeStart = args.passTimeStart;
    }
    if (args.passTimeEnd !== undefined) {
      this.passTimeEnd = args.passTimeEnd;
    }
    if (args.useTimeStart !== undefined) {
      this.useTimeStart = args.useTimeStart;
    }
    if (args.useTimeEnd !== undefined) {
      this.useTimeEnd = args.useTimeEnd;
    }
    if (args.ticketValid !== undefined) {
      this.ticketValid = args.ticketValid;
    }
    if (args.isOnline !== undefined) {
      this.isOnline = args.isOnline;
    }
    if (args.serialNumber !== undefined) {
      this.serialNumber = args.serialNumber;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
  }
};
SearchCriteriaForXiaoHua.prototype = {};
SearchCriteriaForXiaoHua.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.registerTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registerTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.passTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.passTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.useTimeStart = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.useTimeEnd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.ticketValid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.isOnline = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchCriteriaForXiaoHua.prototype.write = function(output) {
  output.writeStructBegin('SearchCriteriaForXiaoHua');
  if (this.registerTimeStart !== null && this.registerTimeStart !== undefined) {
    output.writeFieldBegin('registerTimeStart', Thrift.Type.STRING, 1);
    output.writeString(this.registerTimeStart);
    output.writeFieldEnd();
  }
  if (this.registerTimeEnd !== null && this.registerTimeEnd !== undefined) {
    output.writeFieldBegin('registerTimeEnd', Thrift.Type.STRING, 2);
    output.writeString(this.registerTimeEnd);
    output.writeFieldEnd();
  }
  if (this.passTimeStart !== null && this.passTimeStart !== undefined) {
    output.writeFieldBegin('passTimeStart', Thrift.Type.STRING, 3);
    output.writeString(this.passTimeStart);
    output.writeFieldEnd();
  }
  if (this.passTimeEnd !== null && this.passTimeEnd !== undefined) {
    output.writeFieldBegin('passTimeEnd', Thrift.Type.STRING, 4);
    output.writeString(this.passTimeEnd);
    output.writeFieldEnd();
  }
  if (this.useTimeStart !== null && this.useTimeStart !== undefined) {
    output.writeFieldBegin('useTimeStart', Thrift.Type.STRING, 5);
    output.writeString(this.useTimeStart);
    output.writeFieldEnd();
  }
  if (this.useTimeEnd !== null && this.useTimeEnd !== undefined) {
    output.writeFieldBegin('useTimeEnd', Thrift.Type.STRING, 6);
    output.writeString(this.useTimeEnd);
    output.writeFieldEnd();
  }
  if (this.ticketValid !== null && this.ticketValid !== undefined) {
    output.writeFieldBegin('ticketValid', Thrift.Type.I32, 7);
    output.writeI32(this.ticketValid);
    output.writeFieldEnd();
  }
  if (this.isOnline !== null && this.isOnline !== undefined) {
    output.writeFieldBegin('isOnline', Thrift.Type.I32, 8);
    output.writeI32(this.isOnline);
    output.writeFieldEnd();
  }
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 9);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 10);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 11);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 12);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminFloretUserPara = module.exports.AdminFloretUserPara = function(args) {
  this.id = null;
  this.idCard = null;
  this.mobile = null;
  this.userName = null;
  this.registerTime = null;
  this.creditTime = null;
  this.passTime = null;
  this.jfxAccount = null;
  this.ticketCode = null;
  this.ticketValid = null;
  this.isOnline = null;
  this.sellerId = null;
  this.usetTime = null;
  this.sztCard = null;
  this.receiptTime = null;
  this.scoreNum = null;
  this.scoreReceive = null;
  this.serialNumber = null;
  this.receiveName = null;
  this.receiveMobile = null;
  this.receiveAddress = null;
  this.expressName = null;
  this.expressCode = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.idCard !== undefined) {
      this.idCard = args.idCard;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.registerTime !== undefined) {
      this.registerTime = args.registerTime;
    }
    if (args.creditTime !== undefined) {
      this.creditTime = args.creditTime;
    }
    if (args.passTime !== undefined) {
      this.passTime = args.passTime;
    }
    if (args.jfxAccount !== undefined) {
      this.jfxAccount = args.jfxAccount;
    }
    if (args.ticketCode !== undefined) {
      this.ticketCode = args.ticketCode;
    }
    if (args.ticketValid !== undefined) {
      this.ticketValid = args.ticketValid;
    }
    if (args.isOnline !== undefined) {
      this.isOnline = args.isOnline;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
    if (args.usetTime !== undefined) {
      this.usetTime = args.usetTime;
    }
    if (args.sztCard !== undefined) {
      this.sztCard = args.sztCard;
    }
    if (args.receiptTime !== undefined) {
      this.receiptTime = args.receiptTime;
    }
    if (args.scoreNum !== undefined) {
      this.scoreNum = args.scoreNum;
    }
    if (args.scoreReceive !== undefined) {
      this.scoreReceive = args.scoreReceive;
    }
    if (args.serialNumber !== undefined) {
      this.serialNumber = args.serialNumber;
    }
    if (args.receiveName !== undefined) {
      this.receiveName = args.receiveName;
    }
    if (args.receiveMobile !== undefined) {
      this.receiveMobile = args.receiveMobile;
    }
    if (args.receiveAddress !== undefined) {
      this.receiveAddress = args.receiveAddress;
    }
    if (args.expressName !== undefined) {
      this.expressName = args.expressName;
    }
    if (args.expressCode !== undefined) {
      this.expressCode = args.expressCode;
    }
  }
};
AdminFloretUserPara.prototype = {};
AdminFloretUserPara.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registerTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.creditTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.passTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.jfxAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.ticketCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.ticketValid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.isOnline = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.usetTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.sztCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.receiptTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.scoreNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.scoreReceive = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.receiveName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.receiveMobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.receiveAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.expressName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.expressCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminFloretUserPara.prototype.write = function(output) {
  output.writeStructBegin('AdminFloretUserPara');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.idCard !== null && this.idCard !== undefined) {
    output.writeFieldBegin('idCard', Thrift.Type.STRING, 2);
    output.writeString(this.idCard);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 3);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 4);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.registerTime !== null && this.registerTime !== undefined) {
    output.writeFieldBegin('registerTime', Thrift.Type.STRING, 5);
    output.writeString(this.registerTime);
    output.writeFieldEnd();
  }
  if (this.creditTime !== null && this.creditTime !== undefined) {
    output.writeFieldBegin('creditTime', Thrift.Type.STRING, 6);
    output.writeString(this.creditTime);
    output.writeFieldEnd();
  }
  if (this.passTime !== null && this.passTime !== undefined) {
    output.writeFieldBegin('passTime', Thrift.Type.STRING, 7);
    output.writeString(this.passTime);
    output.writeFieldEnd();
  }
  if (this.jfxAccount !== null && this.jfxAccount !== undefined) {
    output.writeFieldBegin('jfxAccount', Thrift.Type.STRING, 8);
    output.writeString(this.jfxAccount);
    output.writeFieldEnd();
  }
  if (this.ticketCode !== null && this.ticketCode !== undefined) {
    output.writeFieldBegin('ticketCode', Thrift.Type.STRING, 9);
    output.writeString(this.ticketCode);
    output.writeFieldEnd();
  }
  if (this.ticketValid !== null && this.ticketValid !== undefined) {
    output.writeFieldBegin('ticketValid', Thrift.Type.I32, 10);
    output.writeI32(this.ticketValid);
    output.writeFieldEnd();
  }
  if (this.isOnline !== null && this.isOnline !== undefined) {
    output.writeFieldBegin('isOnline', Thrift.Type.I32, 11);
    output.writeI32(this.isOnline);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 12);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.usetTime !== null && this.usetTime !== undefined) {
    output.writeFieldBegin('usetTime', Thrift.Type.STRING, 13);
    output.writeString(this.usetTime);
    output.writeFieldEnd();
  }
  if (this.sztCard !== null && this.sztCard !== undefined) {
    output.writeFieldBegin('sztCard', Thrift.Type.STRING, 14);
    output.writeString(this.sztCard);
    output.writeFieldEnd();
  }
  if (this.receiptTime !== null && this.receiptTime !== undefined) {
    output.writeFieldBegin('receiptTime', Thrift.Type.STRING, 15);
    output.writeString(this.receiptTime);
    output.writeFieldEnd();
  }
  if (this.scoreNum !== null && this.scoreNum !== undefined) {
    output.writeFieldBegin('scoreNum', Thrift.Type.STRING, 16);
    output.writeString(this.scoreNum);
    output.writeFieldEnd();
  }
  if (this.scoreReceive !== null && this.scoreReceive !== undefined) {
    output.writeFieldBegin('scoreReceive', Thrift.Type.I32, 17);
    output.writeI32(this.scoreReceive);
    output.writeFieldEnd();
  }
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 18);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  if (this.receiveName !== null && this.receiveName !== undefined) {
    output.writeFieldBegin('receiveName', Thrift.Type.STRING, 19);
    output.writeString(this.receiveName);
    output.writeFieldEnd();
  }
  if (this.receiveMobile !== null && this.receiveMobile !== undefined) {
    output.writeFieldBegin('receiveMobile', Thrift.Type.STRING, 20);
    output.writeString(this.receiveMobile);
    output.writeFieldEnd();
  }
  if (this.receiveAddress !== null && this.receiveAddress !== undefined) {
    output.writeFieldBegin('receiveAddress', Thrift.Type.STRING, 21);
    output.writeString(this.receiveAddress);
    output.writeFieldEnd();
  }
  if (this.expressName !== null && this.expressName !== undefined) {
    output.writeFieldBegin('expressName', Thrift.Type.STRING, 22);
    output.writeString(this.expressName);
    output.writeFieldEnd();
  }
  if (this.expressCode !== null && this.expressCode !== undefined) {
    output.writeFieldBegin('expressCode', Thrift.Type.STRING, 23);
    output.writeString(this.expressCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminFloretUserParaResult = module.exports.AdminFloretUserParaResult = function(args) {
  this.result = null;
  this.adminFloretUserPara = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.adminFloretUserPara !== undefined) {
      this.adminFloretUserPara = args.adminFloretUserPara;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
AdminFloretUserParaResult.prototype = {};
AdminFloretUserParaResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.adminFloretUserPara = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.AdminFloretUserPara();
          elem22.read(input);
          this.adminFloretUserPara.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminFloretUserParaResult.prototype.write = function(output) {
  output.writeStructBegin('AdminFloretUserParaResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.adminFloretUserPara !== null && this.adminFloretUserPara !== undefined) {
    output.writeFieldBegin('adminFloretUserPara', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.adminFloretUserPara.length);
    for (var iter23 in this.adminFloretUserPara)
    {
      if (this.adminFloretUserPara.hasOwnProperty(iter23))
      {
        iter23 = this.adminFloretUserPara[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VerifyRecord = module.exports.VerifyRecord = function(args) {
  this.serialNumber = null;
  this.mobile = null;
  this.useTime = null;
  this.sztCard = null;
  if (args) {
    if (args.serialNumber !== undefined) {
      this.serialNumber = args.serialNumber;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.useTime !== undefined) {
      this.useTime = args.useTime;
    }
    if (args.sztCard !== undefined) {
      this.sztCard = args.sztCard;
    }
  }
};
VerifyRecord.prototype = {};
VerifyRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.useTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sztCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerifyRecord.prototype.write = function(output) {
  output.writeStructBegin('VerifyRecord');
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 1);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.useTime !== null && this.useTime !== undefined) {
    output.writeFieldBegin('useTime', Thrift.Type.STRING, 3);
    output.writeString(this.useTime);
    output.writeFieldEnd();
  }
  if (this.sztCard !== null && this.sztCard !== undefined) {
    output.writeFieldBegin('sztCard', Thrift.Type.STRING, 4);
    output.writeString(this.sztCard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VerifyRecordResult = module.exports.VerifyRecordResult = function(args) {
  this.result = null;
  this.verifyRecordList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.verifyRecordList !== undefined) {
      this.verifyRecordList = args.verifyRecordList;
    }
  }
};
VerifyRecordResult.prototype = {};
VerifyRecordResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.verifyRecordList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.VerifyRecord();
          elem30.read(input);
          this.verifyRecordList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerifyRecordResult.prototype.write = function(output) {
  output.writeStructBegin('VerifyRecordResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.verifyRecordList !== null && this.verifyRecordList !== undefined) {
    output.writeFieldBegin('verifyRecordList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.verifyRecordList.length);
    for (var iter31 in this.verifyRecordList)
    {
      if (this.verifyRecordList.hasOwnProperty(iter31))
      {
        iter31 = this.verifyRecordList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

