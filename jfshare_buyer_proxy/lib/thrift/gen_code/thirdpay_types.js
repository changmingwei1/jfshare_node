//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
ThirdPayApplyResult = module.exports.ThirdPayApplyResult = function(args) {
  this.result = null;
  this.action = null;
  this.encryptyParam = null;
  this.ErrCode = null;
  this.ErrMsg = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.encryptyParam !== undefined) {
      this.encryptyParam = args.encryptyParam;
    }
    if (args.ErrCode !== undefined) {
      this.ErrCode = args.ErrCode;
    }
    if (args.ErrMsg !== undefined) {
      this.ErrMsg = args.ErrMsg;
    }
  }
};
ThirdPayApplyResult.prototype = {};
ThirdPayApplyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.action = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encryptyParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ErrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ErrMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayApplyResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayApplyResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.STRING, 2);
    output.writeString(this.action);
    output.writeFieldEnd();
  }
  if (this.encryptyParam !== null && this.encryptyParam !== undefined) {
    output.writeFieldBegin('encryptyParam', Thrift.Type.STRING, 3);
    output.writeString(this.encryptyParam);
    output.writeFieldEnd();
  }
  if (this.ErrCode !== null && this.ErrCode !== undefined) {
    output.writeFieldBegin('ErrCode', Thrift.Type.STRING, 4);
    output.writeString(this.ErrCode);
    output.writeFieldEnd();
  }
  if (this.ErrMsg !== null && this.ErrMsg !== undefined) {
    output.writeFieldBegin('ErrMsg', Thrift.Type.STRING, 5);
    output.writeString(this.ErrMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPayLoginResult = module.exports.ThirdPayLoginResult = function(args) {
  this.result = null;
  this.userId = null;
  this.token = null;
  this.ppInfo = null;
  this.mobile = null;
  this.orderPrice = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ppInfo !== undefined) {
      this.ppInfo = args.ppInfo;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.orderPrice !== undefined) {
      this.orderPrice = args.orderPrice;
    }
  }
};
ThirdPayLoginResult.prototype = {};
ThirdPayLoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ppInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.orderPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayLoginResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayLoginResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ppInfo !== null && this.ppInfo !== undefined) {
    output.writeFieldBegin('ppInfo', Thrift.Type.STRING, 4);
    output.writeString(this.ppInfo);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 5);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.orderPrice !== null && this.orderPrice !== undefined) {
    output.writeFieldBegin('orderPrice', Thrift.Type.STRING, 6);
    output.writeString(this.orderPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPayLoginParam = module.exports.ThirdPayLoginParam = function(args) {
  this.encryptyParam = null;
  this.clientType = null;
  this.mobile = null;
  this.browser = null;
  if (args) {
    if (args.encryptyParam !== undefined) {
      this.encryptyParam = args.encryptyParam;
    }
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.browser !== undefined) {
      this.browser = args.browser;
    }
  }
};
ThirdPayLoginParam.prototype = {};
ThirdPayLoginParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encryptyParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.browser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayLoginParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayLoginParam');
  if (this.encryptyParam !== null && this.encryptyParam !== undefined) {
    output.writeFieldBegin('encryptyParam', Thrift.Type.STRING, 1);
    output.writeString(this.encryptyParam);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.STRING, 2);
    output.writeString(this.clientType);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 3);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.browser !== null && this.browser !== undefined) {
    output.writeFieldBegin('browser', Thrift.Type.STRING, 4);
    output.writeString(this.browser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPayParam = module.exports.ThirdPayParam = function(args) {
  this.encryptyParam = null;
  this.score = null;
  this.mobile = null;
  this.userId = null;
  if (args) {
    if (args.encryptyParam !== undefined) {
      this.encryptyParam = args.encryptyParam;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ThirdPayParam.prototype = {};
ThirdPayParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encryptyParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.score = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayParam');
  if (this.encryptyParam !== null && this.encryptyParam !== undefined) {
    output.writeFieldBegin('encryptyParam', Thrift.Type.STRING, 1);
    output.writeString(this.encryptyParam);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRING, 2);
    output.writeString(this.score);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 3);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPayResult = module.exports.ThirdPayResult = function(args) {
  this.result = null;
  this.score = null;
  this.orderId = null;
  this.urlFront = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.urlFront !== undefined) {
      this.urlFront = args.urlFront;
    }
  }
};
ThirdPayResult.prototype = {};
ThirdPayResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.urlFront = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 2);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.urlFront !== null && this.urlFront !== undefined) {
    output.writeFieldBegin('urlFront', Thrift.Type.STRING, 4);
    output.writeString(this.urlFront);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPayRefundResult = module.exports.ThirdPayRefundResult = function(args) {
  this.result = null;
  this.refundScore = null;
  this.orderId = null;
  this.ErrCode = null;
  this.ErrMsg = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.refundScore !== undefined) {
      this.refundScore = args.refundScore;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.ErrCode !== undefined) {
      this.ErrCode = args.ErrCode;
    }
    if (args.ErrMsg !== undefined) {
      this.ErrMsg = args.ErrMsg;
    }
  }
};
ThirdPayRefundResult.prototype = {};
ThirdPayRefundResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.refundScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ErrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ErrMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayRefundResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayRefundResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.refundScore !== null && this.refundScore !== undefined) {
    output.writeFieldBegin('refundScore', Thrift.Type.STRING, 2);
    output.writeString(this.refundScore);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.ErrCode !== null && this.ErrCode !== undefined) {
    output.writeFieldBegin('ErrCode', Thrift.Type.STRING, 4);
    output.writeString(this.ErrCode);
    output.writeFieldEnd();
  }
  if (this.ErrMsg !== null && this.ErrMsg !== undefined) {
    output.writeFieldBegin('ErrMsg', Thrift.Type.STRING, 5);
    output.writeString(this.ErrMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryThirdPayApplyLogParam = module.exports.QueryThirdPayApplyLogParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  this.timeType = null;
  this.status = null;
  this.orderId = null;
  this.thirdPayId = null;
  this.payAccount = null;
  this.sellerId = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.timeType !== undefined) {
      this.timeType = args.timeType;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.thirdPayId !== undefined) {
      this.thirdPayId = args.thirdPayId;
    }
    if (args.payAccount !== undefined) {
      this.payAccount = args.payAccount;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
  }
};
QueryThirdPayApplyLogParam.prototype = {};
QueryThirdPayApplyLogParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPayId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.payAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThirdPayApplyLogParam.prototype.write = function(output) {
  output.writeStructBegin('QueryThirdPayApplyLogParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.timeType !== null && this.timeType !== undefined) {
    output.writeFieldBegin('timeType', Thrift.Type.STRING, 3);
    output.writeString(this.timeType);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 4);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 5);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.thirdPayId !== null && this.thirdPayId !== undefined) {
    output.writeFieldBegin('thirdPayId', Thrift.Type.STRING, 6);
    output.writeString(this.thirdPayId);
    output.writeFieldEnd();
  }
  if (this.payAccount !== null && this.payAccount !== undefined) {
    output.writeFieldBegin('payAccount', Thrift.Type.STRING, 7);
    output.writeString(this.payAccount);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 8);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPayApplyLog = module.exports.ThirdPayApplyLog = function(args) {
  this.id = null;
  this.appCode = null;
  this.spid = null;
  this.seller_id = null;
  this.requestNo = null;
  this.order_id = null;
  this.payContent = null;
  this.provinceNo = null;
  this.deviceNo = null;
  this.deviceType = null;
  this.orderPrice = null;
  this.requestTime = null;
  this.accessChannel = null;
  this.urlFront = null;
  this.urlBack = null;
  this.payScore = null;
  this.payAccount = null;
  this.user_id = null;
  this.payTime = null;
  this.refundTime = null;
  this.status = null;
  this.thirdPay_id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.appCode !== undefined) {
      this.appCode = args.appCode;
    }
    if (args.spid !== undefined) {
      this.spid = args.spid;
    }
    if (args.seller_id !== undefined) {
      this.seller_id = args.seller_id;
    }
    if (args.requestNo !== undefined) {
      this.requestNo = args.requestNo;
    }
    if (args.order_id !== undefined) {
      this.order_id = args.order_id;
    }
    if (args.payContent !== undefined) {
      this.payContent = args.payContent;
    }
    if (args.provinceNo !== undefined) {
      this.provinceNo = args.provinceNo;
    }
    if (args.deviceNo !== undefined) {
      this.deviceNo = args.deviceNo;
    }
    if (args.deviceType !== undefined) {
      this.deviceType = args.deviceType;
    }
    if (args.orderPrice !== undefined) {
      this.orderPrice = args.orderPrice;
    }
    if (args.requestTime !== undefined) {
      this.requestTime = args.requestTime;
    }
    if (args.accessChannel !== undefined) {
      this.accessChannel = args.accessChannel;
    }
    if (args.urlFront !== undefined) {
      this.urlFront = args.urlFront;
    }
    if (args.urlBack !== undefined) {
      this.urlBack = args.urlBack;
    }
    if (args.payScore !== undefined) {
      this.payScore = args.payScore;
    }
    if (args.payAccount !== undefined) {
      this.payAccount = args.payAccount;
    }
    if (args.user_id !== undefined) {
      this.user_id = args.user_id;
    }
    if (args.payTime !== undefined) {
      this.payTime = args.payTime;
    }
    if (args.refundTime !== undefined) {
      this.refundTime = args.refundTime;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.thirdPay_id !== undefined) {
      this.thirdPay_id = args.thirdPay_id;
    }
  }
};
ThirdPayApplyLog.prototype = {};
ThirdPayApplyLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.spid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.seller_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.requestNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.order_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.payContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.provinceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.deviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.deviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.orderPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.requestTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.accessChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.urlFront = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.urlBack = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.payScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.payAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.user_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.payTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.refundTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPay_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPayApplyLog.prototype.write = function(output) {
  output.writeStructBegin('ThirdPayApplyLog');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.appCode !== null && this.appCode !== undefined) {
    output.writeFieldBegin('appCode', Thrift.Type.STRING, 2);
    output.writeString(this.appCode);
    output.writeFieldEnd();
  }
  if (this.spid !== null && this.spid !== undefined) {
    output.writeFieldBegin('spid', Thrift.Type.STRING, 3);
    output.writeString(this.spid);
    output.writeFieldEnd();
  }
  if (this.seller_id !== null && this.seller_id !== undefined) {
    output.writeFieldBegin('seller_id', Thrift.Type.STRING, 4);
    output.writeString(this.seller_id);
    output.writeFieldEnd();
  }
  if (this.requestNo !== null && this.requestNo !== undefined) {
    output.writeFieldBegin('requestNo', Thrift.Type.STRING, 5);
    output.writeString(this.requestNo);
    output.writeFieldEnd();
  }
  if (this.order_id !== null && this.order_id !== undefined) {
    output.writeFieldBegin('order_id', Thrift.Type.STRING, 6);
    output.writeString(this.order_id);
    output.writeFieldEnd();
  }
  if (this.payContent !== null && this.payContent !== undefined) {
    output.writeFieldBegin('payContent', Thrift.Type.STRING, 7);
    output.writeString(this.payContent);
    output.writeFieldEnd();
  }
  if (this.provinceNo !== null && this.provinceNo !== undefined) {
    output.writeFieldBegin('provinceNo', Thrift.Type.STRING, 8);
    output.writeString(this.provinceNo);
    output.writeFieldEnd();
  }
  if (this.deviceNo !== null && this.deviceNo !== undefined) {
    output.writeFieldBegin('deviceNo', Thrift.Type.STRING, 9);
    output.writeString(this.deviceNo);
    output.writeFieldEnd();
  }
  if (this.deviceType !== null && this.deviceType !== undefined) {
    output.writeFieldBegin('deviceType', Thrift.Type.STRING, 10);
    output.writeString(this.deviceType);
    output.writeFieldEnd();
  }
  if (this.orderPrice !== null && this.orderPrice !== undefined) {
    output.writeFieldBegin('orderPrice', Thrift.Type.STRING, 11);
    output.writeString(this.orderPrice);
    output.writeFieldEnd();
  }
  if (this.requestTime !== null && this.requestTime !== undefined) {
    output.writeFieldBegin('requestTime', Thrift.Type.STRING, 12);
    output.writeString(this.requestTime);
    output.writeFieldEnd();
  }
  if (this.accessChannel !== null && this.accessChannel !== undefined) {
    output.writeFieldBegin('accessChannel', Thrift.Type.STRING, 13);
    output.writeString(this.accessChannel);
    output.writeFieldEnd();
  }
  if (this.urlFront !== null && this.urlFront !== undefined) {
    output.writeFieldBegin('urlFront', Thrift.Type.STRING, 14);
    output.writeString(this.urlFront);
    output.writeFieldEnd();
  }
  if (this.urlBack !== null && this.urlBack !== undefined) {
    output.writeFieldBegin('urlBack', Thrift.Type.STRING, 15);
    output.writeString(this.urlBack);
    output.writeFieldEnd();
  }
  if (this.payScore !== null && this.payScore !== undefined) {
    output.writeFieldBegin('payScore', Thrift.Type.STRING, 16);
    output.writeString(this.payScore);
    output.writeFieldEnd();
  }
  if (this.payAccount !== null && this.payAccount !== undefined) {
    output.writeFieldBegin('payAccount', Thrift.Type.STRING, 17);
    output.writeString(this.payAccount);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.STRING, 18);
    output.writeString(this.user_id);
    output.writeFieldEnd();
  }
  if (this.payTime !== null && this.payTime !== undefined) {
    output.writeFieldBegin('payTime', Thrift.Type.STRING, 19);
    output.writeString(this.payTime);
    output.writeFieldEnd();
  }
  if (this.refundTime !== null && this.refundTime !== undefined) {
    output.writeFieldBegin('refundTime', Thrift.Type.STRING, 20);
    output.writeString(this.refundTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 21);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.thirdPay_id !== null && this.thirdPay_id !== undefined) {
    output.writeFieldBegin('thirdPay_id', Thrift.Type.STRING, 22);
    output.writeString(this.thirdPay_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryThirdPayApplyLogResult = module.exports.QueryThirdPayApplyLogResult = function(args) {
  this.result = null;
  this.LogList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.LogList !== undefined) {
      this.LogList = args.LogList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
QueryThirdPayApplyLogResult.prototype = {};
QueryThirdPayApplyLogResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.LogList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ThirdPayApplyLog();
          elem6.read(input);
          this.LogList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThirdPayApplyLogResult.prototype.write = function(output) {
  output.writeStructBegin('QueryThirdPayApplyLogResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.LogList !== null && this.LogList !== undefined) {
    output.writeFieldBegin('LogList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.LogList.length);
    for (var iter7 in this.LogList)
    {
      if (this.LogList.hasOwnProperty(iter7))
      {
        iter7 = this.LogList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotParam = module.exports.ExprotParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  this.timeType = null;
  this.status = null;
  this.orderId = null;
  this.thirdPayId = null;
  this.payAccount = null;
  this.sellerId = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.timeType !== undefined) {
      this.timeType = args.timeType;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.thirdPayId !== undefined) {
      this.thirdPayId = args.thirdPayId;
    }
    if (args.payAccount !== undefined) {
      this.payAccount = args.payAccount;
    }
    if (args.sellerId !== undefined) {
      this.sellerId = args.sellerId;
    }
  }
};
ExprotParam.prototype = {};
ExprotParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.thirdPayId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.payAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.timeType !== null && this.timeType !== undefined) {
    output.writeFieldBegin('timeType', Thrift.Type.STRING, 3);
    output.writeString(this.timeType);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 4);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 5);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.thirdPayId !== null && this.thirdPayId !== undefined) {
    output.writeFieldBegin('thirdPayId', Thrift.Type.STRING, 6);
    output.writeString(this.thirdPayId);
    output.writeFieldEnd();
  }
  if (this.payAccount !== null && this.payAccount !== undefined) {
    output.writeFieldBegin('payAccount', Thrift.Type.STRING, 7);
    output.writeString(this.payAccount);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 8);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotResult = module.exports.ExprotResult = function(args) {
  this.path = null;
  this.result = null;
  if (args) {
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
ExprotResult.prototype = {};
ExprotResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotResult.prototype.write = function(output) {
  output.writeStructBegin('ExprotResult');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerRefundParam = module.exports.ManagerRefundParam = function(args) {
  this.orderId = null;
  this.pwd = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.pwd !== undefined) {
      this.pwd = args.pwd;
    }
  }
};
ManagerRefundParam.prototype = {};
ManagerRefundParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerRefundParam.prototype.write = function(output) {
  output.writeStructBegin('ManagerRefundParam');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 2);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManagerRefundResult = module.exports.ManagerRefundResult = function(args) {
  this.result = null;
  this.refundScore = null;
  this.orderId = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.refundScore !== undefined) {
      this.refundScore = args.refundScore;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
ManagerRefundResult.prototype = {};
ManagerRefundResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.refundScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerRefundResult.prototype.write = function(output) {
  output.writeStructBegin('ManagerRefundResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.refundScore !== null && this.refundScore !== undefined) {
    output.writeFieldBegin('refundScore', Thrift.Type.STRING, 2);
    output.writeString(this.refundScore);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 3);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetPayOrderInfoResult = module.exports.GetPayOrderInfoResult = function(args) {
  this.result = null;
  this.appcode = null;
  this.spid = null;
  this.requestNo = null;
  this.payScore = null;
  this.status = null;
  this.responseTime = null;
  this.MsgCode = null;
  this.MsgContent = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.appcode !== undefined) {
      this.appcode = args.appcode;
    }
    if (args.spid !== undefined) {
      this.spid = args.spid;
    }
    if (args.requestNo !== undefined) {
      this.requestNo = args.requestNo;
    }
    if (args.payScore !== undefined) {
      this.payScore = args.payScore;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.responseTime !== undefined) {
      this.responseTime = args.responseTime;
    }
    if (args.MsgCode !== undefined) {
      this.MsgCode = args.MsgCode;
    }
    if (args.MsgContent !== undefined) {
      this.MsgContent = args.MsgContent;
    }
  }
};
GetPayOrderInfoResult.prototype = {};
GetPayOrderInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appcode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.spid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.requestNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.payScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.responseTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.MsgCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.MsgContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPayOrderInfoResult.prototype.write = function(output) {
  output.writeStructBegin('GetPayOrderInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.appcode !== null && this.appcode !== undefined) {
    output.writeFieldBegin('appcode', Thrift.Type.STRING, 2);
    output.writeString(this.appcode);
    output.writeFieldEnd();
  }
  if (this.spid !== null && this.spid !== undefined) {
    output.writeFieldBegin('spid', Thrift.Type.STRING, 3);
    output.writeString(this.spid);
    output.writeFieldEnd();
  }
  if (this.requestNo !== null && this.requestNo !== undefined) {
    output.writeFieldBegin('requestNo', Thrift.Type.STRING, 4);
    output.writeString(this.requestNo);
    output.writeFieldEnd();
  }
  if (this.payScore !== null && this.payScore !== undefined) {
    output.writeFieldBegin('payScore', Thrift.Type.STRING, 5);
    output.writeString(this.payScore);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 6);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.responseTime !== null && this.responseTime !== undefined) {
    output.writeFieldBegin('responseTime', Thrift.Type.STRING, 7);
    output.writeString(this.responseTime);
    output.writeFieldEnd();
  }
  if (this.MsgCode !== null && this.MsgCode !== undefined) {
    output.writeFieldBegin('MsgCode', Thrift.Type.STRING, 8);
    output.writeString(this.MsgCode);
    output.writeFieldEnd();
  }
  if (this.MsgContent !== null && this.MsgContent !== undefined) {
    output.writeFieldBegin('MsgContent', Thrift.Type.STRING, 9);
    output.writeString(this.MsgContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

