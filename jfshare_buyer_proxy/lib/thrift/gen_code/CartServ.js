//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var seller_ttypes = require('./seller_types')
var product_ttypes = require('./product_types')


var ttypes = require('./cart_types');
//HELPER FUNCTIONS AND STRUCTURES

CartServ_countItem_args = function(args) {
  this.userKey = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_countItem_args.prototype = {};
CartServ_countItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_countItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_countItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 2);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_countItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_countItem_result.prototype = {};
CartServ_countItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_countItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_countItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_addItem_args = function(args) {
  this.userKey = null;
  this.item = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.item !== undefined) {
      this.item = args.item;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_addItem_args.prototype = {};
CartServ_addItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.Item();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_addItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_addItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 2);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 3);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_addItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_addItem_result.prototype = {};
CartServ_addItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CheckCartResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_addItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_addItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_updateItem_args = function(args) {
  this.userKey = null;
  this.cartKeyList = null;
  this.cartKey = null;
  this.item = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.cartKeyList !== undefined) {
      this.cartKeyList = args.cartKeyList;
    }
    if (args.cartKey !== undefined) {
      this.cartKey = args.cartKey;
    }
    if (args.item !== undefined) {
      this.item = args.item;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_updateItem_args.prototype = {};
CartServ_updateItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.cartKeyList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.CartKey();
          elem46.read(input);
          this.cartKeyList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cartKey = new ttypes.CartKey();
        this.cartKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.Item();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_updateItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_updateItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.cartKeyList !== null && this.cartKeyList !== undefined) {
    output.writeFieldBegin('cartKeyList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cartKeyList.length);
    for (var iter47 in this.cartKeyList)
    {
      if (this.cartKeyList.hasOwnProperty(iter47))
      {
        iter47 = this.cartKeyList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cartKey !== null && this.cartKey !== undefined) {
    output.writeFieldBegin('cartKey', Thrift.Type.STRUCT, 3);
    this.cartKey.write(output);
    output.writeFieldEnd();
  }
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 4);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 5);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_updateItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_updateItem_result.prototype = {};
CartServ_updateItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CheckCartResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_updateItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_updateItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_deleteItem_args = function(args) {
  this.userKey = null;
  this.cartKeyList = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.cartKeyList !== undefined) {
      this.cartKeyList = args.cartKeyList;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_deleteItem_args.prototype = {};
CartServ_deleteItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.cartKeyList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.CartKey();
          elem54.read(input);
          this.cartKeyList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_deleteItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_deleteItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.cartKeyList !== null && this.cartKeyList !== undefined) {
    output.writeFieldBegin('cartKeyList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cartKeyList.length);
    for (var iter55 in this.cartKeyList)
    {
      if (this.cartKeyList.hasOwnProperty(iter55))
      {
        iter55 = this.cartKeyList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 3);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_deleteItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_deleteItem_result.prototype = {};
CartServ_deleteItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_deleteItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_deleteItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_mergeItem_args = function(args) {
  this.sessionId = null;
  this.userId = null;
  this.source = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_mergeItem_args.prototype = {};
CartServ_mergeItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_mergeItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_mergeItem_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 3);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_mergeItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_mergeItem_result.prototype = {};
CartServ_mergeItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_mergeItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_mergeItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_listItem_args = function(args) {
  this.userKey = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_listItem_args.prototype = {};
CartServ_listItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_listItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_listItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 3);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_listItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_listItem_result.prototype = {};
CartServ_listItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CartResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_listItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_listItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_listMiniItem_args = function(args) {
  this.userKey = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_listMiniItem_args.prototype = {};
CartServ_listMiniItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_listMiniItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_listMiniItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 2);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_listMiniItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_listMiniItem_result.prototype = {};
CartServ_listMiniItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MiniCartResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_listMiniItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_listMiniItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_findListByCartKey_args = function(args) {
  this.userKey = null;
  this.cartKeyList = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.cartKeyList !== undefined) {
      this.cartKeyList = args.cartKeyList;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_findListByCartKey_args.prototype = {};
CartServ_findListByCartKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.cartKeyList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.CartKey();
          elem62.read(input);
          this.cartKeyList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_findListByCartKey_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_findListByCartKey_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.cartKeyList !== null && this.cartKeyList !== undefined) {
    output.writeFieldBegin('cartKeyList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cartKeyList.length);
    for (var iter63 in this.cartKeyList)
    {
      if (this.cartKeyList.hasOwnProperty(iter63))
      {
        iter63 = this.cartKeyList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 3);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_findListByCartKey_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_findListByCartKey_result.prototype = {};
CartServ_findListByCartKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CartResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_findListByCartKey_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_findListByCartKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_checkItem_args = function(args) {
  this.userKey = null;
  this.cartKeyList = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.cartKeyList !== undefined) {
      this.cartKeyList = args.cartKeyList;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_checkItem_args.prototype = {};
CartServ_checkItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.cartKeyList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.CartKey();
          elem70.read(input);
          this.cartKeyList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_checkItem_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_checkItem_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.cartKeyList !== null && this.cartKeyList !== undefined) {
    output.writeFieldBegin('cartKeyList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cartKeyList.length);
    for (var iter71 in this.cartKeyList)
    {
      if (this.cartKeyList.hasOwnProperty(iter71))
      {
        iter71 = this.cartKeyList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 3);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_checkItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_checkItem_result.prototype = {};
CartServ_checkItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CheckCartResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_checkItem_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_checkItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_getTimeStamp_args = function(args) {
  this.userKey = null;
  this.source = null;
  if (args) {
    if (args.userKey !== undefined) {
      this.userKey = args.userKey;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
CartServ_getTimeStamp_args.prototype = {};
CartServ_getTimeStamp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_getTimeStamp_args.prototype.write = function(output) {
  output.writeStructBegin('CartServ_getTimeStamp_args');
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 1);
    output.writeString(this.userKey);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 2);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServ_getTimeStamp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CartServ_getTimeStamp_result.prototype = {};
CartServ_getTimeStamp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartServ_getTimeStamp_result.prototype.write = function(output) {
  output.writeStructBegin('CartServ_getTimeStamp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CartServClient.prototype = {};
CartServClient.prototype.seqid = function() { return this._seqid; }
CartServClient.prototype.new_seqid = function() { return this._seqid += 1; }
CartServClient.prototype.countItem = function(userKey, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countItem(userKey, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countItem(userKey, source);
  }
};

CartServClient.prototype.send_countItem = function(userKey, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_countItem_args();
  args.userKey = userKey;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_countItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_countItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countItem failed: unknown result');
};
CartServClient.prototype.addItem = function(userKey, item, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addItem(userKey, item, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addItem(userKey, item, source);
  }
};

CartServClient.prototype.send_addItem = function(userKey, item, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_addItem_args();
  args.userKey = userKey;
  args.item = item;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_addItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_addItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addItem failed: unknown result');
};
CartServClient.prototype.updateItem = function(userKey, cartKeyList, cartKey, item, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateItem(userKey, cartKeyList, cartKey, item, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateItem(userKey, cartKeyList, cartKey, item, source);
  }
};

CartServClient.prototype.send_updateItem = function(userKey, cartKeyList, cartKey, item, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_updateItem_args();
  args.userKey = userKey;
  args.cartKeyList = cartKeyList;
  args.cartKey = cartKey;
  args.item = item;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_updateItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_updateItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateItem failed: unknown result');
};
CartServClient.prototype.deleteItem = function(userKey, cartKeyList, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteItem(userKey, cartKeyList, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteItem(userKey, cartKeyList, source);
  }
};

CartServClient.prototype.send_deleteItem = function(userKey, cartKeyList, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_deleteItem_args();
  args.userKey = userKey;
  args.cartKeyList = cartKeyList;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_deleteItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_deleteItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteItem failed: unknown result');
};
CartServClient.prototype.mergeItem = function(sessionId, userId, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mergeItem(sessionId, userId, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mergeItem(sessionId, userId, source);
  }
};

CartServClient.prototype.send_mergeItem = function(sessionId, userId, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mergeItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_mergeItem_args();
  args.sessionId = sessionId;
  args.userId = userId;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_mergeItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_mergeItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('mergeItem failed: unknown result');
};
CartServClient.prototype.listItem = function(userKey, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listItem(userKey, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listItem(userKey, source);
  }
};

CartServClient.prototype.send_listItem = function(userKey, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_listItem_args();
  args.userKey = userKey;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_listItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_listItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listItem failed: unknown result');
};
CartServClient.prototype.listMiniItem = function(userKey, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listMiniItem(userKey, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listMiniItem(userKey, source);
  }
};

CartServClient.prototype.send_listMiniItem = function(userKey, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listMiniItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_listMiniItem_args();
  args.userKey = userKey;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_listMiniItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_listMiniItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listMiniItem failed: unknown result');
};
CartServClient.prototype.findListByCartKey = function(userKey, cartKeyList, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findListByCartKey(userKey, cartKeyList, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findListByCartKey(userKey, cartKeyList, source);
  }
};

CartServClient.prototype.send_findListByCartKey = function(userKey, cartKeyList, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findListByCartKey', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_findListByCartKey_args();
  args.userKey = userKey;
  args.cartKeyList = cartKeyList;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_findListByCartKey = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_findListByCartKey_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findListByCartKey failed: unknown result');
};
CartServClient.prototype.checkItem = function(userKey, cartKeyList, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkItem(userKey, cartKeyList, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkItem(userKey, cartKeyList, source);
  }
};

CartServClient.prototype.send_checkItem = function(userKey, cartKeyList, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkItem', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_checkItem_args();
  args.userKey = userKey;
  args.cartKeyList = cartKeyList;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_checkItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_checkItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkItem failed: unknown result');
};
CartServClient.prototype.getTimeStamp = function(userKey, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTimeStamp(userKey, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTimeStamp(userKey, source);
  }
};

CartServClient.prototype.send_getTimeStamp = function(userKey, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTimeStamp', Thrift.MessageType.CALL, this.seqid());
  var args = new CartServ_getTimeStamp_args();
  args.userKey = userKey;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CartServClient.prototype.recv_getTimeStamp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CartServ_getTimeStamp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTimeStamp failed: unknown result');
};
CartServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
CartServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

CartServProcessor.prototype.process_countItem = function(seqid, input, output) {
  var args = new CartServ_countItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countItem.length === 2) {
    Q.fcall(this._handler.countItem, args.userKey, args.source)
      .then(function(result) {
        var result = new CartServ_countItem_result({success: result});
        output.writeMessageBegin("countItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_countItem_result(err);
        output.writeMessageBegin("countItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countItem(args.userKey, args.source,  function (err, result) {
      var result = new CartServ_countItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("countItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_addItem = function(seqid, input, output) {
  var args = new CartServ_addItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addItem.length === 3) {
    Q.fcall(this._handler.addItem, args.userKey, args.item, args.source)
      .then(function(result) {
        var result = new CartServ_addItem_result({success: result});
        output.writeMessageBegin("addItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_addItem_result(err);
        output.writeMessageBegin("addItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addItem(args.userKey, args.item, args.source,  function (err, result) {
      var result = new CartServ_addItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_updateItem = function(seqid, input, output) {
  var args = new CartServ_updateItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateItem.length === 5) {
    Q.fcall(this._handler.updateItem, args.userKey, args.cartKeyList, args.cartKey, args.item, args.source)
      .then(function(result) {
        var result = new CartServ_updateItem_result({success: result});
        output.writeMessageBegin("updateItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_updateItem_result(err);
        output.writeMessageBegin("updateItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateItem(args.userKey, args.cartKeyList, args.cartKey, args.item, args.source,  function (err, result) {
      var result = new CartServ_updateItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_deleteItem = function(seqid, input, output) {
  var args = new CartServ_deleteItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteItem.length === 3) {
    Q.fcall(this._handler.deleteItem, args.userKey, args.cartKeyList, args.source)
      .then(function(result) {
        var result = new CartServ_deleteItem_result({success: result});
        output.writeMessageBegin("deleteItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_deleteItem_result(err);
        output.writeMessageBegin("deleteItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteItem(args.userKey, args.cartKeyList, args.source,  function (err, result) {
      var result = new CartServ_deleteItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_mergeItem = function(seqid, input, output) {
  var args = new CartServ_mergeItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mergeItem.length === 3) {
    Q.fcall(this._handler.mergeItem, args.sessionId, args.userId, args.source)
      .then(function(result) {
        var result = new CartServ_mergeItem_result({success: result});
        output.writeMessageBegin("mergeItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_mergeItem_result(err);
        output.writeMessageBegin("mergeItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mergeItem(args.sessionId, args.userId, args.source,  function (err, result) {
      var result = new CartServ_mergeItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("mergeItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_listItem = function(seqid, input, output) {
  var args = new CartServ_listItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listItem.length === 2) {
    Q.fcall(this._handler.listItem, args.userKey, args.source)
      .then(function(result) {
        var result = new CartServ_listItem_result({success: result});
        output.writeMessageBegin("listItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_listItem_result(err);
        output.writeMessageBegin("listItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listItem(args.userKey, args.source,  function (err, result) {
      var result = new CartServ_listItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_listMiniItem = function(seqid, input, output) {
  var args = new CartServ_listMiniItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listMiniItem.length === 2) {
    Q.fcall(this._handler.listMiniItem, args.userKey, args.source)
      .then(function(result) {
        var result = new CartServ_listMiniItem_result({success: result});
        output.writeMessageBegin("listMiniItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_listMiniItem_result(err);
        output.writeMessageBegin("listMiniItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listMiniItem(args.userKey, args.source,  function (err, result) {
      var result = new CartServ_listMiniItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listMiniItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_findListByCartKey = function(seqid, input, output) {
  var args = new CartServ_findListByCartKey_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findListByCartKey.length === 3) {
    Q.fcall(this._handler.findListByCartKey, args.userKey, args.cartKeyList, args.source)
      .then(function(result) {
        var result = new CartServ_findListByCartKey_result({success: result});
        output.writeMessageBegin("findListByCartKey", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_findListByCartKey_result(err);
        output.writeMessageBegin("findListByCartKey", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findListByCartKey(args.userKey, args.cartKeyList, args.source,  function (err, result) {
      var result = new CartServ_findListByCartKey_result((err != null ? err : {success: result}));
      output.writeMessageBegin("findListByCartKey", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_checkItem = function(seqid, input, output) {
  var args = new CartServ_checkItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkItem.length === 3) {
    Q.fcall(this._handler.checkItem, args.userKey, args.cartKeyList, args.source)
      .then(function(result) {
        var result = new CartServ_checkItem_result({success: result});
        output.writeMessageBegin("checkItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_checkItem_result(err);
        output.writeMessageBegin("checkItem", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkItem(args.userKey, args.cartKeyList, args.source,  function (err, result) {
      var result = new CartServ_checkItem_result((err != null ? err : {success: result}));
      output.writeMessageBegin("checkItem", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CartServProcessor.prototype.process_getTimeStamp = function(seqid, input, output) {
  var args = new CartServ_getTimeStamp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTimeStamp.length === 2) {
    Q.fcall(this._handler.getTimeStamp, args.userKey, args.source)
      .then(function(result) {
        var result = new CartServ_getTimeStamp_result({success: result});
        output.writeMessageBegin("getTimeStamp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CartServ_getTimeStamp_result(err);
        output.writeMessageBegin("getTimeStamp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTimeStamp(args.userKey, args.source,  function (err, result) {
      var result = new CartServ_getTimeStamp_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTimeStamp", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

