//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
Score = module.exports.Score = function(args) {
  this.userId = null;
  this.amount = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
  }
};
Score.prototype = {};
Score.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Score.prototype.write = function(output) {
  output.writeStructBegin('Score');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 2);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTrade = module.exports.ScoreTrade = function(args) {
  this.tradeId = null;
  this.userId = null;
  this.tradeTime = null;
  this.inOrOut = null;
  this.type = null;
  this.amount = null;
  this.trader = null;
  if (args) {
    if (args.tradeId !== undefined) {
      this.tradeId = args.tradeId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.tradeTime !== undefined) {
      this.tradeTime = args.tradeTime;
    }
    if (args.inOrOut !== undefined) {
      this.inOrOut = args.inOrOut;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.trader !== undefined) {
      this.trader = args.trader;
    }
  }
};
ScoreTrade.prototype = {};
ScoreTrade.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tradeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tradeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inOrOut = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.trader = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTrade.prototype.write = function(output) {
  output.writeStructBegin('ScoreTrade');
  if (this.tradeId !== null && this.tradeId !== undefined) {
    output.writeFieldBegin('tradeId', Thrift.Type.STRING, 1);
    output.writeString(this.tradeId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.tradeTime !== null && this.tradeTime !== undefined) {
    output.writeFieldBegin('tradeTime', Thrift.Type.STRING, 3);
    output.writeString(this.tradeTime);
    output.writeFieldEnd();
  }
  if (this.inOrOut !== null && this.inOrOut !== undefined) {
    output.writeFieldBegin('inOrOut', Thrift.Type.I32, 4);
    output.writeI32(this.inOrOut);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 6);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  if (this.trader !== null && this.trader !== undefined) {
    output.writeFieldBegin('trader', Thrift.Type.I32, 7);
    output.writeI32(this.trader);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTradeQueryParam = module.exports.ScoreTradeQueryParam = function(args) {
  this.userId = null;
  this.startTime = null;
  this.endTime = null;
  this.inOrOut = null;
  this.type = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.inOrOut !== undefined) {
      this.inOrOut = args.inOrOut;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ScoreTradeQueryParam.prototype = {};
ScoreTradeQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inOrOut = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTradeQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ScoreTradeQueryParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 2);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 3);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.inOrOut !== null && this.inOrOut !== undefined) {
    output.writeFieldBegin('inOrOut', Thrift.Type.I32, 4);
    output.writeI32(this.inOrOut);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTradeQueryParamFor = module.exports.ScoreTradeQueryParamFor = function(args) {
  this.userId = null;
  this.startTime = null;
  this.endTime = null;
  this.inOrOut = null;
  this.type = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.inOrOut !== undefined) {
      this.inOrOut = args.inOrOut;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ScoreTradeQueryParamFor.prototype = {};
ScoreTradeQueryParamFor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inOrOut = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.type = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.type.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTradeQueryParamFor.prototype.write = function(output) {
  output.writeStructBegin('ScoreTradeQueryParamFor');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 2);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 3);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.inOrOut !== null && this.inOrOut !== undefined) {
    output.writeFieldBegin('inOrOut', Thrift.Type.I32, 4);
    output.writeI32(this.inOrOut);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.type.length);
    for (var iter7 in this.type)
    {
      if (this.type.hasOwnProperty(iter7))
      {
        iter7 = this.type[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreResult = module.exports.ScoreResult = function(args) {
  this.result = null;
  this.sroce = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.sroce !== undefined) {
      this.sroce = args.sroce;
    }
  }
};
ScoreResult.prototype = {};
ScoreResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sroce = new ttypes.Score();
        this.sroce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.sroce !== null && this.sroce !== undefined) {
    output.writeFieldBegin('sroce', Thrift.Type.STRUCT, 2);
    this.sroce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTradeResult = module.exports.ScoreTradeResult = function(args) {
  this.result = null;
  this.scoreTrades = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.scoreTrades !== undefined) {
      this.scoreTrades = args.scoreTrades;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreTradeResult.prototype = {};
ScoreTradeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.scoreTrades = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ScoreTrade();
          elem14.read(input);
          this.scoreTrades.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTradeResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreTradeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.scoreTrades !== null && this.scoreTrades !== undefined) {
    output.writeFieldBegin('scoreTrades', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.scoreTrades.length);
    for (var iter15 in this.scoreTrades)
    {
      if (this.scoreTrades.hasOwnProperty(iter15))
      {
        iter15 = this.scoreTrades[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreUser = module.exports.ScoreUser = function(args) {
  this.userId = null;
  this.mobile = null;
  this.createTime = null;
  this.amount = null;
  this.state = null;
  this.serial = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.serial !== undefined) {
      this.serial = args.serial;
    }
  }
};
ScoreUser.prototype = {};
ScoreUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.serial = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreUser.prototype.write = function(output) {
  output.writeStructBegin('ScoreUser');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 3);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 4);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.I32, 6);
    output.writeI32(this.serial);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreUserQueryParam = module.exports.ScoreUserQueryParam = function(args) {
  this.userId = null;
  this.mobile = null;
  this.startTime = null;
  this.endTime = null;
  this.amount = null;
  this.state = null;
  this.serial = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.serial !== undefined) {
      this.serial = args.serial;
    }
  }
};
ScoreUserQueryParam.prototype = {};
ScoreUserQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.serial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreUserQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ScoreUserQueryParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 3);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 4);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 5);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 6);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.STRING, 7);
    output.writeString(this.serial);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreUserResult = module.exports.ScoreUserResult = function(args) {
  this.result = null;
  this.scoreUsers = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.scoreUsers !== undefined) {
      this.scoreUsers = args.scoreUsers;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreUserResult.prototype = {};
ScoreUserResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.scoreUsers = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ScoreUser();
          elem22.read(input);
          this.scoreUsers.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreUserResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreUserResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.scoreUsers !== null && this.scoreUsers !== undefined) {
    output.writeFieldBegin('scoreUsers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.scoreUsers.length);
    for (var iter23 in this.scoreUsers)
    {
      if (this.scoreUsers.hasOwnProperty(iter23))
      {
        iter23 = this.scoreUsers[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CachAmount = module.exports.CachAmount = function(args) {
  this.totalAmount = null;
  this.CachAmount = null;
  if (args) {
    if (args.totalAmount !== undefined) {
      this.totalAmount = args.totalAmount;
    }
    if (args.CachAmount !== undefined) {
      this.CachAmount = args.CachAmount;
    }
  }
};
CachAmount.prototype = {};
CachAmount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalAmount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.CachAmount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CachAmount.prototype.write = function(output) {
  output.writeStructBegin('CachAmount');
  if (this.totalAmount !== null && this.totalAmount !== undefined) {
    output.writeFieldBegin('totalAmount', Thrift.Type.I32, 1);
    output.writeI32(this.totalAmount);
    output.writeFieldEnd();
  }
  if (this.CachAmount !== null && this.CachAmount !== undefined) {
    output.writeFieldBegin('CachAmount', Thrift.Type.I32, 2);
    output.writeI32(this.CachAmount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CachAmountQueryParam = module.exports.CachAmountQueryParam = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
CachAmountQueryParam.prototype = {};
CachAmountQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CachAmountQueryParam.prototype.write = function(output) {
  output.writeStructBegin('CachAmountQueryParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CachAmountResult = module.exports.CachAmountResult = function(args) {
  this.result = null;
  this.cachAmount = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.cachAmount !== undefined) {
      this.cachAmount = args.cachAmount;
    }
  }
};
CachAmountResult.prototype = {};
CachAmountResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cachAmount = new ttypes.CachAmount();
        this.cachAmount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CachAmountResult.prototype.write = function(output) {
  output.writeStructBegin('CachAmountResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cachAmount !== null && this.cachAmount !== undefined) {
    output.writeFieldBegin('cachAmount', Thrift.Type.STRUCT, 2);
    this.cachAmount.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReponseCach = module.exports.ReponseCach = function(args) {
  this.AppCode = null;
  this.ResponseDate = null;
  this.Sign = null;
  this.ErrCode = null;
  this.ErrMsg = null;
  if (args) {
    if (args.AppCode !== undefined) {
      this.AppCode = args.AppCode;
    }
    if (args.ResponseDate !== undefined) {
      this.ResponseDate = args.ResponseDate;
    }
    if (args.Sign !== undefined) {
      this.Sign = args.Sign;
    }
    if (args.ErrCode !== undefined) {
      this.ErrCode = args.ErrCode;
    }
    if (args.ErrMsg !== undefined) {
      this.ErrMsg = args.ErrMsg;
    }
  }
};
ReponseCach.prototype = {};
ReponseCach.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.AppCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ResponseDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ErrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ErrMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReponseCach.prototype.write = function(output) {
  output.writeStructBegin('ReponseCach');
  if (this.AppCode !== null && this.AppCode !== undefined) {
    output.writeFieldBegin('AppCode', Thrift.Type.STRING, 1);
    output.writeString(this.AppCode);
    output.writeFieldEnd();
  }
  if (this.ResponseDate !== null && this.ResponseDate !== undefined) {
    output.writeFieldBegin('ResponseDate', Thrift.Type.STRING, 2);
    output.writeString(this.ResponseDate);
    output.writeFieldEnd();
  }
  if (this.Sign !== null && this.Sign !== undefined) {
    output.writeFieldBegin('Sign', Thrift.Type.STRING, 3);
    output.writeString(this.Sign);
    output.writeFieldEnd();
  }
  if (this.ErrCode !== null && this.ErrCode !== undefined) {
    output.writeFieldBegin('ErrCode', Thrift.Type.STRING, 4);
    output.writeString(this.ErrCode);
    output.writeFieldEnd();
  }
  if (this.ErrMsg !== null && this.ErrMsg !== undefined) {
    output.writeFieldBegin('ErrMsg', Thrift.Type.STRING, 5);
    output.writeString(this.ErrMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CachAmountCallParam = module.exports.CachAmountCallParam = function(args) {
  this.userId = null;
  this.CachAmount = null;
  this.mobile = null;
  this.custId = null;
  this.provicneId = null;
  this.cityId = null;
  this.starLevel = null;
  this.deviceType = null;
  this.requestTime = null;
  this.sign = null;
  this.deviceNo = null;
  this.isFirst = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.CachAmount !== undefined) {
      this.CachAmount = args.CachAmount;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.provicneId !== undefined) {
      this.provicneId = args.provicneId;
    }
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
    if (args.starLevel !== undefined) {
      this.starLevel = args.starLevel;
    }
    if (args.deviceType !== undefined) {
      this.deviceType = args.deviceType;
    }
    if (args.requestTime !== undefined) {
      this.requestTime = args.requestTime;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
    if (args.deviceNo !== undefined) {
      this.deviceNo = args.deviceNo;
    }
    if (args.isFirst !== undefined) {
      this.isFirst = args.isFirst;
    }
  }
};
CachAmountCallParam.prototype = {};
CachAmountCallParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.CachAmount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.provicneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.starLevel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.deviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.requestTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.deviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.isFirst = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CachAmountCallParam.prototype.write = function(output) {
  output.writeStructBegin('CachAmountCallParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.CachAmount !== null && this.CachAmount !== undefined) {
    output.writeFieldBegin('CachAmount', Thrift.Type.I32, 2);
    output.writeI32(this.CachAmount);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 3);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 4);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.provicneId !== null && this.provicneId !== undefined) {
    output.writeFieldBegin('provicneId', Thrift.Type.STRING, 5);
    output.writeString(this.provicneId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.STRING, 6);
    output.writeString(this.cityId);
    output.writeFieldEnd();
  }
  if (this.starLevel !== null && this.starLevel !== undefined) {
    output.writeFieldBegin('starLevel', Thrift.Type.STRING, 7);
    output.writeString(this.starLevel);
    output.writeFieldEnd();
  }
  if (this.deviceType !== null && this.deviceType !== undefined) {
    output.writeFieldBegin('deviceType', Thrift.Type.STRING, 8);
    output.writeString(this.deviceType);
    output.writeFieldEnd();
  }
  if (this.requestTime !== null && this.requestTime !== undefined) {
    output.writeFieldBegin('requestTime', Thrift.Type.STRING, 9);
    output.writeString(this.requestTime);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 10);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  if (this.deviceNo !== null && this.deviceNo !== undefined) {
    output.writeFieldBegin('deviceNo', Thrift.Type.STRING, 11);
    output.writeString(this.deviceNo);
    output.writeFieldEnd();
  }
  if (this.isFirst !== null && this.isFirst !== undefined) {
    output.writeFieldBegin('isFirst', Thrift.Type.STRING, 12);
    output.writeString(this.isFirst);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResponseCachResult = module.exports.ResponseCachResult = function(args) {
  this.result = null;
  this.reponseCach = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.reponseCach !== undefined) {
      this.reponseCach = args.reponseCach;
    }
  }
};
ResponseCachResult.prototype = {};
ResponseCachResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reponseCach = new ttypes.ReponseCach();
        this.reponseCach.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResponseCachResult.prototype.write = function(output) {
  output.writeStructBegin('ResponseCachResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.reponseCach !== null && this.reponseCach !== undefined) {
    output.writeFieldBegin('reponseCach', Thrift.Type.STRUCT, 2);
    this.reponseCach.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResponseScore = module.exports.ResponseScore = function(args) {
  this.AppCode = null;
  this.ResponseDate = null;
  this.Sign = null;
  this.ErrCode = null;
  this.ErrMsg = null;
  if (args) {
    if (args.AppCode !== undefined) {
      this.AppCode = args.AppCode;
    }
    if (args.ResponseDate !== undefined) {
      this.ResponseDate = args.ResponseDate;
    }
    if (args.Sign !== undefined) {
      this.Sign = args.Sign;
    }
    if (args.ErrCode !== undefined) {
      this.ErrCode = args.ErrCode;
    }
    if (args.ErrMsg !== undefined) {
      this.ErrMsg = args.ErrMsg;
    }
  }
};
ResponseScore.prototype = {};
ResponseScore.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.AppCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ResponseDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ErrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ErrMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResponseScore.prototype.write = function(output) {
  output.writeStructBegin('ResponseScore');
  if (this.AppCode !== null && this.AppCode !== undefined) {
    output.writeFieldBegin('AppCode', Thrift.Type.STRING, 1);
    output.writeString(this.AppCode);
    output.writeFieldEnd();
  }
  if (this.ResponseDate !== null && this.ResponseDate !== undefined) {
    output.writeFieldBegin('ResponseDate', Thrift.Type.STRING, 2);
    output.writeString(this.ResponseDate);
    output.writeFieldEnd();
  }
  if (this.Sign !== null && this.Sign !== undefined) {
    output.writeFieldBegin('Sign', Thrift.Type.STRING, 3);
    output.writeString(this.Sign);
    output.writeFieldEnd();
  }
  if (this.ErrCode !== null && this.ErrCode !== undefined) {
    output.writeFieldBegin('ErrCode', Thrift.Type.STRING, 4);
    output.writeString(this.ErrCode);
    output.writeFieldEnd();
  }
  if (this.ErrMsg !== null && this.ErrMsg !== undefined) {
    output.writeFieldBegin('ErrMsg', Thrift.Type.STRING, 5);
    output.writeString(this.ErrMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreRequestParam = module.exports.ScoreRequestParam = function(args) {
  this.AppCode = null;
  this.RequestDate = null;
  this.Sign = null;
  this.SpID = null;
  this.OutOrderID = null;
  this.DeviceNo = null;
  this.DeviceType = null;
  this.ProvinceID = null;
  this.CustID = null;
  this.Num = null;
  this.Remark = null;
  this.ActiveID = null;
  this.ExpTime = null;
  if (args) {
    if (args.AppCode !== undefined) {
      this.AppCode = args.AppCode;
    }
    if (args.RequestDate !== undefined) {
      this.RequestDate = args.RequestDate;
    }
    if (args.Sign !== undefined) {
      this.Sign = args.Sign;
    }
    if (args.SpID !== undefined) {
      this.SpID = args.SpID;
    }
    if (args.OutOrderID !== undefined) {
      this.OutOrderID = args.OutOrderID;
    }
    if (args.DeviceNo !== undefined) {
      this.DeviceNo = args.DeviceNo;
    }
    if (args.DeviceType !== undefined) {
      this.DeviceType = args.DeviceType;
    }
    if (args.ProvinceID !== undefined) {
      this.ProvinceID = args.ProvinceID;
    }
    if (args.CustID !== undefined) {
      this.CustID = args.CustID;
    }
    if (args.Num !== undefined) {
      this.Num = args.Num;
    }
    if (args.Remark !== undefined) {
      this.Remark = args.Remark;
    }
    if (args.ActiveID !== undefined) {
      this.ActiveID = args.ActiveID;
    }
    if (args.ExpTime !== undefined) {
      this.ExpTime = args.ExpTime;
    }
  }
};
ScoreRequestParam.prototype = {};
ScoreRequestParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.AppCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.RequestDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.SpID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.OutOrderID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.ProvinceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.CustID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.Num = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.Remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.ActiveID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.ExpTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreRequestParam.prototype.write = function(output) {
  output.writeStructBegin('ScoreRequestParam');
  if (this.AppCode !== null && this.AppCode !== undefined) {
    output.writeFieldBegin('AppCode', Thrift.Type.STRING, 1);
    output.writeString(this.AppCode);
    output.writeFieldEnd();
  }
  if (this.RequestDate !== null && this.RequestDate !== undefined) {
    output.writeFieldBegin('RequestDate', Thrift.Type.STRING, 2);
    output.writeString(this.RequestDate);
    output.writeFieldEnd();
  }
  if (this.Sign !== null && this.Sign !== undefined) {
    output.writeFieldBegin('Sign', Thrift.Type.STRING, 3);
    output.writeString(this.Sign);
    output.writeFieldEnd();
  }
  if (this.SpID !== null && this.SpID !== undefined) {
    output.writeFieldBegin('SpID', Thrift.Type.STRING, 4);
    output.writeString(this.SpID);
    output.writeFieldEnd();
  }
  if (this.OutOrderID !== null && this.OutOrderID !== undefined) {
    output.writeFieldBegin('OutOrderID', Thrift.Type.STRING, 5);
    output.writeString(this.OutOrderID);
    output.writeFieldEnd();
  }
  if (this.DeviceNo !== null && this.DeviceNo !== undefined) {
    output.writeFieldBegin('DeviceNo', Thrift.Type.STRING, 6);
    output.writeString(this.DeviceNo);
    output.writeFieldEnd();
  }
  if (this.DeviceType !== null && this.DeviceType !== undefined) {
    output.writeFieldBegin('DeviceType', Thrift.Type.STRING, 7);
    output.writeString(this.DeviceType);
    output.writeFieldEnd();
  }
  if (this.ProvinceID !== null && this.ProvinceID !== undefined) {
    output.writeFieldBegin('ProvinceID', Thrift.Type.STRING, 8);
    output.writeString(this.ProvinceID);
    output.writeFieldEnd();
  }
  if (this.CustID !== null && this.CustID !== undefined) {
    output.writeFieldBegin('CustID', Thrift.Type.STRING, 9);
    output.writeString(this.CustID);
    output.writeFieldEnd();
  }
  if (this.Num !== null && this.Num !== undefined) {
    output.writeFieldBegin('Num', Thrift.Type.STRING, 10);
    output.writeString(this.Num);
    output.writeFieldEnd();
  }
  if (this.Remark !== null && this.Remark !== undefined) {
    output.writeFieldBegin('Remark', Thrift.Type.STRING, 11);
    output.writeString(this.Remark);
    output.writeFieldEnd();
  }
  if (this.ActiveID !== null && this.ActiveID !== undefined) {
    output.writeFieldBegin('ActiveID', Thrift.Type.STRING, 12);
    output.writeString(this.ActiveID);
    output.writeFieldEnd();
  }
  if (this.ExpTime !== null && this.ExpTime !== undefined) {
    output.writeFieldBegin('ExpTime', Thrift.Type.STRING, 13);
    output.writeString(this.ExpTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResponseScoreResult = module.exports.ResponseScoreResult = function(args) {
  this.result = null;
  this.responseScore = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.responseScore !== undefined) {
      this.responseScore = args.responseScore;
    }
  }
};
ResponseScoreResult.prototype = {};
ResponseScoreResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.responseScore = new ttypes.ResponseScore();
        this.responseScore.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResponseScoreResult.prototype.write = function(output) {
  output.writeStructBegin('ResponseScoreResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.responseScore !== null && this.responseScore !== undefined) {
    output.writeFieldBegin('responseScore', Thrift.Type.STRUCT, 2);
    this.responseScore.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreAccount = module.exports.ScoreAccount = function(args) {
  this.userId = null;
  this.account = null;
  this.createTime = null;
  this.type = null;
  this.state = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
ScoreAccount.prototype = {};
ScoreAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreAccount.prototype.write = function(output) {
  output.writeStructBegin('ScoreAccount');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 3);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 5);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreAccountResult = module.exports.ScoreAccountResult = function(args) {
  this.result = null;
  this.scoreAccount = null;
  this.value = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.scoreAccount !== undefined) {
      this.scoreAccount = args.scoreAccount;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
ScoreAccountResult.prototype = {};
ScoreAccountResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scoreAccount = new ttypes.ScoreAccount();
        this.scoreAccount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreAccountResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreAccountResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.scoreAccount !== null && this.scoreAccount !== undefined) {
    output.writeFieldBegin('scoreAccount', Thrift.Type.STRUCT, 2);
    this.scoreAccount.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 3);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelaAccountRequestParam = module.exports.RelaAccountRequestParam = function(args) {
  this.AppCode = null;
  this.RequestDate = null;
  this.Sign = null;
  this.SpID = null;
  this.DeviceNo = null;
  this.DeviceType = null;
  this.OutCustID = null;
  this.ToKen = null;
  this.ExceedTime = null;
  if (args) {
    if (args.AppCode !== undefined) {
      this.AppCode = args.AppCode;
    }
    if (args.RequestDate !== undefined) {
      this.RequestDate = args.RequestDate;
    }
    if (args.Sign !== undefined) {
      this.Sign = args.Sign;
    }
    if (args.SpID !== undefined) {
      this.SpID = args.SpID;
    }
    if (args.DeviceNo !== undefined) {
      this.DeviceNo = args.DeviceNo;
    }
    if (args.DeviceType !== undefined) {
      this.DeviceType = args.DeviceType;
    }
    if (args.OutCustID !== undefined) {
      this.OutCustID = args.OutCustID;
    }
    if (args.ToKen !== undefined) {
      this.ToKen = args.ToKen;
    }
    if (args.ExceedTime !== undefined) {
      this.ExceedTime = args.ExceedTime;
    }
  }
};
RelaAccountRequestParam.prototype = {};
RelaAccountRequestParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.AppCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.RequestDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.SpID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.OutCustID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.ToKen = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.ExceedTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelaAccountRequestParam.prototype.write = function(output) {
  output.writeStructBegin('RelaAccountRequestParam');
  if (this.AppCode !== null && this.AppCode !== undefined) {
    output.writeFieldBegin('AppCode', Thrift.Type.STRING, 1);
    output.writeString(this.AppCode);
    output.writeFieldEnd();
  }
  if (this.RequestDate !== null && this.RequestDate !== undefined) {
    output.writeFieldBegin('RequestDate', Thrift.Type.STRING, 2);
    output.writeString(this.RequestDate);
    output.writeFieldEnd();
  }
  if (this.Sign !== null && this.Sign !== undefined) {
    output.writeFieldBegin('Sign', Thrift.Type.STRING, 3);
    output.writeString(this.Sign);
    output.writeFieldEnd();
  }
  if (this.SpID !== null && this.SpID !== undefined) {
    output.writeFieldBegin('SpID', Thrift.Type.STRING, 4);
    output.writeString(this.SpID);
    output.writeFieldEnd();
  }
  if (this.DeviceNo !== null && this.DeviceNo !== undefined) {
    output.writeFieldBegin('DeviceNo', Thrift.Type.STRING, 5);
    output.writeString(this.DeviceNo);
    output.writeFieldEnd();
  }
  if (this.DeviceType !== null && this.DeviceType !== undefined) {
    output.writeFieldBegin('DeviceType', Thrift.Type.STRING, 6);
    output.writeString(this.DeviceType);
    output.writeFieldEnd();
  }
  if (this.OutCustID !== null && this.OutCustID !== undefined) {
    output.writeFieldBegin('OutCustID', Thrift.Type.STRING, 7);
    output.writeString(this.OutCustID);
    output.writeFieldEnd();
  }
  if (this.ToKen !== null && this.ToKen !== undefined) {
    output.writeFieldBegin('ToKen', Thrift.Type.STRING, 8);
    output.writeString(this.ToKen);
    output.writeFieldEnd();
  }
  if (this.ExceedTime !== null && this.ExceedTime !== undefined) {
    output.writeFieldBegin('ExceedTime', Thrift.Type.STRING, 9);
    output.writeString(this.ExceedTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResponseRelaAcoountResult = module.exports.ResponseRelaAcoountResult = function(args) {
  this.result = null;
  this.ResponseScore = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.ResponseScore !== undefined) {
      this.ResponseScore = args.ResponseScore;
    }
  }
};
ResponseRelaAcoountResult.prototype = {};
ResponseRelaAcoountResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ResponseScore = new ttypes.ResponseScore();
        this.ResponseScore.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResponseRelaAcoountResult.prototype.write = function(output) {
  output.writeStructBegin('ResponseRelaAcoountResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.ResponseScore !== null && this.ResponseScore !== undefined) {
    output.writeFieldBegin('ResponseScore', Thrift.Type.STRUCT, 2);
    this.ResponseScore.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotVipScoreParam = module.exports.ExprotVipScoreParam = function(args) {
  this.userId = null;
  this.mobile = null;
  this.startTime = null;
  this.endTime = null;
  this.amount = null;
  this.state = null;
  this.serial = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.serial !== undefined) {
      this.serial = args.serial;
    }
  }
};
ExprotVipScoreParam.prototype = {};
ExprotVipScoreParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.serial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotVipScoreParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotVipScoreParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 3);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 4);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 5);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 6);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.serial !== null && this.serial !== undefined) {
    output.writeFieldBegin('serial', Thrift.Type.STRING, 7);
    output.writeString(this.serial);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotResult = module.exports.ExprotResult = function(args) {
  this.path = null;
  this.result = null;
  if (args) {
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
ExprotResult.prototype = {};
ExprotResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotResult.prototype.write = function(output) {
  output.writeStructBegin('ExprotResult');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreStatisticParam = module.exports.ScoreStatisticParam = function(args) {
  this.type = null;
  this.startTime = null;
  this.endTime = null;
  this.inoroutType = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.inoroutType !== undefined) {
      this.inoroutType = args.inoroutType;
    }
  }
};
ScoreStatisticParam.prototype = {};
ScoreStatisticParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inoroutType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreStatisticParam.prototype.write = function(output) {
  output.writeStructBegin('ScoreStatisticParam');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 2);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 3);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.inoroutType !== null && this.inoroutType !== undefined) {
    output.writeFieldBegin('inoroutType', Thrift.Type.I32, 4);
    output.writeI32(this.inoroutType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreStatistic = module.exports.ScoreStatistic = function(args) {
  this.time = null;
  this.type = null;
  this.amount = null;
  if (args) {
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
  }
};
ScoreStatistic.prototype = {};
ScoreStatistic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreStatistic.prototype.write = function(output) {
  output.writeStructBegin('ScoreStatistic');
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 1);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 3);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreStatisticResult = module.exports.ScoreStatisticResult = function(args) {
  this.result = null;
  this.scoreStatisticList = null;
  this.pagination = null;
  this.sumScore = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.scoreStatisticList !== undefined) {
      this.scoreStatisticList = args.scoreStatisticList;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
    if (args.sumScore !== undefined) {
      this.sumScore = args.sumScore;
    }
  }
};
ScoreStatisticResult.prototype = {};
ScoreStatisticResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.scoreStatisticList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.ScoreStatistic();
          elem30.read(input);
          this.scoreStatisticList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sumScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreStatisticResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreStatisticResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.scoreStatisticList !== null && this.scoreStatisticList !== undefined) {
    output.writeFieldBegin('scoreStatisticList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.scoreStatisticList.length);
    for (var iter31 in this.scoreStatisticList)
    {
      if (this.scoreStatisticList.hasOwnProperty(iter31))
      {
        iter31 = this.scoreStatisticList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.sumScore !== null && this.sumScore !== undefined) {
    output.writeFieldBegin('sumScore', Thrift.Type.I32, 4);
    output.writeI32(this.sumScore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotScoreStatisticParam = module.exports.ExprotScoreStatisticParam = function(args) {
  this.type = null;
  this.startTime = null;
  this.endTime = null;
  this.inoroutType = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.inoroutType !== undefined) {
      this.inoroutType = args.inoroutType;
    }
  }
};
ExprotScoreStatisticParam.prototype = {};
ExprotScoreStatisticParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inoroutType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotScoreStatisticParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotScoreStatisticParam');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 2);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 3);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.inoroutType !== null && this.inoroutType !== undefined) {
    output.writeFieldBegin('inoroutType', Thrift.Type.I32, 4);
    output.writeI32(this.inoroutType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTotalStatisticParam = module.exports.ScoreTotalStatisticParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
ScoreTotalStatisticParam.prototype = {};
ScoreTotalStatisticParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTotalStatisticParam.prototype.write = function(output) {
  output.writeStructBegin('ScoreTotalStatisticParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTotalStatistic = module.exports.ScoreTotalStatistic = function(args) {
  this.time = null;
  this.sumIncome = null;
  this.sumExpenditure = null;
  if (args) {
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.sumIncome !== undefined) {
      this.sumIncome = args.sumIncome;
    }
    if (args.sumExpenditure !== undefined) {
      this.sumExpenditure = args.sumExpenditure;
    }
  }
};
ScoreTotalStatistic.prototype = {};
ScoreTotalStatistic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sumIncome = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sumExpenditure = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTotalStatistic.prototype.write = function(output) {
  output.writeStructBegin('ScoreTotalStatistic');
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 1);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.sumIncome !== null && this.sumIncome !== undefined) {
    output.writeFieldBegin('sumIncome', Thrift.Type.STRING, 2);
    output.writeString(this.sumIncome);
    output.writeFieldEnd();
  }
  if (this.sumExpenditure !== null && this.sumExpenditure !== undefined) {
    output.writeFieldBegin('sumExpenditure', Thrift.Type.STRING, 3);
    output.writeString(this.sumExpenditure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreTotalStatisticResult = module.exports.ScoreTotalStatisticResult = function(args) {
  this.result = null;
  this.scoreTotalStatisticList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.scoreTotalStatisticList !== undefined) {
      this.scoreTotalStatisticList = args.scoreTotalStatisticList;
    }
  }
};
ScoreTotalStatisticResult.prototype = {};
ScoreTotalStatisticResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.scoreTotalStatisticList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ScoreTotalStatistic();
          elem38.read(input);
          this.scoreTotalStatisticList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreTotalStatisticResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreTotalStatisticResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.scoreTotalStatisticList !== null && this.scoreTotalStatisticList !== undefined) {
    output.writeFieldBegin('scoreTotalStatisticList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.scoreTotalStatisticList.length);
    for (var iter39 in this.scoreTotalStatisticList)
    {
      if (this.scoreTotalStatisticList.hasOwnProperty(iter39))
      {
        iter39 = this.scoreTotalStatisticList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotScoreTotalStatisticParam = module.exports.ExprotScoreTotalStatisticParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
ExprotScoreTotalStatisticParam.prototype = {};
ExprotScoreTotalStatisticParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotScoreTotalStatisticParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotScoreTotalStatisticParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryScoreStockHistoryParam = module.exports.QueryScoreStockHistoryParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
QueryScoreStockHistoryParam.prototype = {};
QueryScoreStockHistoryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryScoreStockHistoryParam.prototype.write = function(output) {
  output.writeStructBegin('QueryScoreStockHistoryParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreStockHistory = module.exports.ScoreStockHistory = function(args) {
  this.time = null;
  this.sumTotalScore = null;
  this.sumTotalIncome = null;
  this.sumTotalExpenditure = null;
  if (args) {
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.sumTotalScore !== undefined) {
      this.sumTotalScore = args.sumTotalScore;
    }
    if (args.sumTotalIncome !== undefined) {
      this.sumTotalIncome = args.sumTotalIncome;
    }
    if (args.sumTotalExpenditure !== undefined) {
      this.sumTotalExpenditure = args.sumTotalExpenditure;
    }
  }
};
ScoreStockHistory.prototype = {};
ScoreStockHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sumTotalScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sumTotalIncome = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sumTotalExpenditure = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreStockHistory.prototype.write = function(output) {
  output.writeStructBegin('ScoreStockHistory');
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 1);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.sumTotalScore !== null && this.sumTotalScore !== undefined) {
    output.writeFieldBegin('sumTotalScore', Thrift.Type.STRING, 2);
    output.writeString(this.sumTotalScore);
    output.writeFieldEnd();
  }
  if (this.sumTotalIncome !== null && this.sumTotalIncome !== undefined) {
    output.writeFieldBegin('sumTotalIncome', Thrift.Type.STRING, 3);
    output.writeString(this.sumTotalIncome);
    output.writeFieldEnd();
  }
  if (this.sumTotalExpenditure !== null && this.sumTotalExpenditure !== undefined) {
    output.writeFieldBegin('sumTotalExpenditure', Thrift.Type.STRING, 4);
    output.writeString(this.sumTotalExpenditure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreStockHistoryResult = module.exports.ScoreStockHistoryResult = function(args) {
  this.result = null;
  this.scoreStockHistoryResultList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.scoreStockHistoryResultList !== undefined) {
      this.scoreStockHistoryResultList = args.scoreStockHistoryResultList;
    }
  }
};
ScoreStockHistoryResult.prototype = {};
ScoreStockHistoryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.scoreStockHistoryResultList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ScoreStockHistory();
          elem46.read(input);
          this.scoreStockHistoryResultList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreStockHistoryResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreStockHistoryResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.scoreStockHistoryResultList !== null && this.scoreStockHistoryResultList !== undefined) {
    output.writeFieldBegin('scoreStockHistoryResultList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.scoreStockHistoryResultList.length);
    for (var iter47 in this.scoreStockHistoryResultList)
    {
      if (this.scoreStockHistoryResultList.hasOwnProperty(iter47))
      {
        iter47 = this.scoreStockHistoryResultList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotScoreStockHistoryParam = module.exports.ExprotScoreStockHistoryParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
ExprotScoreStockHistoryParam.prototype = {};
ExprotScoreStockHistoryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotScoreStockHistoryParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotScoreStockHistoryParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAuthorizeParam = module.exports.UserAuthorizeParam = function(args) {
  this.clientType = null;
  this.score = null;
  this.h5Type = null;
  if (args) {
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.h5Type !== undefined) {
      this.h5Type = args.h5Type;
    }
  }
};
UserAuthorizeParam.prototype = {};
UserAuthorizeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.clientType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.score = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.h5Type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAuthorizeParam.prototype.write = function(output) {
  output.writeStructBegin('UserAuthorizeParam');
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.I32, 1);
    output.writeI32(this.clientType);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRING, 2);
    output.writeString(this.score);
    output.writeFieldEnd();
  }
  if (this.h5Type !== null && this.h5Type !== undefined) {
    output.writeFieldBegin('h5Type', Thrift.Type.STRING, 3);
    output.writeString(this.h5Type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAuthorizeResult = module.exports.UserAuthorizeResult = function(args) {
  this.result = null;
  this.action = null;
  this.requestXml = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.requestXml !== undefined) {
      this.requestXml = args.requestXml;
    }
  }
};
UserAuthorizeResult.prototype = {};
UserAuthorizeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.action = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.requestXml = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAuthorizeResult.prototype.write = function(output) {
  output.writeStructBegin('UserAuthorizeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.STRING, 2);
    output.writeString(this.action);
    output.writeFieldEnd();
  }
  if (this.requestXml !== null && this.requestXml !== undefined) {
    output.writeFieldBegin('requestXml', Thrift.Type.STRING, 3);
    output.writeString(this.requestXml);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EnterUserAuthorizeResult = module.exports.EnterUserAuthorizeResult = function(args) {
  this.result = null;
  this.action = null;
  this.encryptyParam = null;
  this.ErrCode = null;
  this.ErrMsg = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.encryptyParam !== undefined) {
      this.encryptyParam = args.encryptyParam;
    }
    if (args.ErrCode !== undefined) {
      this.ErrCode = args.ErrCode;
    }
    if (args.ErrMsg !== undefined) {
      this.ErrMsg = args.ErrMsg;
    }
  }
};
EnterUserAuthorizeResult.prototype = {};
EnterUserAuthorizeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.action = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encryptyParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ErrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ErrMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnterUserAuthorizeResult.prototype.write = function(output) {
  output.writeStructBegin('EnterUserAuthorizeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.STRING, 2);
    output.writeString(this.action);
    output.writeFieldEnd();
  }
  if (this.encryptyParam !== null && this.encryptyParam !== undefined) {
    output.writeFieldBegin('encryptyParam', Thrift.Type.STRING, 3);
    output.writeString(this.encryptyParam);
    output.writeFieldEnd();
  }
  if (this.ErrCode !== null && this.ErrCode !== undefined) {
    output.writeFieldBegin('ErrCode', Thrift.Type.STRING, 4);
    output.writeString(this.ErrCode);
    output.writeFieldEnd();
  }
  if (this.ErrMsg !== null && this.ErrMsg !== undefined) {
    output.writeFieldBegin('ErrMsg', Thrift.Type.STRING, 5);
    output.writeString(this.ErrMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCachEnterLogParam = module.exports.ScoreCachEnterLogParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  this.type = null;
  this.custId = null;
  this.deviceNo = null;
  this.reperrCode = null;
  this.sysCode = null;
  this.outOrderId = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.deviceNo !== undefined) {
      this.deviceNo = args.deviceNo;
    }
    if (args.reperrCode !== undefined) {
      this.reperrCode = args.reperrCode;
    }
    if (args.sysCode !== undefined) {
      this.sysCode = args.sysCode;
    }
    if (args.outOrderId !== undefined) {
      this.outOrderId = args.outOrderId;
    }
  }
};
ScoreCachEnterLogParam.prototype = {};
ScoreCachEnterLogParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.reperrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sysCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.outOrderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCachEnterLogParam.prototype.write = function(output) {
  output.writeStructBegin('ScoreCachEnterLogParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 4);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.deviceNo !== null && this.deviceNo !== undefined) {
    output.writeFieldBegin('deviceNo', Thrift.Type.STRING, 5);
    output.writeString(this.deviceNo);
    output.writeFieldEnd();
  }
  if (this.reperrCode !== null && this.reperrCode !== undefined) {
    output.writeFieldBegin('reperrCode', Thrift.Type.STRING, 6);
    output.writeString(this.reperrCode);
    output.writeFieldEnd();
  }
  if (this.sysCode !== null && this.sysCode !== undefined) {
    output.writeFieldBegin('sysCode', Thrift.Type.STRING, 7);
    output.writeString(this.sysCode);
    output.writeFieldEnd();
  }
  if (this.outOrderId !== null && this.outOrderId !== undefined) {
    output.writeFieldBegin('outOrderId', Thrift.Type.STRING, 8);
    output.writeString(this.outOrderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCachEnterLog = module.exports.ScoreCachEnterLog = function(args) {
  this.requestDate = null;
  this.outOrderId = null;
  this.type = null;
  this.custId = null;
  this.deviceNo = null;
  this.reperrCode = null;
  this.sysCode = null;
  this.num = null;
  if (args) {
    if (args.requestDate !== undefined) {
      this.requestDate = args.requestDate;
    }
    if (args.outOrderId !== undefined) {
      this.outOrderId = args.outOrderId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.deviceNo !== undefined) {
      this.deviceNo = args.deviceNo;
    }
    if (args.reperrCode !== undefined) {
      this.reperrCode = args.reperrCode;
    }
    if (args.sysCode !== undefined) {
      this.sysCode = args.sysCode;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
  }
};
ScoreCachEnterLog.prototype = {};
ScoreCachEnterLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.outOrderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.reperrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sysCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.num = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCachEnterLog.prototype.write = function(output) {
  output.writeStructBegin('ScoreCachEnterLog');
  if (this.requestDate !== null && this.requestDate !== undefined) {
    output.writeFieldBegin('requestDate', Thrift.Type.STRING, 1);
    output.writeString(this.requestDate);
    output.writeFieldEnd();
  }
  if (this.outOrderId !== null && this.outOrderId !== undefined) {
    output.writeFieldBegin('outOrderId', Thrift.Type.STRING, 2);
    output.writeString(this.outOrderId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 4);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.deviceNo !== null && this.deviceNo !== undefined) {
    output.writeFieldBegin('deviceNo', Thrift.Type.STRING, 5);
    output.writeString(this.deviceNo);
    output.writeFieldEnd();
  }
  if (this.reperrCode !== null && this.reperrCode !== undefined) {
    output.writeFieldBegin('reperrCode', Thrift.Type.STRING, 6);
    output.writeString(this.reperrCode);
    output.writeFieldEnd();
  }
  if (this.sysCode !== null && this.sysCode !== undefined) {
    output.writeFieldBegin('sysCode', Thrift.Type.STRING, 7);
    output.writeString(this.sysCode);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.STRING, 8);
    output.writeString(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCachEnterLogResult = module.exports.ScoreCachEnterLogResult = function(args) {
  this.result = null;
  this.listLog = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.listLog !== undefined) {
      this.listLog = args.listLog;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCachEnterLogResult.prototype = {};
ScoreCachEnterLogResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.listLog = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.ScoreCachEnterLog();
          elem54.read(input);
          this.listLog.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCachEnterLogResult.prototype.write = function(output) {
  output.writeStructBegin('ScoreCachEnterLogResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.listLog !== null && this.listLog !== undefined) {
    output.writeFieldBegin('listLog', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.listLog.length);
    for (var iter55 in this.listLog)
    {
      if (this.listLog.hasOwnProperty(iter55))
      {
        iter55 = this.listLog[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExprotCachEnterLogParam = module.exports.ExprotCachEnterLogParam = function(args) {
  this.startTime = null;
  this.endTime = null;
  this.type = null;
  this.custId = null;
  this.deviceNo = null;
  this.reperrCode = null;
  this.sysCode = null;
  this.outOrderId = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.deviceNo !== undefined) {
      this.deviceNo = args.deviceNo;
    }
    if (args.reperrCode !== undefined) {
      this.reperrCode = args.reperrCode;
    }
    if (args.sysCode !== undefined) {
      this.sysCode = args.sysCode;
    }
    if (args.outOrderId !== undefined) {
      this.outOrderId = args.outOrderId;
    }
  }
};
ExprotCachEnterLogParam.prototype = {};
ExprotCachEnterLogParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deviceNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.reperrCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sysCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.outOrderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprotCachEnterLogParam.prototype.write = function(output) {
  output.writeStructBegin('ExprotCachEnterLogParam');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 1);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 2);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 4);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.deviceNo !== null && this.deviceNo !== undefined) {
    output.writeFieldBegin('deviceNo', Thrift.Type.STRING, 5);
    output.writeString(this.deviceNo);
    output.writeFieldEnd();
  }
  if (this.reperrCode !== null && this.reperrCode !== undefined) {
    output.writeFieldBegin('reperrCode', Thrift.Type.STRING, 6);
    output.writeString(this.reperrCode);
    output.writeFieldEnd();
  }
  if (this.sysCode !== null && this.sysCode !== undefined) {
    output.writeFieldBegin('sysCode', Thrift.Type.STRING, 7);
    output.writeString(this.sysCode);
    output.writeFieldEnd();
  }
  if (this.outOrderId !== null && this.outOrderId !== undefined) {
    output.writeFieldBegin('outOrderId', Thrift.Type.STRING, 8);
    output.writeString(this.outOrderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignParam = module.exports.SignParam = function(args) {
  this.timestamp = null;
  this.sign = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
  }
};
SignParam.prototype = {};
SignParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignParam.prototype.write = function(output) {
  output.writeStructBegin('SignParam');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 2);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransferResult = module.exports.TransferResult = function(args) {
  this.result = null;
  this.buyUid = null;
  this.sellUid = null;
  this.exCode = null;
  this.quantity = null;
  this.txnId = null;
  this.transId = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.buyUid !== undefined) {
      this.buyUid = args.buyUid;
    }
    if (args.sellUid !== undefined) {
      this.sellUid = args.sellUid;
    }
    if (args.exCode !== undefined) {
      this.exCode = args.exCode;
    }
    if (args.quantity !== undefined) {
      this.quantity = args.quantity;
    }
    if (args.txnId !== undefined) {
      this.txnId = args.txnId;
    }
    if (args.transId !== undefined) {
      this.transId = args.transId;
    }
  }
};
TransferResult.prototype = {};
TransferResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buyUid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sellUid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.exCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.txnId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.transId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransferResult.prototype.write = function(output) {
  output.writeStructBegin('TransferResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.buyUid !== null && this.buyUid !== undefined) {
    output.writeFieldBegin('buyUid', Thrift.Type.STRING, 2);
    output.writeString(this.buyUid);
    output.writeFieldEnd();
  }
  if (this.sellUid !== null && this.sellUid !== undefined) {
    output.writeFieldBegin('sellUid', Thrift.Type.STRING, 3);
    output.writeString(this.sellUid);
    output.writeFieldEnd();
  }
  if (this.exCode !== null && this.exCode !== undefined) {
    output.writeFieldBegin('exCode', Thrift.Type.STRING, 4);
    output.writeString(this.exCode);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 5);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  if (this.txnId !== null && this.txnId !== undefined) {
    output.writeFieldBegin('txnId', Thrift.Type.STRING, 6);
    output.writeString(this.txnId);
    output.writeFieldEnd();
  }
  if (this.transId !== null && this.transId !== undefined) {
    output.writeFieldBegin('transId', Thrift.Type.STRING, 7);
    output.writeString(this.transId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DealQueryResult = module.exports.DealQueryResult = function(args) {
  this.result = null;
  this.uid = null;
  this.exCode = null;
  this.quantity = null;
  this.txnId = null;
  this.transId = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.exCode !== undefined) {
      this.exCode = args.exCode;
    }
    if (args.quantity !== undefined) {
      this.quantity = args.quantity;
    }
    if (args.txnId !== undefined) {
      this.txnId = args.txnId;
    }
    if (args.transId !== undefined) {
      this.transId = args.transId;
    }
  }
};
DealQueryResult.prototype = {};
DealQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.exCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.txnId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.transId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DealQueryResult.prototype.write = function(output) {
  output.writeStructBegin('DealQueryResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 2);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.exCode !== null && this.exCode !== undefined) {
    output.writeFieldBegin('exCode', Thrift.Type.STRING, 3);
    output.writeString(this.exCode);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 4);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  if (this.txnId !== null && this.txnId !== undefined) {
    output.writeFieldBegin('txnId', Thrift.Type.STRING, 5);
    output.writeString(this.txnId);
    output.writeFieldEnd();
  }
  if (this.transId !== null && this.transId !== undefined) {
    output.writeFieldBegin('transId', Thrift.Type.STRING, 6);
    output.writeString(this.transId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

