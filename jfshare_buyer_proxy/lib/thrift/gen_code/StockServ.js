//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./stock_types');
//HELPER FUNCTIONS AND STRUCTURES

StockServ_setStock_args = function(args) {
  this.tranId = null;
  this.stockInfo = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.stockInfo !== undefined) {
      this.stockInfo = args.stockInfo;
    }
  }
};
StockServ_setStock_args.prototype = {};
StockServ_setStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stockInfo = new ttypes.StockInfo();
        this.stockInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_setStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_setStock_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.stockInfo !== null && this.stockInfo !== undefined) {
    output.writeFieldBegin('stockInfo', Thrift.Type.STRUCT, 2);
    this.stockInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_setStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_setStock_result.prototype = {};
StockServ_setStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_setStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_setStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_getStock_args = function(args) {
  this.productId = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
StockServ_getStock_args.prototype = {};
StockServ_getStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_getStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_getStock_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_getStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_getStock_result.prototype = {};
StockServ_getStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StockResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_getStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_getStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_getStockForSku_args = function(args) {
  this.productId = null;
  this.skuNums = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.skuNums !== undefined) {
      this.skuNums = args.skuNums;
    }
  }
};
StockServ_getStockForSku_args.prototype = {};
StockServ_getStockForSku_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.skuNums = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.skuNums.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_getStockForSku_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_getStockForSku_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNums !== null && this.skuNums !== undefined) {
    output.writeFieldBegin('skuNums', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.skuNums.length);
    for (var iter33 in this.skuNums)
    {
      if (this.skuNums.hasOwnProperty(iter33))
      {
        iter33 = this.skuNums[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_getStockForSku_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_getStockForSku_result.prototype = {};
StockServ_getStockForSku_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StockResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_getStockForSku_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_getStockForSku_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_lockStock_args = function(args) {
  this.tranId = null;
  this.lockInfoList = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.lockInfoList !== undefined) {
      this.lockInfoList = args.lockInfoList;
    }
  }
};
StockServ_lockStock_args.prototype = {};
StockServ_lockStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.lockInfoList = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new ttypes.LockInfo();
          elem40.read(input);
          this.lockInfoList.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_lockStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_lockStock_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.lockInfoList !== null && this.lockInfoList !== undefined) {
    output.writeFieldBegin('lockInfoList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.lockInfoList.length);
    for (var iter41 in this.lockInfoList)
    {
      if (this.lockInfoList.hasOwnProperty(iter41))
      {
        iter41 = this.lockInfoList[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_lockStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_lockStock_result.prototype = {};
StockServ_lockStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LockStockResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_lockStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_lockStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_releaseStock_args = function(args) {
  this.tranId = null;
  this.lockInfoList = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.lockInfoList !== undefined) {
      this.lockInfoList = args.lockInfoList;
    }
  }
};
StockServ_releaseStock_args.prototype = {};
StockServ_releaseStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.lockInfoList = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new ttypes.LockInfo();
          elem48.read(input);
          this.lockInfoList.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_releaseStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_releaseStock_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.lockInfoList !== null && this.lockInfoList !== undefined) {
    output.writeFieldBegin('lockInfoList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.lockInfoList.length);
    for (var iter49 in this.lockInfoList)
    {
      if (this.lockInfoList.hasOwnProperty(iter49))
      {
        iter49 = this.lockInfoList[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_releaseStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_releaseStock_result.prototype = {};
StockServ_releaseStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_releaseStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_releaseStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_releaseLockCount_args = function(args) {
  this.tranId = null;
  this.lockInfoList = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.lockInfoList !== undefined) {
      this.lockInfoList = args.lockInfoList;
    }
  }
};
StockServ_releaseLockCount_args.prototype = {};
StockServ_releaseLockCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.lockInfoList = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new ttypes.LockInfo();
          elem56.read(input);
          this.lockInfoList.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_releaseLockCount_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_releaseLockCount_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.lockInfoList !== null && this.lockInfoList !== undefined) {
    output.writeFieldBegin('lockInfoList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.lockInfoList.length);
    for (var iter57 in this.lockInfoList)
    {
      if (this.lockInfoList.hasOwnProperty(iter57))
      {
        iter57 = this.lockInfoList[iter57];
        iter57.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_releaseLockCount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_releaseLockCount_result.prototype = {};
StockServ_releaseLockCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_releaseLockCount_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_releaseLockCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_removeStock_args = function(args) {
  this.productId = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
  }
};
StockServ_removeStock_args.prototype = {};
StockServ_removeStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_removeStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_removeStock_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_removeStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_removeStock_result.prototype = {};
StockServ_removeStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_removeStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_removeStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_createStock_args = function(args) {
  this.tranId = null;
  this.stockInfo = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.stockInfo !== undefined) {
      this.stockInfo = args.stockInfo;
    }
  }
};
StockServ_createStock_args.prototype = {};
StockServ_createStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stockInfo = new ttypes.StockInfo();
        this.stockInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_createStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_createStock_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.stockInfo !== null && this.stockInfo !== undefined) {
    output.writeFieldBegin('stockInfo', Thrift.Type.STRUCT, 2);
    this.stockInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_createStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_createStock_result.prototype = {};
StockServ_createStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_createStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_createStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_supplyStock_args = function(args) {
  this.tranId = null;
  this.stockInfo = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.stockInfo !== undefined) {
      this.stockInfo = args.stockInfo;
    }
  }
};
StockServ_supplyStock_args.prototype = {};
StockServ_supplyStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stockInfo = new ttypes.StockInfo();
        this.stockInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_supplyStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_supplyStock_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.stockInfo !== null && this.stockInfo !== undefined) {
    output.writeFieldBegin('stockInfo', Thrift.Type.STRUCT, 2);
    this.stockInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_supplyStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_supplyStock_result.prototype = {};
StockServ_supplyStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_supplyStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_supplyStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_supplyFullStock_args = function(args) {
  this.tranId = null;
  this.stockInfo = null;
  if (args) {
    if (args.tranId !== undefined) {
      this.tranId = args.tranId;
    }
    if (args.stockInfo !== undefined) {
      this.stockInfo = args.stockInfo;
    }
  }
};
StockServ_supplyFullStock_args.prototype = {};
StockServ_supplyFullStock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tranId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stockInfo = new ttypes.StockInfo();
        this.stockInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_supplyFullStock_args.prototype.write = function(output) {
  output.writeStructBegin('StockServ_supplyFullStock_args');
  if (this.tranId !== null && this.tranId !== undefined) {
    output.writeFieldBegin('tranId', Thrift.Type.STRING, 1);
    output.writeString(this.tranId);
    output.writeFieldEnd();
  }
  if (this.stockInfo !== null && this.stockInfo !== undefined) {
    output.writeFieldBegin('stockInfo', Thrift.Type.STRUCT, 2);
    this.stockInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServ_supplyFullStock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StockServ_supplyFullStock_result.prototype = {};
StockServ_supplyFullStock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockServ_supplyFullStock_result.prototype.write = function(output) {
  output.writeStructBegin('StockServ_supplyFullStock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
StockServClient.prototype = {};
StockServClient.prototype.seqid = function() { return this._seqid; }
StockServClient.prototype.new_seqid = function() { return this._seqid += 1; }
StockServClient.prototype.setStock = function(tranId, stockInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setStock(tranId, stockInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setStock(tranId, stockInfo);
  }
};

StockServClient.prototype.send_setStock = function(tranId, stockInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_setStock_args();
  args.tranId = tranId;
  args.stockInfo = stockInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_setStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_setStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setStock failed: unknown result');
};
StockServClient.prototype.getStock = function(productId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStock(productId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStock(productId);
  }
};

StockServClient.prototype.send_getStock = function(productId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_getStock_args();
  args.productId = productId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_getStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_getStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStock failed: unknown result');
};
StockServClient.prototype.getStockForSku = function(productId, skuNums, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStockForSku(productId, skuNums);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStockForSku(productId, skuNums);
  }
};

StockServClient.prototype.send_getStockForSku = function(productId, skuNums) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStockForSku', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_getStockForSku_args();
  args.productId = productId;
  args.skuNums = skuNums;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_getStockForSku = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_getStockForSku_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStockForSku failed: unknown result');
};
StockServClient.prototype.lockStock = function(tranId, lockInfoList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lockStock(tranId, lockInfoList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lockStock(tranId, lockInfoList);
  }
};

StockServClient.prototype.send_lockStock = function(tranId, lockInfoList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lockStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_lockStock_args();
  args.tranId = tranId;
  args.lockInfoList = lockInfoList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_lockStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_lockStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('lockStock failed: unknown result');
};
StockServClient.prototype.releaseStock = function(tranId, lockInfoList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseStock(tranId, lockInfoList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseStock(tranId, lockInfoList);
  }
};

StockServClient.prototype.send_releaseStock = function(tranId, lockInfoList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_releaseStock_args();
  args.tranId = tranId;
  args.lockInfoList = lockInfoList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_releaseStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_releaseStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('releaseStock failed: unknown result');
};
StockServClient.prototype.releaseLockCount = function(tranId, lockInfoList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseLockCount(tranId, lockInfoList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseLockCount(tranId, lockInfoList);
  }
};

StockServClient.prototype.send_releaseLockCount = function(tranId, lockInfoList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseLockCount', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_releaseLockCount_args();
  args.tranId = tranId;
  args.lockInfoList = lockInfoList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_releaseLockCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_releaseLockCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('releaseLockCount failed: unknown result');
};
StockServClient.prototype.removeStock = function(productId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeStock(productId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeStock(productId);
  }
};

StockServClient.prototype.send_removeStock = function(productId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_removeStock_args();
  args.productId = productId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_removeStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_removeStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeStock failed: unknown result');
};
StockServClient.prototype.createStock = function(tranId, stockInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createStock(tranId, stockInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createStock(tranId, stockInfo);
  }
};

StockServClient.prototype.send_createStock = function(tranId, stockInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_createStock_args();
  args.tranId = tranId;
  args.stockInfo = stockInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_createStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_createStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createStock failed: unknown result');
};
StockServClient.prototype.supplyStock = function(tranId, stockInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_supplyStock(tranId, stockInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_supplyStock(tranId, stockInfo);
  }
};

StockServClient.prototype.send_supplyStock = function(tranId, stockInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('supplyStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_supplyStock_args();
  args.tranId = tranId;
  args.stockInfo = stockInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_supplyStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_supplyStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('supplyStock failed: unknown result');
};
StockServClient.prototype.supplyFullStock = function(tranId, stockInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_supplyFullStock(tranId, stockInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_supplyFullStock(tranId, stockInfo);
  }
};

StockServClient.prototype.send_supplyFullStock = function(tranId, stockInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('supplyFullStock', Thrift.MessageType.CALL, this.seqid());
  var args = new StockServ_supplyFullStock_args();
  args.tranId = tranId;
  args.stockInfo = stockInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StockServClient.prototype.recv_supplyFullStock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StockServ_supplyFullStock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('supplyFullStock failed: unknown result');
};
StockServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
StockServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

StockServProcessor.prototype.process_setStock = function(seqid, input, output) {
  var args = new StockServ_setStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setStock.length === 2) {
    Q.fcall(this._handler.setStock, args.tranId, args.stockInfo)
      .then(function(result) {
        var result = new StockServ_setStock_result({success: result});
        output.writeMessageBegin("setStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_setStock_result(err);
        output.writeMessageBegin("setStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setStock(args.tranId, args.stockInfo,  function (err, result) {
      var result = new StockServ_setStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_getStock = function(seqid, input, output) {
  var args = new StockServ_getStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStock.length === 1) {
    Q.fcall(this._handler.getStock, args.productId)
      .then(function(result) {
        var result = new StockServ_getStock_result({success: result});
        output.writeMessageBegin("getStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_getStock_result(err);
        output.writeMessageBegin("getStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getStock(args.productId,  function (err, result) {
      var result = new StockServ_getStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_getStockForSku = function(seqid, input, output) {
  var args = new StockServ_getStockForSku_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStockForSku.length === 2) {
    Q.fcall(this._handler.getStockForSku, args.productId, args.skuNums)
      .then(function(result) {
        var result = new StockServ_getStockForSku_result({success: result});
        output.writeMessageBegin("getStockForSku", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_getStockForSku_result(err);
        output.writeMessageBegin("getStockForSku", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getStockForSku(args.productId, args.skuNums,  function (err, result) {
      var result = new StockServ_getStockForSku_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getStockForSku", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_lockStock = function(seqid, input, output) {
  var args = new StockServ_lockStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lockStock.length === 2) {
    Q.fcall(this._handler.lockStock, args.tranId, args.lockInfoList)
      .then(function(result) {
        var result = new StockServ_lockStock_result({success: result});
        output.writeMessageBegin("lockStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_lockStock_result(err);
        output.writeMessageBegin("lockStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lockStock(args.tranId, args.lockInfoList,  function (err, result) {
      var result = new StockServ_lockStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("lockStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_releaseStock = function(seqid, input, output) {
  var args = new StockServ_releaseStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseStock.length === 2) {
    Q.fcall(this._handler.releaseStock, args.tranId, args.lockInfoList)
      .then(function(result) {
        var result = new StockServ_releaseStock_result({success: result});
        output.writeMessageBegin("releaseStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_releaseStock_result(err);
        output.writeMessageBegin("releaseStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseStock(args.tranId, args.lockInfoList,  function (err, result) {
      var result = new StockServ_releaseStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("releaseStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_releaseLockCount = function(seqid, input, output) {
  var args = new StockServ_releaseLockCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseLockCount.length === 2) {
    Q.fcall(this._handler.releaseLockCount, args.tranId, args.lockInfoList)
      .then(function(result) {
        var result = new StockServ_releaseLockCount_result({success: result});
        output.writeMessageBegin("releaseLockCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_releaseLockCount_result(err);
        output.writeMessageBegin("releaseLockCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseLockCount(args.tranId, args.lockInfoList,  function (err, result) {
      var result = new StockServ_releaseLockCount_result((err != null ? err : {success: result}));
      output.writeMessageBegin("releaseLockCount", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_removeStock = function(seqid, input, output) {
  var args = new StockServ_removeStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeStock.length === 1) {
    Q.fcall(this._handler.removeStock, args.productId)
      .then(function(result) {
        var result = new StockServ_removeStock_result({success: result});
        output.writeMessageBegin("removeStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_removeStock_result(err);
        output.writeMessageBegin("removeStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeStock(args.productId,  function (err, result) {
      var result = new StockServ_removeStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_createStock = function(seqid, input, output) {
  var args = new StockServ_createStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createStock.length === 2) {
    Q.fcall(this._handler.createStock, args.tranId, args.stockInfo)
      .then(function(result) {
        var result = new StockServ_createStock_result({success: result});
        output.writeMessageBegin("createStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_createStock_result(err);
        output.writeMessageBegin("createStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createStock(args.tranId, args.stockInfo,  function (err, result) {
      var result = new StockServ_createStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_supplyStock = function(seqid, input, output) {
  var args = new StockServ_supplyStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.supplyStock.length === 2) {
    Q.fcall(this._handler.supplyStock, args.tranId, args.stockInfo)
      .then(function(result) {
        var result = new StockServ_supplyStock_result({success: result});
        output.writeMessageBegin("supplyStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_supplyStock_result(err);
        output.writeMessageBegin("supplyStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.supplyStock(args.tranId, args.stockInfo,  function (err, result) {
      var result = new StockServ_supplyStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("supplyStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StockServProcessor.prototype.process_supplyFullStock = function(seqid, input, output) {
  var args = new StockServ_supplyFullStock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.supplyFullStock.length === 2) {
    Q.fcall(this._handler.supplyFullStock, args.tranId, args.stockInfo)
      .then(function(result) {
        var result = new StockServ_supplyFullStock_result({success: result});
        output.writeMessageBegin("supplyFullStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StockServ_supplyFullStock_result(err);
        output.writeMessageBegin("supplyFullStock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.supplyFullStock(args.tranId, args.stockInfo,  function (err, result) {
      var result = new StockServ_supplyFullStock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("supplyFullStock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

