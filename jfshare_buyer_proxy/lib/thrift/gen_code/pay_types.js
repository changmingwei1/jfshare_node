//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
PayChannel = module.exports.PayChannel = function(args) {
  this.payChannel = null;
  this.payIp = null;
  this.returnUrl = null;
  this.custId = null;
  this.custType = null;
  this.procustID = null;
  if (args) {
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.payIp !== undefined) {
      this.payIp = args.payIp;
    }
    if (args.returnUrl !== undefined) {
      this.returnUrl = args.returnUrl;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.custType !== undefined) {
      this.custType = args.custType;
    }
    if (args.procustID !== undefined) {
      this.procustID = args.procustID;
    }
  }
};
PayChannel.prototype = {};
PayChannel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payChannel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.custType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.procustID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayChannel.prototype.write = function(output) {
  output.writeStructBegin('PayChannel');
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.I32, 1);
    output.writeI32(this.payChannel);
    output.writeFieldEnd();
  }
  if (this.payIp !== null && this.payIp !== undefined) {
    output.writeFieldBegin('payIp', Thrift.Type.STRING, 2);
    output.writeString(this.payIp);
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 3);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 4);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.custType !== null && this.custType !== undefined) {
    output.writeFieldBegin('custType', Thrift.Type.STRING, 5);
    output.writeString(this.custType);
    output.writeFieldEnd();
  }
  if (this.procustID !== null && this.procustID !== undefined) {
    output.writeFieldBegin('procustID', Thrift.Type.STRING, 6);
    output.writeString(this.procustID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PayReq = module.exports.PayReq = function(args) {
  this.tokenId = null;
  this.orderNo = null;
  this.extraParam = null;
  this.title = null;
  this.price = null;
  this.score = null;
  this.payChannel = null;
  this.payIp = null;
  this.returnUrl = null;
  this.remark = null;
  this.custId = null;
  this.custType = null;
  this.procustID = null;
  this.score2cashAmount = null;
  this.userId = null;
  if (args) {
    if (args.tokenId !== undefined) {
      this.tokenId = args.tokenId;
    }
    if (args.orderNo !== undefined) {
      this.orderNo = args.orderNo;
    }
    if (args.extraParam !== undefined) {
      this.extraParam = args.extraParam;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.payIp !== undefined) {
      this.payIp = args.payIp;
    }
    if (args.returnUrl !== undefined) {
      this.returnUrl = args.returnUrl;
    }
    if (args.remark !== undefined) {
      this.remark = args.remark;
    }
    if (args.custId !== undefined) {
      this.custId = args.custId;
    }
    if (args.custType !== undefined) {
      this.custType = args.custType;
    }
    if (args.procustID !== undefined) {
      this.procustID = args.procustID;
    }
    if (args.score2cashAmount !== undefined) {
      this.score2cashAmount = args.score2cashAmount;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
PayReq.prototype = {};
PayReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tokenId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.extraParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.price = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.payChannel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.payIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.custId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.custType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.procustID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.score2cashAmount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayReq.prototype.write = function(output) {
  output.writeStructBegin('PayReq');
  if (this.tokenId !== null && this.tokenId !== undefined) {
    output.writeFieldBegin('tokenId', Thrift.Type.STRING, 1);
    output.writeString(this.tokenId);
    output.writeFieldEnd();
  }
  if (this.orderNo !== null && this.orderNo !== undefined) {
    output.writeFieldBegin('orderNo', Thrift.Type.STRING, 2);
    output.writeString(this.orderNo);
    output.writeFieldEnd();
  }
  if (this.extraParam !== null && this.extraParam !== undefined) {
    output.writeFieldBegin('extraParam', Thrift.Type.STRING, 3);
    output.writeString(this.extraParam);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.I32, 5);
    output.writeI32(this.price);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 6);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.I32, 7);
    output.writeI32(this.payChannel);
    output.writeFieldEnd();
  }
  if (this.payIp !== null && this.payIp !== undefined) {
    output.writeFieldBegin('payIp', Thrift.Type.STRING, 8);
    output.writeString(this.payIp);
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 9);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 10);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.custId !== null && this.custId !== undefined) {
    output.writeFieldBegin('custId', Thrift.Type.STRING, 11);
    output.writeString(this.custId);
    output.writeFieldEnd();
  }
  if (this.custType !== null && this.custType !== undefined) {
    output.writeFieldBegin('custType', Thrift.Type.STRING, 12);
    output.writeString(this.custType);
    output.writeFieldEnd();
  }
  if (this.procustID !== null && this.procustID !== undefined) {
    output.writeFieldBegin('procustID', Thrift.Type.STRING, 13);
    output.writeString(this.procustID);
    output.writeFieldEnd();
  }
  if (this.score2cashAmount !== null && this.score2cashAmount !== undefined) {
    output.writeFieldBegin('score2cashAmount', Thrift.Type.I32, 14);
    output.writeI32(this.score2cashAmount);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 15);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PayRes = module.exports.PayRes = function(args) {
  this.payChannel = null;
  this.resUrl = null;
  if (args) {
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.resUrl !== undefined) {
      this.resUrl = args.resUrl;
    }
  }
};
PayRes.prototype = {};
PayRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payChannel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayRes.prototype.write = function(output) {
  output.writeStructBegin('PayRes');
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.I32, 1);
    output.writeI32(this.payChannel);
    output.writeFieldEnd();
  }
  if (this.resUrl !== null && this.resUrl !== undefined) {
    output.writeFieldBegin('resUrl', Thrift.Type.STRING, 2);
    output.writeString(this.resUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

payRetQueryParams = module.exports.payRetQueryParams = function(args) {
  this.payId = null;
  if (args) {
    if (args.payId !== undefined) {
      this.payId = args.payId;
    }
  }
};
payRetQueryParams.prototype = {};
payRetQueryParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

payRetQueryParams.prototype.write = function(output) {
  output.writeStructBegin('payRetQueryParams');
  if (this.payId !== null && this.payId !== undefined) {
    output.writeFieldBegin('payId', Thrift.Type.STRING, 1);
    output.writeString(this.payId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PayRet = module.exports.PayRet = function(args) {
  this.payId = null;
  this.tokenId = null;
  this.orderNo = null;
  this.extraParam = null;
  this.price = null;
  this.score = null;
  this.payChannel = null;
  this.retCode = null;
  this.errMsg = null;
  this.thirdPrice = null;
  this.thirdScore = null;
  this.thirdTime = null;
  this.processTime = null;
  this.payAccount = null;
  this.bizCode = null;
  this.sign = null;
  if (args) {
    if (args.payId !== undefined) {
      this.payId = args.payId;
    }
    if (args.tokenId !== undefined) {
      this.tokenId = args.tokenId;
    }
    if (args.orderNo !== undefined) {
      this.orderNo = args.orderNo;
    }
    if (args.extraParam !== undefined) {
      this.extraParam = args.extraParam;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.payChannel !== undefined) {
      this.payChannel = args.payChannel;
    }
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    }
    if (args.errMsg !== undefined) {
      this.errMsg = args.errMsg;
    }
    if (args.thirdPrice !== undefined) {
      this.thirdPrice = args.thirdPrice;
    }
    if (args.thirdScore !== undefined) {
      this.thirdScore = args.thirdScore;
    }
    if (args.thirdTime !== undefined) {
      this.thirdTime = args.thirdTime;
    }
    if (args.processTime !== undefined) {
      this.processTime = args.processTime;
    }
    if (args.payAccount !== undefined) {
      this.payAccount = args.payAccount;
    }
    if (args.bizCode !== undefined) {
      this.bizCode = args.bizCode;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
  }
};
PayRet.prototype = {};
PayRet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.orderNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.extraParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.price = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.payChannel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.thirdPrice = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.thirdScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.thirdTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.processTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.payAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.bizCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayRet.prototype.write = function(output) {
  output.writeStructBegin('PayRet');
  if (this.payId !== null && this.payId !== undefined) {
    output.writeFieldBegin('payId', Thrift.Type.STRING, 1);
    output.writeString(this.payId);
    output.writeFieldEnd();
  }
  if (this.tokenId !== null && this.tokenId !== undefined) {
    output.writeFieldBegin('tokenId', Thrift.Type.STRING, 2);
    output.writeString(this.tokenId);
    output.writeFieldEnd();
  }
  if (this.orderNo !== null && this.orderNo !== undefined) {
    output.writeFieldBegin('orderNo', Thrift.Type.STRING, 3);
    output.writeString(this.orderNo);
    output.writeFieldEnd();
  }
  if (this.extraParam !== null && this.extraParam !== undefined) {
    output.writeFieldBegin('extraParam', Thrift.Type.STRING, 4);
    output.writeString(this.extraParam);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.I32, 5);
    output.writeI32(this.price);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 6);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.I32, 7);
    output.writeI32(this.payChannel);
    output.writeFieldEnd();
  }
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 8);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 9);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  if (this.thirdPrice !== null && this.thirdPrice !== undefined) {
    output.writeFieldBegin('thirdPrice', Thrift.Type.I32, 10);
    output.writeI32(this.thirdPrice);
    output.writeFieldEnd();
  }
  if (this.thirdScore !== null && this.thirdScore !== undefined) {
    output.writeFieldBegin('thirdScore', Thrift.Type.I32, 11);
    output.writeI32(this.thirdScore);
    output.writeFieldEnd();
  }
  if (this.thirdTime !== null && this.thirdTime !== undefined) {
    output.writeFieldBegin('thirdTime', Thrift.Type.STRING, 12);
    output.writeString(this.thirdTime);
    output.writeFieldEnd();
  }
  if (this.processTime !== null && this.processTime !== undefined) {
    output.writeFieldBegin('processTime', Thrift.Type.STRING, 13);
    output.writeString(this.processTime);
    output.writeFieldEnd();
  }
  if (this.payAccount !== null && this.payAccount !== undefined) {
    output.writeFieldBegin('payAccount', Thrift.Type.STRING, 14);
    output.writeString(this.payAccount);
    output.writeFieldEnd();
  }
  if (this.bizCode !== null && this.bizCode !== undefined) {
    output.writeFieldBegin('bizCode', Thrift.Type.I32, 15);
    output.writeI32(this.bizCode);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 16);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

