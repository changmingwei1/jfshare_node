//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var brand_ttypes = require('./brand_types')
var result_ttypes = require('./result_types')


var ttypes = require('./subject_types');
//HELPER FUNCTIONS AND STRUCTURES

SubjectServ_add_args = function(args) {
  this.subject = null;
  if (args) {
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
  }
};
SubjectServ_add_args.prototype = {};
SubjectServ_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.subject = new ttypes.SubjectInfo();
        this.subject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_add_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_add_args');
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRUCT, 1);
    this.subject.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_add_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_add_result.prototype = {};
SubjectServ_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_add_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_add_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_update_args = function(args) {
  this.subject = null;
  if (args) {
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
  }
};
SubjectServ_update_args.prototype = {};
SubjectServ_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.subject = new ttypes.SubjectInfo();
        this.subject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_update_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_update_args');
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRUCT, 1);
    this.subject.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_update_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_update_result.prototype = {};
SubjectServ_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_update_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_update_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_deleteById_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_deleteById_args.prototype = {};
SubjectServ_deleteById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_deleteById_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_deleteById_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_deleteById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_deleteById_result.prototype = {};
SubjectServ_deleteById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_deleteById_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_deleteById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getById_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_getById_args.prototype = {};
SubjectServ_getById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getById_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getById_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getById_result.prototype = {};
SubjectServ_getById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getById_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSubTree_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_getSubTree_args.prototype = {};
SubjectServ_getSubTree_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSubTree_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSubTree_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSubTree_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getSubTree_result.prototype = {};
SubjectServ_getSubTree_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSubTree_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSubTree_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSubTreeForManage_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_getSubTreeForManage_args.prototype = {};
SubjectServ_getSubTreeForManage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSubTreeForManage_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSubTreeForManage_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSubTreeForManage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getSubTreeForManage_result.prototype = {};
SubjectServ_getSubTreeForManage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSubTreeForManage_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSubTreeForManage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSuperTree_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_getSuperTree_args.prototype = {};
SubjectServ_getSuperTree_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSuperTree_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSuperTree_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSuperTree_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getSuperTree_result.prototype = {};
SubjectServ_getSuperTree_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSuperTree_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSuperTree_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getLeavesById_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_getLeavesById_args.prototype = {};
SubjectServ_getLeavesById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getLeavesById_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getLeavesById_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getLeavesById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getLeavesById_result.prototype = {};
SubjectServ_getLeavesById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getLeavesById_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getLeavesById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getWholeTree_args = function(args) {
};
SubjectServ_getWholeTree_args.prototype = {};
SubjectServ_getWholeTree_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getWholeTree_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getWholeTree_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getWholeTree_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getWholeTree_result.prototype = {};
SubjectServ_getWholeTree_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getWholeTree_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getWholeTree_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getWholeTreeList_args = function(args) {
};
SubjectServ_getWholeTreeList_args.prototype = {};
SubjectServ_getWholeTreeList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getWholeTreeList_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getWholeTreeList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getWholeTreeList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getWholeTreeList_result.prototype = {};
SubjectServ_getWholeTreeList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getWholeTreeList_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getWholeTreeList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_releaseSubject_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_releaseSubject_args.prototype = {};
SubjectServ_releaseSubject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_releaseSubject_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_releaseSubject_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_releaseSubject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_releaseSubject_result.prototype = {};
SubjectServ_releaseSubject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_releaseSubject_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_releaseSubject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_querySubjects_args = function(args) {
  this.queryParam = null;
  this.page = null;
  if (args) {
    if (args.queryParam !== undefined) {
      this.queryParam = args.queryParam;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SubjectServ_querySubjects_args.prototype = {};
SubjectServ_querySubjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryParam = new ttypes.SubjectQueryParam();
        this.queryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_querySubjects_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_querySubjects_args');
  if (this.queryParam !== null && this.queryParam !== undefined) {
    output.writeFieldBegin('queryParam', Thrift.Type.STRUCT, 1);
    this.queryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 2);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_querySubjects_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_querySubjects_result.prototype = {};
SubjectServ_querySubjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_querySubjects_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_querySubjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_add4dis_args = function(args) {
  this.displaySubjectParam = null;
  if (args) {
    if (args.displaySubjectParam !== undefined) {
      this.displaySubjectParam = args.displaySubjectParam;
    }
  }
};
SubjectServ_add4dis_args.prototype = {};
SubjectServ_add4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectParam = new ttypes.DisplaySubjectParam();
        this.displaySubjectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_add4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_add4dis_args');
  if (this.displaySubjectParam !== null && this.displaySubjectParam !== undefined) {
    output.writeFieldBegin('displaySubjectParam', Thrift.Type.STRUCT, 1);
    this.displaySubjectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_add4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_add4dis_result.prototype = {};
SubjectServ_add4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_add4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_add4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_update4dis_args = function(args) {
  this.displaySubjectParam = null;
  if (args) {
    if (args.displaySubjectParam !== undefined) {
      this.displaySubjectParam = args.displaySubjectParam;
    }
  }
};
SubjectServ_update4dis_args.prototype = {};
SubjectServ_update4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectParam = new ttypes.DisplaySubjectParam();
        this.displaySubjectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_update4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_update4dis_args');
  if (this.displaySubjectParam !== null && this.displaySubjectParam !== undefined) {
    output.writeFieldBegin('displaySubjectParam', Thrift.Type.STRUCT, 1);
    this.displaySubjectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_update4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_update4dis_result.prototype = {};
SubjectServ_update4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_update4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_update4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_delete4dis_args = function(args) {
  this.displaySubjectParam = null;
  if (args) {
    if (args.displaySubjectParam !== undefined) {
      this.displaySubjectParam = args.displaySubjectParam;
    }
  }
};
SubjectServ_delete4dis_args.prototype = {};
SubjectServ_delete4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectParam = new ttypes.DisplaySubjectParam();
        this.displaySubjectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_delete4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_delete4dis_args');
  if (this.displaySubjectParam !== null && this.displaySubjectParam !== undefined) {
    output.writeFieldBegin('displaySubjectParam', Thrift.Type.STRUCT, 1);
    this.displaySubjectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_delete4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_delete4dis_result.prototype = {};
SubjectServ_delete4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_delete4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_delete4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getById4dis_args = function(args) {
  this.displaySubjectParam = null;
  if (args) {
    if (args.displaySubjectParam !== undefined) {
      this.displaySubjectParam = args.displaySubjectParam;
    }
  }
};
SubjectServ_getById4dis_args.prototype = {};
SubjectServ_getById4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectParam = new ttypes.DisplaySubjectParam();
        this.displaySubjectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getById4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getById4dis_args');
  if (this.displaySubjectParam !== null && this.displaySubjectParam !== undefined) {
    output.writeFieldBegin('displaySubjectParam', Thrift.Type.STRUCT, 1);
    this.displaySubjectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getById4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getById4dis_result.prototype = {};
SubjectServ_getById4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DisplaySubjectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getById4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getById4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSubTree4dis_args = function(args) {
  this.displaySubjectParam = null;
  if (args) {
    if (args.displaySubjectParam !== undefined) {
      this.displaySubjectParam = args.displaySubjectParam;
    }
  }
};
SubjectServ_getSubTree4dis_args.prototype = {};
SubjectServ_getSubTree4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectParam = new ttypes.DisplaySubjectParam();
        this.displaySubjectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSubTree4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSubTree4dis_args');
  if (this.displaySubjectParam !== null && this.displaySubjectParam !== undefined) {
    output.writeFieldBegin('displaySubjectParam', Thrift.Type.STRUCT, 1);
    this.displaySubjectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSubTree4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getSubTree4dis_result.prototype = {};
SubjectServ_getSubTree4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DisplaySubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSubTree4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSubTree4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSuperTree4dis_args = function(args) {
  this.displaySubjectParam = null;
  if (args) {
    if (args.displaySubjectParam !== undefined) {
      this.displaySubjectParam = args.displaySubjectParam;
    }
  }
};
SubjectServ_getSuperTree4dis_args.prototype = {};
SubjectServ_getSuperTree4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.displaySubjectParam = new ttypes.DisplaySubjectParam();
        this.displaySubjectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSuperTree4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSuperTree4dis_args');
  if (this.displaySubjectParam !== null && this.displaySubjectParam !== undefined) {
    output.writeFieldBegin('displaySubjectParam', Thrift.Type.STRUCT, 1);
    this.displaySubjectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getSuperTree4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getSuperTree4dis_result.prototype = {};
SubjectServ_getSuperTree4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DisplaySubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getSuperTree4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getSuperTree4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getDisplayIdsBySubjectId_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
SubjectServ_getDisplayIdsBySubjectId_args.prototype = {};
SubjectServ_getDisplayIdsBySubjectId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getDisplayIdsBySubjectId_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getDisplayIdsBySubjectId_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 1);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getDisplayIdsBySubjectId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getDisplayIdsBySubjectId_result.prototype = {};
SubjectServ_getDisplayIdsBySubjectId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getDisplayIdsBySubjectId_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getDisplayIdsBySubjectId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getWholeTreeList4dis_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
SubjectServ_getWholeTreeList4dis_args.prototype = {};
SubjectServ_getWholeTreeList4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getWholeTreeList4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getWholeTreeList4dis_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_getWholeTreeList4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_getWholeTreeList4dis_result.prototype = {};
SubjectServ_getWholeTreeList4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DisplaySubjectTreeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_getWholeTreeList4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_getWholeTreeList4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_querySubjects4dis_args = function(args) {
  this.queryParam = null;
  this.page = null;
  if (args) {
    if (args.queryParam !== undefined) {
      this.queryParam = args.queryParam;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SubjectServ_querySubjects4dis_args.prototype = {};
SubjectServ_querySubjects4dis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryParam = new ttypes.DisplaySubjectQueryParam();
        this.queryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_querySubjects4dis_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_querySubjects4dis_args');
  if (this.queryParam !== null && this.queryParam !== undefined) {
    output.writeFieldBegin('queryParam', Thrift.Type.STRUCT, 1);
    this.queryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 2);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_querySubjects4dis_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_querySubjects4dis_result.prototype = {};
SubjectServ_querySubjects4dis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DisplaySubjectQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_querySubjects4dis_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_querySubjects4dis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_addChannel_args = function(args) {
  this.channel = null;
  if (args) {
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
SubjectServ_addChannel_args.prototype = {};
SubjectServ_addChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new ttypes.DisplaySubjectChannelInfo();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_addChannel_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_addChannel_args');
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 1);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_addChannel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_addChannel_result.prototype = {};
SubjectServ_addChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_addChannel_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_addChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_updateChannel_args = function(args) {
  this.channel = null;
  if (args) {
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
SubjectServ_updateChannel_args.prototype = {};
SubjectServ_updateChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new ttypes.DisplaySubjectChannelInfo();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_updateChannel_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_updateChannel_args');
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 1);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_updateChannel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_updateChannel_result.prototype = {};
SubjectServ_updateChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_updateChannel_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_updateChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_deleteChannelById_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
  }
};
SubjectServ_deleteChannelById_args.prototype = {};
SubjectServ_deleteChannelById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.channelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_deleteChannelById_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_deleteChannelById_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.I32, 1);
    output.writeI32(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_deleteChannelById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_deleteChannelById_result.prototype = {};
SubjectServ_deleteChannelById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_deleteChannelById_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_deleteChannelById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_queryChannels_args = function(args) {
  this.queryParam = null;
  this.page = null;
  if (args) {
    if (args.queryParam !== undefined) {
      this.queryParam = args.queryParam;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SubjectServ_queryChannels_args.prototype = {};
SubjectServ_queryChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryParam = new ttypes.DisplaySubjectChannelQueryParam();
        this.queryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_queryChannels_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_queryChannels_args');
  if (this.queryParam !== null && this.queryParam !== undefined) {
    output.writeFieldBegin('queryParam', Thrift.Type.STRUCT, 1);
    this.queryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 2);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_queryChannels_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_queryChannels_result.prototype = {};
SubjectServ_queryChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DisplaySubjectChannelQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_queryChannels_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_queryChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_addRelation_args = function(args) {
  this.relation = null;
  if (args) {
    if (args.relation !== undefined) {
      this.relation = args.relation;
    }
  }
};
SubjectServ_addRelation_args.prototype = {};
SubjectServ_addRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new ttypes.SubjectRefDisplayInfo();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_addRelation_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_addRelation_args');
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 1);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_addRelation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_addRelation_result.prototype = {};
SubjectServ_addRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_addRelation_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_addRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_deleteRelation_args = function(args) {
  this.relation = null;
  if (args) {
    if (args.relation !== undefined) {
      this.relation = args.relation;
    }
  }
};
SubjectServ_deleteRelation_args.prototype = {};
SubjectServ_deleteRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new ttypes.SubjectRefDisplayInfo();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_deleteRelation_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_deleteRelation_args');
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 1);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_deleteRelation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_deleteRelation_result.prototype = {};
SubjectServ_deleteRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_deleteRelation_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_deleteRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_querySubjectsRelation_args = function(args) {
  this.displayId = null;
  this.page = null;
  if (args) {
    if (args.displayId !== undefined) {
      this.displayId = args.displayId;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SubjectServ_querySubjectsRelation_args.prototype = {};
SubjectServ_querySubjectsRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.displayId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.Page();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_querySubjectsRelation_args.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_querySubjectsRelation_args');
  if (this.displayId !== null && this.displayId !== undefined) {
    output.writeFieldBegin('displayId', Thrift.Type.I32, 1);
    output.writeI32(this.displayId);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 2);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServ_querySubjectsRelation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SubjectServ_querySubjectsRelation_result.prototype = {};
SubjectServ_querySubjectsRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SubjectQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubjectServ_querySubjectsRelation_result.prototype.write = function(output) {
  output.writeStructBegin('SubjectServ_querySubjectsRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubjectServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SubjectServClient.prototype = {};
SubjectServClient.prototype.seqid = function() { return this._seqid; }
SubjectServClient.prototype.new_seqid = function() { return this._seqid += 1; }
SubjectServClient.prototype.add = function(subject, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add(subject);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add(subject);
  }
};

SubjectServClient.prototype.send_add = function(subject) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_add_args();
  args.subject = subject;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_add = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_add_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add failed: unknown result');
};
SubjectServClient.prototype.update = function(subject, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update(subject);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update(subject);
  }
};

SubjectServClient.prototype.send_update = function(subject) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_update_args();
  args.subject = subject;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_update = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_update_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update failed: unknown result');
};
SubjectServClient.prototype.deleteById = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteById(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteById(subjectId);
  }
};

SubjectServClient.prototype.send_deleteById = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteById', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_deleteById_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_deleteById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_deleteById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteById failed: unknown result');
};
SubjectServClient.prototype.getById = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getById(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getById(subjectId);
  }
};

SubjectServClient.prototype.send_getById = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getById', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getById_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getById failed: unknown result');
};
SubjectServClient.prototype.getSubTree = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubTree(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubTree(subjectId);
  }
};

SubjectServClient.prototype.send_getSubTree = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubTree', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getSubTree_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getSubTree = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getSubTree_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubTree failed: unknown result');
};
SubjectServClient.prototype.getSubTreeForManage = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubTreeForManage(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubTreeForManage(subjectId);
  }
};

SubjectServClient.prototype.send_getSubTreeForManage = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubTreeForManage', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getSubTreeForManage_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getSubTreeForManage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getSubTreeForManage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubTreeForManage failed: unknown result');
};
SubjectServClient.prototype.getSuperTree = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSuperTree(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSuperTree(subjectId);
  }
};

SubjectServClient.prototype.send_getSuperTree = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSuperTree', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getSuperTree_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getSuperTree = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getSuperTree_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSuperTree failed: unknown result');
};
SubjectServClient.prototype.getLeavesById = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLeavesById(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLeavesById(subjectId);
  }
};

SubjectServClient.prototype.send_getLeavesById = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLeavesById', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getLeavesById_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getLeavesById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getLeavesById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLeavesById failed: unknown result');
};
SubjectServClient.prototype.getWholeTree = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getWholeTree();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getWholeTree();
  }
};

SubjectServClient.prototype.send_getWholeTree = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWholeTree', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getWholeTree_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getWholeTree = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getWholeTree_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWholeTree failed: unknown result');
};
SubjectServClient.prototype.getWholeTreeList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getWholeTreeList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getWholeTreeList();
  }
};

SubjectServClient.prototype.send_getWholeTreeList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWholeTreeList', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getWholeTreeList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getWholeTreeList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getWholeTreeList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWholeTreeList failed: unknown result');
};
SubjectServClient.prototype.releaseSubject = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseSubject(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseSubject(subjectId);
  }
};

SubjectServClient.prototype.send_releaseSubject = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseSubject', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_releaseSubject_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_releaseSubject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_releaseSubject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('releaseSubject failed: unknown result');
};
SubjectServClient.prototype.querySubjects = function(queryParam, page, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySubjects(queryParam, page);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySubjects(queryParam, page);
  }
};

SubjectServClient.prototype.send_querySubjects = function(queryParam, page) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySubjects', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_querySubjects_args();
  args.queryParam = queryParam;
  args.page = page;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_querySubjects = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_querySubjects_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySubjects failed: unknown result');
};
SubjectServClient.prototype.add4dis = function(displaySubjectParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add4dis(displaySubjectParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add4dis(displaySubjectParam);
  }
};

SubjectServClient.prototype.send_add4dis = function(displaySubjectParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_add4dis_args();
  args.displaySubjectParam = displaySubjectParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_add4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_add4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add4dis failed: unknown result');
};
SubjectServClient.prototype.update4dis = function(displaySubjectParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update4dis(displaySubjectParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update4dis(displaySubjectParam);
  }
};

SubjectServClient.prototype.send_update4dis = function(displaySubjectParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_update4dis_args();
  args.displaySubjectParam = displaySubjectParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_update4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_update4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update4dis failed: unknown result');
};
SubjectServClient.prototype.delete4dis = function(displaySubjectParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete4dis(displaySubjectParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete4dis(displaySubjectParam);
  }
};

SubjectServClient.prototype.send_delete4dis = function(displaySubjectParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_delete4dis_args();
  args.displaySubjectParam = displaySubjectParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_delete4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_delete4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delete4dis failed: unknown result');
};
SubjectServClient.prototype.getById4dis = function(displaySubjectParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getById4dis(displaySubjectParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getById4dis(displaySubjectParam);
  }
};

SubjectServClient.prototype.send_getById4dis = function(displaySubjectParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getById4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getById4dis_args();
  args.displaySubjectParam = displaySubjectParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getById4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getById4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getById4dis failed: unknown result');
};
SubjectServClient.prototype.getSubTree4dis = function(displaySubjectParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubTree4dis(displaySubjectParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubTree4dis(displaySubjectParam);
  }
};

SubjectServClient.prototype.send_getSubTree4dis = function(displaySubjectParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubTree4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getSubTree4dis_args();
  args.displaySubjectParam = displaySubjectParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getSubTree4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getSubTree4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubTree4dis failed: unknown result');
};
SubjectServClient.prototype.getSuperTree4dis = function(displaySubjectParam, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSuperTree4dis(displaySubjectParam);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSuperTree4dis(displaySubjectParam);
  }
};

SubjectServClient.prototype.send_getSuperTree4dis = function(displaySubjectParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSuperTree4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getSuperTree4dis_args();
  args.displaySubjectParam = displaySubjectParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getSuperTree4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getSuperTree4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSuperTree4dis failed: unknown result');
};
SubjectServClient.prototype.getDisplayIdsBySubjectId = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDisplayIdsBySubjectId(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDisplayIdsBySubjectId(subjectId);
  }
};

SubjectServClient.prototype.send_getDisplayIdsBySubjectId = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDisplayIdsBySubjectId', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getDisplayIdsBySubjectId_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getDisplayIdsBySubjectId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getDisplayIdsBySubjectId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDisplayIdsBySubjectId failed: unknown result');
};
SubjectServClient.prototype.getWholeTreeList4dis = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getWholeTreeList4dis(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getWholeTreeList4dis(type);
  }
};

SubjectServClient.prototype.send_getWholeTreeList4dis = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWholeTreeList4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_getWholeTreeList4dis_args();
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_getWholeTreeList4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_getWholeTreeList4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWholeTreeList4dis failed: unknown result');
};
SubjectServClient.prototype.querySubjects4dis = function(queryParam, page, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySubjects4dis(queryParam, page);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySubjects4dis(queryParam, page);
  }
};

SubjectServClient.prototype.send_querySubjects4dis = function(queryParam, page) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySubjects4dis', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_querySubjects4dis_args();
  args.queryParam = queryParam;
  args.page = page;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_querySubjects4dis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_querySubjects4dis_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySubjects4dis failed: unknown result');
};
SubjectServClient.prototype.addChannel = function(channel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addChannel(channel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addChannel(channel);
  }
};

SubjectServClient.prototype.send_addChannel = function(channel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_addChannel_args();
  args.channel = channel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_addChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_addChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addChannel failed: unknown result');
};
SubjectServClient.prototype.updateChannel = function(channel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChannel(channel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChannel(channel);
  }
};

SubjectServClient.prototype.send_updateChannel = function(channel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_updateChannel_args();
  args.channel = channel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_updateChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_updateChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChannel failed: unknown result');
};
SubjectServClient.prototype.deleteChannelById = function(channelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteChannelById(channelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteChannelById(channelId);
  }
};

SubjectServClient.prototype.send_deleteChannelById = function(channelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteChannelById', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_deleteChannelById_args();
  args.channelId = channelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_deleteChannelById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_deleteChannelById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteChannelById failed: unknown result');
};
SubjectServClient.prototype.queryChannels = function(queryParam, page, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryChannels(queryParam, page);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryChannels(queryParam, page);
  }
};

SubjectServClient.prototype.send_queryChannels = function(queryParam, page) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryChannels', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_queryChannels_args();
  args.queryParam = queryParam;
  args.page = page;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_queryChannels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_queryChannels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryChannels failed: unknown result');
};
SubjectServClient.prototype.addRelation = function(relation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRelation(relation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRelation(relation);
  }
};

SubjectServClient.prototype.send_addRelation = function(relation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addRelation', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_addRelation_args();
  args.relation = relation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_addRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_addRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addRelation failed: unknown result');
};
SubjectServClient.prototype.deleteRelation = function(relation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteRelation(relation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteRelation(relation);
  }
};

SubjectServClient.prototype.send_deleteRelation = function(relation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteRelation', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_deleteRelation_args();
  args.relation = relation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_deleteRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_deleteRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteRelation failed: unknown result');
};
SubjectServClient.prototype.querySubjectsRelation = function(displayId, page, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySubjectsRelation(displayId, page);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySubjectsRelation(displayId, page);
  }
};

SubjectServClient.prototype.send_querySubjectsRelation = function(displayId, page) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySubjectsRelation', Thrift.MessageType.CALL, this.seqid());
  var args = new SubjectServ_querySubjectsRelation_args();
  args.displayId = displayId;
  args.page = page;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SubjectServClient.prototype.recv_querySubjectsRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SubjectServ_querySubjectsRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySubjectsRelation failed: unknown result');
};
SubjectServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SubjectServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SubjectServProcessor.prototype.process_add = function(seqid, input, output) {
  var args = new SubjectServ_add_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add.length === 1) {
    Q.fcall(this._handler.add, args.subject)
      .then(function(result) {
        var result = new SubjectServ_add_result({success: result});
        output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_add_result(err);
        output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add(args.subject,  function (err, result) {
      var result = new SubjectServ_add_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_update = function(seqid, input, output) {
  var args = new SubjectServ_update_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update.length === 1) {
    Q.fcall(this._handler.update, args.subject)
      .then(function(result) {
        var result = new SubjectServ_update_result({success: result});
        output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_update_result(err);
        output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update(args.subject,  function (err, result) {
      var result = new SubjectServ_update_result((err != null ? err : {success: result}));
      output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_deleteById = function(seqid, input, output) {
  var args = new SubjectServ_deleteById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteById.length === 1) {
    Q.fcall(this._handler.deleteById, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_deleteById_result({success: result});
        output.writeMessageBegin("deleteById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_deleteById_result(err);
        output.writeMessageBegin("deleteById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteById(args.subjectId,  function (err, result) {
      var result = new SubjectServ_deleteById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getById = function(seqid, input, output) {
  var args = new SubjectServ_getById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getById.length === 1) {
    Q.fcall(this._handler.getById, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_getById_result({success: result});
        output.writeMessageBegin("getById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getById_result(err);
        output.writeMessageBegin("getById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getById(args.subjectId,  function (err, result) {
      var result = new SubjectServ_getById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getSubTree = function(seqid, input, output) {
  var args = new SubjectServ_getSubTree_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubTree.length === 1) {
    Q.fcall(this._handler.getSubTree, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_getSubTree_result({success: result});
        output.writeMessageBegin("getSubTree", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getSubTree_result(err);
        output.writeMessageBegin("getSubTree", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubTree(args.subjectId,  function (err, result) {
      var result = new SubjectServ_getSubTree_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubTree", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getSubTreeForManage = function(seqid, input, output) {
  var args = new SubjectServ_getSubTreeForManage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubTreeForManage.length === 1) {
    Q.fcall(this._handler.getSubTreeForManage, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_getSubTreeForManage_result({success: result});
        output.writeMessageBegin("getSubTreeForManage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getSubTreeForManage_result(err);
        output.writeMessageBegin("getSubTreeForManage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubTreeForManage(args.subjectId,  function (err, result) {
      var result = new SubjectServ_getSubTreeForManage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubTreeForManage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getSuperTree = function(seqid, input, output) {
  var args = new SubjectServ_getSuperTree_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSuperTree.length === 1) {
    Q.fcall(this._handler.getSuperTree, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_getSuperTree_result({success: result});
        output.writeMessageBegin("getSuperTree", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getSuperTree_result(err);
        output.writeMessageBegin("getSuperTree", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSuperTree(args.subjectId,  function (err, result) {
      var result = new SubjectServ_getSuperTree_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSuperTree", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getLeavesById = function(seqid, input, output) {
  var args = new SubjectServ_getLeavesById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLeavesById.length === 1) {
    Q.fcall(this._handler.getLeavesById, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_getLeavesById_result({success: result});
        output.writeMessageBegin("getLeavesById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getLeavesById_result(err);
        output.writeMessageBegin("getLeavesById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLeavesById(args.subjectId,  function (err, result) {
      var result = new SubjectServ_getLeavesById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getLeavesById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getWholeTree = function(seqid, input, output) {
  var args = new SubjectServ_getWholeTree_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getWholeTree.length === 0) {
    Q.fcall(this._handler.getWholeTree)
      .then(function(result) {
        var result = new SubjectServ_getWholeTree_result({success: result});
        output.writeMessageBegin("getWholeTree", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getWholeTree_result(err);
        output.writeMessageBegin("getWholeTree", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getWholeTree( function (err, result) {
      var result = new SubjectServ_getWholeTree_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getWholeTree", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getWholeTreeList = function(seqid, input, output) {
  var args = new SubjectServ_getWholeTreeList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getWholeTreeList.length === 0) {
    Q.fcall(this._handler.getWholeTreeList)
      .then(function(result) {
        var result = new SubjectServ_getWholeTreeList_result({success: result});
        output.writeMessageBegin("getWholeTreeList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getWholeTreeList_result(err);
        output.writeMessageBegin("getWholeTreeList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getWholeTreeList( function (err, result) {
      var result = new SubjectServ_getWholeTreeList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getWholeTreeList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_releaseSubject = function(seqid, input, output) {
  var args = new SubjectServ_releaseSubject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseSubject.length === 1) {
    Q.fcall(this._handler.releaseSubject, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_releaseSubject_result({success: result});
        output.writeMessageBegin("releaseSubject", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_releaseSubject_result(err);
        output.writeMessageBegin("releaseSubject", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseSubject(args.subjectId,  function (err, result) {
      var result = new SubjectServ_releaseSubject_result((err != null ? err : {success: result}));
      output.writeMessageBegin("releaseSubject", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_querySubjects = function(seqid, input, output) {
  var args = new SubjectServ_querySubjects_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySubjects.length === 2) {
    Q.fcall(this._handler.querySubjects, args.queryParam, args.page)
      .then(function(result) {
        var result = new SubjectServ_querySubjects_result({success: result});
        output.writeMessageBegin("querySubjects", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_querySubjects_result(err);
        output.writeMessageBegin("querySubjects", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySubjects(args.queryParam, args.page,  function (err, result) {
      var result = new SubjectServ_querySubjects_result((err != null ? err : {success: result}));
      output.writeMessageBegin("querySubjects", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_add4dis = function(seqid, input, output) {
  var args = new SubjectServ_add4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add4dis.length === 1) {
    Q.fcall(this._handler.add4dis, args.displaySubjectParam)
      .then(function(result) {
        var result = new SubjectServ_add4dis_result({success: result});
        output.writeMessageBegin("add4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_add4dis_result(err);
        output.writeMessageBegin("add4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add4dis(args.displaySubjectParam,  function (err, result) {
      var result = new SubjectServ_add4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_update4dis = function(seqid, input, output) {
  var args = new SubjectServ_update4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update4dis.length === 1) {
    Q.fcall(this._handler.update4dis, args.displaySubjectParam)
      .then(function(result) {
        var result = new SubjectServ_update4dis_result({success: result});
        output.writeMessageBegin("update4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_update4dis_result(err);
        output.writeMessageBegin("update4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update4dis(args.displaySubjectParam,  function (err, result) {
      var result = new SubjectServ_update4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("update4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_delete4dis = function(seqid, input, output) {
  var args = new SubjectServ_delete4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete4dis.length === 1) {
    Q.fcall(this._handler.delete4dis, args.displaySubjectParam)
      .then(function(result) {
        var result = new SubjectServ_delete4dis_result({success: result});
        output.writeMessageBegin("delete4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_delete4dis_result(err);
        output.writeMessageBegin("delete4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete4dis(args.displaySubjectParam,  function (err, result) {
      var result = new SubjectServ_delete4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("delete4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getById4dis = function(seqid, input, output) {
  var args = new SubjectServ_getById4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getById4dis.length === 1) {
    Q.fcall(this._handler.getById4dis, args.displaySubjectParam)
      .then(function(result) {
        var result = new SubjectServ_getById4dis_result({success: result});
        output.writeMessageBegin("getById4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getById4dis_result(err);
        output.writeMessageBegin("getById4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getById4dis(args.displaySubjectParam,  function (err, result) {
      var result = new SubjectServ_getById4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getById4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getSubTree4dis = function(seqid, input, output) {
  var args = new SubjectServ_getSubTree4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubTree4dis.length === 1) {
    Q.fcall(this._handler.getSubTree4dis, args.displaySubjectParam)
      .then(function(result) {
        var result = new SubjectServ_getSubTree4dis_result({success: result});
        output.writeMessageBegin("getSubTree4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getSubTree4dis_result(err);
        output.writeMessageBegin("getSubTree4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubTree4dis(args.displaySubjectParam,  function (err, result) {
      var result = new SubjectServ_getSubTree4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubTree4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getSuperTree4dis = function(seqid, input, output) {
  var args = new SubjectServ_getSuperTree4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSuperTree4dis.length === 1) {
    Q.fcall(this._handler.getSuperTree4dis, args.displaySubjectParam)
      .then(function(result) {
        var result = new SubjectServ_getSuperTree4dis_result({success: result});
        output.writeMessageBegin("getSuperTree4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getSuperTree4dis_result(err);
        output.writeMessageBegin("getSuperTree4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSuperTree4dis(args.displaySubjectParam,  function (err, result) {
      var result = new SubjectServ_getSuperTree4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSuperTree4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getDisplayIdsBySubjectId = function(seqid, input, output) {
  var args = new SubjectServ_getDisplayIdsBySubjectId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDisplayIdsBySubjectId.length === 1) {
    Q.fcall(this._handler.getDisplayIdsBySubjectId, args.subjectId)
      .then(function(result) {
        var result = new SubjectServ_getDisplayIdsBySubjectId_result({success: result});
        output.writeMessageBegin("getDisplayIdsBySubjectId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getDisplayIdsBySubjectId_result(err);
        output.writeMessageBegin("getDisplayIdsBySubjectId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDisplayIdsBySubjectId(args.subjectId,  function (err, result) {
      var result = new SubjectServ_getDisplayIdsBySubjectId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getDisplayIdsBySubjectId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_getWholeTreeList4dis = function(seqid, input, output) {
  var args = new SubjectServ_getWholeTreeList4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getWholeTreeList4dis.length === 1) {
    Q.fcall(this._handler.getWholeTreeList4dis, args.type)
      .then(function(result) {
        var result = new SubjectServ_getWholeTreeList4dis_result({success: result});
        output.writeMessageBegin("getWholeTreeList4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_getWholeTreeList4dis_result(err);
        output.writeMessageBegin("getWholeTreeList4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getWholeTreeList4dis(args.type,  function (err, result) {
      var result = new SubjectServ_getWholeTreeList4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getWholeTreeList4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_querySubjects4dis = function(seqid, input, output) {
  var args = new SubjectServ_querySubjects4dis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySubjects4dis.length === 2) {
    Q.fcall(this._handler.querySubjects4dis, args.queryParam, args.page)
      .then(function(result) {
        var result = new SubjectServ_querySubjects4dis_result({success: result});
        output.writeMessageBegin("querySubjects4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_querySubjects4dis_result(err);
        output.writeMessageBegin("querySubjects4dis", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySubjects4dis(args.queryParam, args.page,  function (err, result) {
      var result = new SubjectServ_querySubjects4dis_result((err != null ? err : {success: result}));
      output.writeMessageBegin("querySubjects4dis", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_addChannel = function(seqid, input, output) {
  var args = new SubjectServ_addChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addChannel.length === 1) {
    Q.fcall(this._handler.addChannel, args.channel)
      .then(function(result) {
        var result = new SubjectServ_addChannel_result({success: result});
        output.writeMessageBegin("addChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_addChannel_result(err);
        output.writeMessageBegin("addChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addChannel(args.channel,  function (err, result) {
      var result = new SubjectServ_addChannel_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addChannel", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_updateChannel = function(seqid, input, output) {
  var args = new SubjectServ_updateChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChannel.length === 1) {
    Q.fcall(this._handler.updateChannel, args.channel)
      .then(function(result) {
        var result = new SubjectServ_updateChannel_result({success: result});
        output.writeMessageBegin("updateChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_updateChannel_result(err);
        output.writeMessageBegin("updateChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChannel(args.channel,  function (err, result) {
      var result = new SubjectServ_updateChannel_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateChannel", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_deleteChannelById = function(seqid, input, output) {
  var args = new SubjectServ_deleteChannelById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteChannelById.length === 1) {
    Q.fcall(this._handler.deleteChannelById, args.channelId)
      .then(function(result) {
        var result = new SubjectServ_deleteChannelById_result({success: result});
        output.writeMessageBegin("deleteChannelById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_deleteChannelById_result(err);
        output.writeMessageBegin("deleteChannelById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteChannelById(args.channelId,  function (err, result) {
      var result = new SubjectServ_deleteChannelById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteChannelById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_queryChannels = function(seqid, input, output) {
  var args = new SubjectServ_queryChannels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryChannels.length === 2) {
    Q.fcall(this._handler.queryChannels, args.queryParam, args.page)
      .then(function(result) {
        var result = new SubjectServ_queryChannels_result({success: result});
        output.writeMessageBegin("queryChannels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_queryChannels_result(err);
        output.writeMessageBegin("queryChannels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryChannels(args.queryParam, args.page,  function (err, result) {
      var result = new SubjectServ_queryChannels_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryChannels", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_addRelation = function(seqid, input, output) {
  var args = new SubjectServ_addRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRelation.length === 1) {
    Q.fcall(this._handler.addRelation, args.relation)
      .then(function(result) {
        var result = new SubjectServ_addRelation_result({success: result});
        output.writeMessageBegin("addRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_addRelation_result(err);
        output.writeMessageBegin("addRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addRelation(args.relation,  function (err, result) {
      var result = new SubjectServ_addRelation_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addRelation", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_deleteRelation = function(seqid, input, output) {
  var args = new SubjectServ_deleteRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteRelation.length === 1) {
    Q.fcall(this._handler.deleteRelation, args.relation)
      .then(function(result) {
        var result = new SubjectServ_deleteRelation_result({success: result});
        output.writeMessageBegin("deleteRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_deleteRelation_result(err);
        output.writeMessageBegin("deleteRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteRelation(args.relation,  function (err, result) {
      var result = new SubjectServ_deleteRelation_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteRelation", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SubjectServProcessor.prototype.process_querySubjectsRelation = function(seqid, input, output) {
  var args = new SubjectServ_querySubjectsRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySubjectsRelation.length === 2) {
    Q.fcall(this._handler.querySubjectsRelation, args.displayId, args.page)
      .then(function(result) {
        var result = new SubjectServ_querySubjectsRelation_result({success: result});
        output.writeMessageBegin("querySubjectsRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SubjectServ_querySubjectsRelation_result(err);
        output.writeMessageBegin("querySubjectsRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySubjectsRelation(args.displayId, args.page,  function (err, result) {
      var result = new SubjectServ_querySubjectsRelation_result((err != null ? err : {success: result}));
      output.writeMessageBegin("querySubjectsRelation", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

