//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
FileParam = module.exports.FileParam = function(args) {
  this.productType = null;
  this.DataType = null;
  this.ExpDate_Flag = null;
  this.CardNumber = null;
  this.StartDate = null;
  this.excelKeyUrl = null;
  this.notEncryptFlag = null;
  this.isTestFlag = null;
  this.sellerName = null;
  if (args) {
    if (args.productType !== undefined) {
      this.productType = args.productType;
    }
    if (args.DataType !== undefined) {
      this.DataType = args.DataType;
    }
    if (args.ExpDate_Flag !== undefined) {
      this.ExpDate_Flag = args.ExpDate_Flag;
    }
    if (args.CardNumber !== undefined) {
      this.CardNumber = args.CardNumber;
    }
    if (args.StartDate !== undefined) {
      this.StartDate = args.StartDate;
    }
    if (args.excelKeyUrl !== undefined) {
      this.excelKeyUrl = args.excelKeyUrl;
    }
    if (args.notEncryptFlag !== undefined) {
      this.notEncryptFlag = args.notEncryptFlag;
    }
    if (args.isTestFlag !== undefined) {
      this.isTestFlag = args.isTestFlag;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
  }
};
FileParam.prototype = {};
FileParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.productType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.DataType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.ExpDate_Flag = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.I64) {
          this.CardNumber = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.STRING) {
          this.StartDate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.STRING) {
          this.excelKeyUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.notEncryptFlag = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
      case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.isTestFlag = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
      case 9:
        if (ftype == Thrift.Type.STRING) {
          this.sellerName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileParam.prototype.write = function(output) {
  output.writeStructBegin('FileParam');
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 1);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.DataType !== null && this.DataType !== undefined) {
    output.writeFieldBegin('DataType', Thrift.Type.STRING, 2);
    output.writeString(this.DataType);
    output.writeFieldEnd();
  }
  if (this.ExpDate_Flag !== null && this.ExpDate_Flag !== undefined) {
    output.writeFieldBegin('ExpDate_Flag', Thrift.Type.STRING, 3);
    output.writeString(this.ExpDate_Flag);
    output.writeFieldEnd();
  }
  if (this.CardNumber !== null && this.CardNumber !== undefined) {
    output.writeFieldBegin('CardNumber', Thrift.Type.I64, 4);
    output.writeI64(this.CardNumber);
    output.writeFieldEnd();
  }
  if (this.StartDate !== null && this.StartDate !== undefined) {
    output.writeFieldBegin('StartDate', Thrift.Type.STRING, 5);
    output.writeString(this.StartDate);
    output.writeFieldEnd();
  }
  if (this.excelKeyUrl !== null && this.excelKeyUrl !== undefined) {
    output.writeFieldBegin('excelKeyUrl', Thrift.Type.STRING, 6);
    output.writeString(this.excelKeyUrl);
    output.writeFieldEnd();
  }
  if (this.notEncryptFlag !== null && this.notEncryptFlag !== undefined) {
    output.writeFieldBegin('notEncryptFlag', Thrift.Type.BOOL, 7);
    output.writeBool(this.notEncryptFlag);
    output.writeFieldEnd();
  }
  if (this.isTestFlag !== null && this.isTestFlag !== undefined) {
    output.writeFieldBegin('isTestFlag', Thrift.Type.BOOL, 8);
    output.writeBool(this.isTestFlag);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 9);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuditParam = module.exports.AuditParam = function(args) {
  this.id = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
AuditParam.prototype = {};
AuditParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuditParam.prototype.write = function(output) {
  output.writeStructBegin('AuditParam');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryConditions = module.exports.QueryConditions = function(args) {
  this.sellerName = null;
  this.productName = null;
  this.status = null;
  if (args) {
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
QueryConditions.prototype = {};
QueryConditions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sellerName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.productName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryConditions.prototype.write = function(output) {
  output.writeStructBegin('QueryConditions');
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 1);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyCard = module.exports.ThirdPartyCard = function(args) {
  this.id = null;
  this.orderId = null;
  this.sellerName = null;
  this.productName = null;
  this.productNo = null;
  this.faceValue = null;
  this.cardNumber = null;
  this.applyTime = null;
  this.approveTime = null;
  this.status = null;
  this.expData = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.sellerName !== undefined) {
      this.sellerName = args.sellerName;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.productNo !== undefined) {
      this.productNo = args.productNo;
    }
    if (args.faceValue !== undefined) {
      this.faceValue = args.faceValue;
    }
    if (args.cardNumber !== undefined) {
      this.cardNumber = args.cardNumber;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.approveTime !== undefined) {
      this.approveTime = args.approveTime;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.expData !== undefined) {
      this.expData = args.expData;
    }
  }
};
ThirdPartyCard.prototype = {};
ThirdPartyCard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.orderId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sellerName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.productName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.STRING) {
          this.productNo = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.I32) {
          this.faceValue = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 7:
        if (ftype == Thrift.Type.I32) {
          this.cardNumber = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 8:
        if (ftype == Thrift.Type.STRING) {
          this.applyTime = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 9:
        if (ftype == Thrift.Type.STRING) {
          this.approveTime = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 10:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 11:
        if (ftype == Thrift.Type.STRING) {
          this.expData = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyCard.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyCard');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 3);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 4);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.productNo !== null && this.productNo !== undefined) {
    output.writeFieldBegin('productNo', Thrift.Type.STRING, 5);
    output.writeString(this.productNo);
    output.writeFieldEnd();
  }
  if (this.faceValue !== null && this.faceValue !== undefined) {
    output.writeFieldBegin('faceValue', Thrift.Type.I32, 6);
    output.writeI32(this.faceValue);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.I32, 7);
    output.writeI32(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 8);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.approveTime !== null && this.approveTime !== undefined) {
    output.writeFieldBegin('approveTime', Thrift.Type.STRING, 9);
    output.writeString(this.approveTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 10);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.expData !== null && this.expData !== undefined) {
    output.writeFieldBegin('expData', Thrift.Type.STRING, 11);
    output.writeString(this.expData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdPartyCardResultList = module.exports.ThirdPartyCardResultList = function(args) {
  this.result = null;
  this.thirdPartyCards = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.thirdPartyCards !== undefined) {
      this.thirdPartyCards = args.thirdPartyCards;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ThirdPartyCardResultList.prototype = {};
ThirdPartyCardResultList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.result = new result_ttypes.Result();
          this.result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size0 = 0;
          var _rtmp34;
          this.thirdPartyCards = [];
          var _etype3 = 0;
          _rtmp34 = input.readListBegin();
          _etype3 = _rtmp34.etype;
          _size0 = _rtmp34.size;
          for (var _i5 = 0; _i5 < _size0; ++_i5)
          {
            var elem6 = null;
            elem6 = new ttypes.ThirdPartyCard();
            elem6.read(input);
            this.thirdPartyCards.push(elem6);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.pagination = new pagination_ttypes.Pagination();
          this.pagination.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdPartyCardResultList.prototype.write = function(output) {
  output.writeStructBegin('ThirdPartyCardResultList');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.thirdPartyCards !== null && this.thirdPartyCards !== undefined) {
    output.writeFieldBegin('thirdPartyCards', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.thirdPartyCards.length);
    for (var iter7 in this.thirdPartyCards)
    {
      if (this.thirdPartyCards.hasOwnProperty(iter7))
      {
        iter7 = this.thirdPartyCards[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Recharge = module.exports.Recharge = function(args) {
  this.id = null;
  this.orderId = null;
  this.userId = null;
  this.chargeType = null;
  this.chargeChannel = null;
  this.state1 = null;
  this.state2 = null;
  this.chargeReqdate = null;
  this.chargeNotifydate = null;
  this.chargeMoney = null;
  this.businessCode = null;
  this.chargeAddr = null;
  this.thirdOrderNo = null;
  this.blance = null;
  this.applyTime = null;
  this.chargeNumblance = null;
  this.createTime = null;
  this.updateTime = null;
  this.reqOutNo = null;
  this.company = null;
  this.flowno = null;
  this.ext1 = null;
  this.ext2 = null;
  this.ext3 = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chargeType !== undefined) {
      this.chargeType = args.chargeType;
    }
    if (args.chargeChannel !== undefined) {
      this.chargeChannel = args.chargeChannel;
    }
    if (args.state1 !== undefined) {
      this.state1 = args.state1;
    }
    if (args.state2 !== undefined) {
      this.state2 = args.state2;
    }
    if (args.chargeReqdate !== undefined) {
      this.chargeReqdate = args.chargeReqdate;
    }
    if (args.chargeNotifydate !== undefined) {
      this.chargeNotifydate = args.chargeNotifydate;
    }
    if (args.chargeMoney !== undefined) {
      this.chargeMoney = args.chargeMoney;
    }
    if (args.businessCode !== undefined) {
      this.businessCode = args.businessCode;
    }
    if (args.chargeAddr !== undefined) {
      this.chargeAddr = args.chargeAddr;
    }
    if (args.thirdOrderNo !== undefined) {
      this.thirdOrderNo = args.thirdOrderNo;
    }
    if (args.blance !== undefined) {
      this.blance = args.blance;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.chargeNumblance !== undefined) {
      this.chargeNumblance = args.chargeNumblance;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.reqOutNo !== undefined) {
      this.reqOutNo = args.reqOutNo;
    }
    if (args.company !== undefined) {
      this.company = args.company;
    }
    if (args.flowno !== undefined) {
      this.flowno = args.flowno;
    }
    if (args.ext1 !== undefined) {
      this.ext1 = args.ext1;
    }
    if (args.ext2 !== undefined) {
      this.ext2 = args.ext2;
    }
    if (args.ext3 !== undefined) {
      this.ext3 = args.ext3;
    }
  }
};
Recharge.prototype = {};
Recharge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.orderId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.I32) {
          this.userId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.I32) {
          this.chargeType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.I32) {
          this.chargeChannel = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.I32) {
          this.state1 = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 7:
        if (ftype == Thrift.Type.I32) {
          this.state2 = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 8:
        if (ftype == Thrift.Type.STRING) {
          this.chargeReqdate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 9:
        if (ftype == Thrift.Type.STRING) {
          this.chargeNotifydate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 10:
        if (ftype == Thrift.Type.STRING) {
          this.chargeMoney = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 11:
        if (ftype == Thrift.Type.STRING) {
          this.businessCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 12:
        if (ftype == Thrift.Type.STRING) {
          this.chargeAddr = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 13:
        if (ftype == Thrift.Type.STRING) {
          this.thirdOrderNo = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 14:
        if (ftype == Thrift.Type.STRING) {
          this.blance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 15:
        if (ftype == Thrift.Type.STRING) {
          this.applyTime = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 16:
        if (ftype == Thrift.Type.STRING) {
          this.chargeNumblance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 17:
        if (ftype == Thrift.Type.STRING) {
          this.createTime = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 18:
        if (ftype == Thrift.Type.STRING) {
          this.updateTime = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 19:
        if (ftype == Thrift.Type.STRING) {
          this.reqOutNo = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 20:
        if (ftype == Thrift.Type.STRING) {
          this.company = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 21:
        if (ftype == Thrift.Type.STRING) {
          this.flowno = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 22:
        if (ftype == Thrift.Type.STRING) {
          this.ext1 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 23:
        if (ftype == Thrift.Type.STRING) {
          this.ext2 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 24:
        if (ftype == Thrift.Type.STRING) {
          this.ext3 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Recharge.prototype.write = function(output) {
  output.writeStructBegin('Recharge');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.chargeType !== null && this.chargeType !== undefined) {
    output.writeFieldBegin('chargeType', Thrift.Type.I32, 4);
    output.writeI32(this.chargeType);
    output.writeFieldEnd();
  }
  if (this.chargeChannel !== null && this.chargeChannel !== undefined) {
    output.writeFieldBegin('chargeChannel', Thrift.Type.I32, 5);
    output.writeI32(this.chargeChannel);
    output.writeFieldEnd();
  }
  if (this.state1 !== null && this.state1 !== undefined) {
    output.writeFieldBegin('state1', Thrift.Type.I32, 6);
    output.writeI32(this.state1);
    output.writeFieldEnd();
  }
  if (this.state2 !== null && this.state2 !== undefined) {
    output.writeFieldBegin('state2', Thrift.Type.I32, 7);
    output.writeI32(this.state2);
    output.writeFieldEnd();
  }
  if (this.chargeReqdate !== null && this.chargeReqdate !== undefined) {
    output.writeFieldBegin('chargeReqdate', Thrift.Type.STRING, 8);
    output.writeString(this.chargeReqdate);
    output.writeFieldEnd();
  }
  if (this.chargeNotifydate !== null && this.chargeNotifydate !== undefined) {
    output.writeFieldBegin('chargeNotifydate', Thrift.Type.STRING, 9);
    output.writeString(this.chargeNotifydate);
    output.writeFieldEnd();
  }
  if (this.chargeMoney !== null && this.chargeMoney !== undefined) {
    output.writeFieldBegin('chargeMoney', Thrift.Type.STRING, 10);
    output.writeString(this.chargeMoney);
    output.writeFieldEnd();
  }
  if (this.businessCode !== null && this.businessCode !== undefined) {
    output.writeFieldBegin('businessCode', Thrift.Type.STRING, 11);
    output.writeString(this.businessCode);
    output.writeFieldEnd();
  }
  if (this.chargeAddr !== null && this.chargeAddr !== undefined) {
    output.writeFieldBegin('chargeAddr', Thrift.Type.STRING, 12);
    output.writeString(this.chargeAddr);
    output.writeFieldEnd();
  }
  if (this.thirdOrderNo !== null && this.thirdOrderNo !== undefined) {
    output.writeFieldBegin('thirdOrderNo', Thrift.Type.STRING, 13);
    output.writeString(this.thirdOrderNo);
    output.writeFieldEnd();
  }
  if (this.blance !== null && this.blance !== undefined) {
    output.writeFieldBegin('blance', Thrift.Type.STRING, 14);
    output.writeString(this.blance);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 15);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.chargeNumblance !== null && this.chargeNumblance !== undefined) {
    output.writeFieldBegin('chargeNumblance', Thrift.Type.STRING, 16);
    output.writeString(this.chargeNumblance);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 17);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 18);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.reqOutNo !== null && this.reqOutNo !== undefined) {
    output.writeFieldBegin('reqOutNo', Thrift.Type.STRING, 19);
    output.writeString(this.reqOutNo);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 20);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.flowno !== null && this.flowno !== undefined) {
    output.writeFieldBegin('flowno', Thrift.Type.STRING, 21);
    output.writeString(this.flowno);
    output.writeFieldEnd();
  }
  if (this.ext1 !== null && this.ext1 !== undefined) {
    output.writeFieldBegin('ext1', Thrift.Type.STRING, 22);
    output.writeString(this.ext1);
    output.writeFieldEnd();
  }
  if (this.ext2 !== null && this.ext2 !== undefined) {
    output.writeFieldBegin('ext2', Thrift.Type.STRING, 23);
    output.writeString(this.ext2);
    output.writeFieldEnd();
  }
  if (this.ext3 !== null && this.ext3 !== undefined) {
    output.writeFieldBegin('ext3', Thrift.Type.STRING, 24);
    output.writeString(this.ext3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RechargeListResult = module.exports.RechargeListResult = function(args) {
  this.result = null;
  this.recharges = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.recharges !== undefined) {
      this.recharges = args.recharges;
    }
  }
};
RechargeListResult.prototype = {};
RechargeListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.result = new result_ttypes.Result();
          this.result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size8 = 0;
          var _rtmp312;
          this.recharges = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13)
          {
            var elem14 = null;
            elem14 = new ttypes.Recharge();
            elem14.read(input);
            this.recharges.push(elem14);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RechargeListResult.prototype.write = function(output) {
  output.writeStructBegin('RechargeListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.recharges !== null && this.recharges !== undefined) {
    output.writeFieldBegin('recharges', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recharges.length);
    for (var iter15 in this.recharges)
    {
      if (this.recharges.hasOwnProperty(iter15))
      {
        iter15 = this.recharges[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotifyRecharge = module.exports.NotifyRecharge = function(args) {
  this.agtPhone = null;
  this.reqStreamId = null;
  this.state = null;
  this.sign = null;
  if (args) {
    if (args.agtPhone !== undefined) {
      this.agtPhone = args.agtPhone;
    }
    if (args.reqStreamId !== undefined) {
      this.reqStreamId = args.reqStreamId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
  }
};
NotifyRecharge.prototype = {};
NotifyRecharge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.agtPhone = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.reqStreamId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.state = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.sign = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotifyRecharge.prototype.write = function(output) {
  output.writeStructBegin('NotifyRecharge');
  if (this.agtPhone !== null && this.agtPhone !== undefined) {
    output.writeFieldBegin('agtPhone', Thrift.Type.STRING, 1);
    output.writeString(this.agtPhone);
    output.writeFieldEnd();
  }
  if (this.reqStreamId !== null && this.reqStreamId !== undefined) {
    output.writeFieldBegin('reqStreamId', Thrift.Type.STRING, 2);
    output.writeString(this.reqStreamId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 4);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameParam = module.exports.ThirdGameParam = function(args) {
  this.thirdGameId = null;
  this.firstpy = null;
  this.name = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
    if (args.firstpy !== undefined) {
      this.firstpy = args.firstpy;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThirdGameParam.prototype = {};
ThirdGameParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.thirdGameId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.firstpy = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameParam');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  if (this.firstpy !== null && this.firstpy !== undefined) {
    output.writeFieldBegin('firstpy', Thrift.Type.STRING, 2);
    output.writeString(this.firstpy);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGame = module.exports.ThirdGame = function(args) {
  this.thirdGameId = null;
  this.corp = null;
  this.code = null;
  this.startbuy = null;
  this.endbuy = null;
  this.contbuy = null;
  this.spacenum = null;
  this.buyunit = null;
  this.gameunit = null;
  this.name = null;
  this.needparam = null;
  this.mprice = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
    if (args.corp !== undefined) {
      this.corp = args.corp;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.startbuy !== undefined) {
      this.startbuy = args.startbuy;
    }
    if (args.endbuy !== undefined) {
      this.endbuy = args.endbuy;
    }
    if (args.contbuy !== undefined) {
      this.contbuy = args.contbuy;
    }
    if (args.spacenum !== undefined) {
      this.spacenum = args.spacenum;
    }
    if (args.buyunit !== undefined) {
      this.buyunit = args.buyunit;
    }
    if (args.gameunit !== undefined) {
      this.gameunit = args.gameunit;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.needparam !== undefined) {
      this.needparam = args.needparam;
    }
    if (args.mprice !== undefined) {
      this.mprice = args.mprice;
    }
  }
};
ThirdGame.prototype = {};
ThirdGame.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.thirdGameId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.corp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.I32) {
          this.startbuy = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.I32) {
          this.endbuy = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.STRING) {
          this.contbuy = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 7:
        if (ftype == Thrift.Type.I32) {
          this.spacenum = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
      case 8:
        if (ftype == Thrift.Type.STRING) {
          this.buyunit = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 9:
        if (ftype == Thrift.Type.STRING) {
          this.gameunit = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 10:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 11:
        if (ftype == Thrift.Type.STRING) {
          this.needparam = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 12:
        if (ftype == Thrift.Type.STRING) {
          this.mprice = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGame.prototype.write = function(output) {
  output.writeStructBegin('ThirdGame');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  if (this.corp !== null && this.corp !== undefined) {
    output.writeFieldBegin('corp', Thrift.Type.STRING, 2);
    output.writeString(this.corp);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 3);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.startbuy !== null && this.startbuy !== undefined) {
    output.writeFieldBegin('startbuy', Thrift.Type.I32, 4);
    output.writeI32(this.startbuy);
    output.writeFieldEnd();
  }
  if (this.endbuy !== null && this.endbuy !== undefined) {
    output.writeFieldBegin('endbuy', Thrift.Type.I32, 5);
    output.writeI32(this.endbuy);
    output.writeFieldEnd();
  }
  if (this.contbuy !== null && this.contbuy !== undefined) {
    output.writeFieldBegin('contbuy', Thrift.Type.STRING, 6);
    output.writeString(this.contbuy);
    output.writeFieldEnd();
  }
  if (this.spacenum !== null && this.spacenum !== undefined) {
    output.writeFieldBegin('spacenum', Thrift.Type.I32, 7);
    output.writeI32(this.spacenum);
    output.writeFieldEnd();
  }
  if (this.buyunit !== null && this.buyunit !== undefined) {
    output.writeFieldBegin('buyunit', Thrift.Type.STRING, 8);
    output.writeString(this.buyunit);
    output.writeFieldEnd();
  }
  if (this.gameunit !== null && this.gameunit !== undefined) {
    output.writeFieldBegin('gameunit', Thrift.Type.STRING, 9);
    output.writeString(this.gameunit);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.needparam !== null && this.needparam !== undefined) {
    output.writeFieldBegin('needparam', Thrift.Type.STRING, 11);
    output.writeString(this.needparam);
    output.writeFieldEnd();
  }
  if (this.mprice !== null && this.mprice !== undefined) {
    output.writeFieldBegin('mprice', Thrift.Type.STRING, 12);
    output.writeString(this.mprice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameRechargeParam = module.exports.ThirdGameRechargeParam = function(args) {
  this.thirdGameId = null;
  this.account = null;
  this.gameAreaId = null;
  this.gameAreaName = null;
  this.gameServerId = null;
  this.gameServerName = null;
  this.buyNum = null;
  this.totalAmount = null;
  this.price = null;
  this.roleId = null;
  this.roleName = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.gameAreaId !== undefined) {
      this.gameAreaId = args.gameAreaId;
    }
    if (args.gameAreaName !== undefined) {
      this.gameAreaName = args.gameAreaName;
    }
    if (args.gameServerId !== undefined) {
      this.gameServerId = args.gameServerId;
    }
    if (args.gameServerName !== undefined) {
      this.gameServerName = args.gameServerName;
    }
    if (args.buyNum !== undefined) {
      this.buyNum = args.buyNum;
    }
    if (args.totalAmount !== undefined) {
      this.totalAmount = args.totalAmount;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.roleId !== undefined) {
      this.roleId = args.roleId;
    }
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
  }
};
ThirdGameRechargeParam.prototype = {};
ThirdGameRechargeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.thirdGameId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.account = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.gameAreaId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.gameAreaName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.STRING) {
          this.gameServerId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.STRING) {
          this.gameServerName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 7:
        if (ftype == Thrift.Type.STRING) {
          this.buyNum = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 8:
        if (ftype == Thrift.Type.STRING) {
          this.totalAmount = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 9:
        if (ftype == Thrift.Type.STRING) {
          this.price = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 10:
        if (ftype == Thrift.Type.STRING) {
          this.roleId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 11:
        if (ftype == Thrift.Type.STRING) {
          this.roleName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameRechargeParam.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameRechargeParam');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.gameAreaId !== null && this.gameAreaId !== undefined) {
    output.writeFieldBegin('gameAreaId', Thrift.Type.STRING, 3);
    output.writeString(this.gameAreaId);
    output.writeFieldEnd();
  }
  if (this.gameAreaName !== null && this.gameAreaName !== undefined) {
    output.writeFieldBegin('gameAreaName', Thrift.Type.STRING, 4);
    output.writeString(this.gameAreaName);
    output.writeFieldEnd();
  }
  if (this.gameServerId !== null && this.gameServerId !== undefined) {
    output.writeFieldBegin('gameServerId', Thrift.Type.STRING, 5);
    output.writeString(this.gameServerId);
    output.writeFieldEnd();
  }
  if (this.gameServerName !== null && this.gameServerName !== undefined) {
    output.writeFieldBegin('gameServerName', Thrift.Type.STRING, 6);
    output.writeString(this.gameServerName);
    output.writeFieldEnd();
  }
  if (this.buyNum !== null && this.buyNum !== undefined) {
    output.writeFieldBegin('buyNum', Thrift.Type.STRING, 7);
    output.writeString(this.buyNum);
    output.writeFieldEnd();
  }
  if (this.totalAmount !== null && this.totalAmount !== undefined) {
    output.writeFieldBegin('totalAmount', Thrift.Type.STRING, 8);
    output.writeString(this.totalAmount);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 9);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.roleId !== null && this.roleId !== undefined) {
    output.writeFieldBegin('roleId', Thrift.Type.STRING, 10);
    output.writeString(this.roleId);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 11);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PYGameList = module.exports.PYGameList = function(args) {
  this.py = null;
  this.listGame = null;
  if (args) {
    if (args.py !== undefined) {
      this.py = args.py;
    }
    if (args.listGame !== undefined) {
      this.listGame = args.listGame;
    }
  }
};
PYGameList.prototype = {};
PYGameList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.py = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size16 = 0;
          var _rtmp320;
          this.listGame = [];
          var _etype19 = 0;
          _rtmp320 = input.readListBegin();
          _etype19 = _rtmp320.etype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21)
          {
            var elem22 = null;
            elem22 = new ttypes.ThirdGame();
            elem22.read(input);
            this.listGame.push(elem22);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PYGameList.prototype.write = function(output) {
  output.writeStructBegin('PYGameList');
  if (this.py !== null && this.py !== undefined) {
    output.writeFieldBegin('py', Thrift.Type.STRING, 1);
    output.writeString(this.py);
    output.writeFieldEnd();
  }
  if (this.listGame !== null && this.listGame !== undefined) {
    output.writeFieldBegin('listGame', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.listGame.length);
    for (var iter23 in this.listGame)
    {
      if (this.listGame.hasOwnProperty(iter23))
      {
        iter23 = this.listGame[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThirdGameListResult = module.exports.ThirdGameListResult = function(args) {
  this.result = null;
  this.ThirdGame = null;
  this.pyThirdGameList = null;
  this.thirdGameList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.ThirdGame !== undefined) {
      this.ThirdGame = args.ThirdGame;
    }
    if (args.pyThirdGameList !== undefined) {
      this.pyThirdGameList = args.pyThirdGameList;
    }
    if (args.thirdGameList !== undefined) {
      this.thirdGameList = args.thirdGameList;
    }
  }
};
ThirdGameListResult.prototype = {};
ThirdGameListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.result = new result_ttypes.Result();
          this.result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ThirdGame = new ttypes.ThirdGame();
          this.ThirdGame.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size24 = 0;
          var _rtmp328;
          this.pyThirdGameList = [];
          var _etype27 = 0;
          _rtmp328 = input.readListBegin();
          _etype27 = _rtmp328.etype;
          _size24 = _rtmp328.size;
          for (var _i29 = 0; _i29 < _size24; ++_i29)
          {
            var elem30 = null;
            elem30 = new ttypes.PYGameList();
            elem30.read(input);
            this.pyThirdGameList.push(elem30);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.LIST) {
          var _size31 = 0;
          var _rtmp335;
          this.thirdGameList = [];
          var _etype34 = 0;
          _rtmp335 = input.readListBegin();
          _etype34 = _rtmp335.etype;
          _size31 = _rtmp335.size;
          for (var _i36 = 0; _i36 < _size31; ++_i36)
          {
            var elem37 = null;
            elem37 = new ttypes.ThirdGame();
            elem37.read(input);
            this.thirdGameList.push(elem37);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThirdGameListResult.prototype.write = function(output) {
  output.writeStructBegin('ThirdGameListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.ThirdGame !== null && this.ThirdGame !== undefined) {
    output.writeFieldBegin('ThirdGame', Thrift.Type.STRUCT, 2);
    this.ThirdGame.write(output);
    output.writeFieldEnd();
  }
  if (this.pyThirdGameList !== null && this.pyThirdGameList !== undefined) {
    output.writeFieldBegin('pyThirdGameList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pyThirdGameList.length);
    for (var iter38 in this.pyThirdGameList)
    {
      if (this.pyThirdGameList.hasOwnProperty(iter38))
      {
        iter38 = this.pyThirdGameList[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.thirdGameList !== null && this.thirdGameList !== undefined) {
    output.writeFieldBegin('thirdGameList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.thirdGameList.length);
    for (var iter39 in this.thirdGameList)
    {
      if (this.thirdGameList.hasOwnProperty(iter39))
      {
        iter39 = this.thirdGameList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameSeaver = module.exports.GameSeaver = function(args) {
  this.gameSeaverName = null;
  this.gameSeaverId = null;
  if (args) {
    if (args.gameSeaverName !== undefined) {
      this.gameSeaverName = args.gameSeaverName;
    }
    if (args.gameSeaverId !== undefined) {
      this.gameSeaverId = args.gameSeaverId;
    }
  }
};
GameSeaver.prototype = {};
GameSeaver.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.gameSeaverName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.gameSeaverId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameSeaver.prototype.write = function(output) {
  output.writeStructBegin('GameSeaver');
  if (this.gameSeaverName !== null && this.gameSeaverName !== undefined) {
    output.writeFieldBegin('gameSeaverName', Thrift.Type.STRING, 1);
    output.writeString(this.gameSeaverName);
    output.writeFieldEnd();
  }
  if (this.gameSeaverId !== null && this.gameSeaverId !== undefined) {
    output.writeFieldBegin('gameSeaverId', Thrift.Type.STRING, 2);
    output.writeString(this.gameSeaverId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameArea = module.exports.GameArea = function(args) {
  this.gameAreaName = null;
  this.gameAreaId = null;
  this.gameSeaverList = null;
  if (args) {
    if (args.gameAreaName !== undefined) {
      this.gameAreaName = args.gameAreaName;
    }
    if (args.gameAreaId !== undefined) {
      this.gameAreaId = args.gameAreaId;
    }
    if (args.gameSeaverList !== undefined) {
      this.gameSeaverList = args.gameSeaverList;
    }
  }
};
GameArea.prototype = {};
GameArea.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.gameAreaName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.gameAreaId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size40 = 0;
          var _rtmp344;
          this.gameSeaverList = [];
          var _etype43 = 0;
          _rtmp344 = input.readListBegin();
          _etype43 = _rtmp344.etype;
          _size40 = _rtmp344.size;
          for (var _i45 = 0; _i45 < _size40; ++_i45)
          {
            var elem46 = null;
            elem46 = new ttypes.GameSeaver();
            elem46.read(input);
            this.gameSeaverList.push(elem46);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameArea.prototype.write = function(output) {
  output.writeStructBegin('GameArea');
  if (this.gameAreaName !== null && this.gameAreaName !== undefined) {
    output.writeFieldBegin('gameAreaName', Thrift.Type.STRING, 1);
    output.writeString(this.gameAreaName);
    output.writeFieldEnd();
  }
  if (this.gameAreaId !== null && this.gameAreaId !== undefined) {
    output.writeFieldBegin('gameAreaId', Thrift.Type.STRING, 2);
    output.writeString(this.gameAreaId);
    output.writeFieldEnd();
  }
  if (this.gameSeaverList !== null && this.gameSeaverList !== undefined) {
    output.writeFieldBegin('gameSeaverList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.gameSeaverList.length);
    for (var iter47 in this.gameSeaverList)
    {
      if (this.gameSeaverList.hasOwnProperty(iter47))
      {
        iter47 = this.gameSeaverList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameAreaListResult = module.exports.GameAreaListResult = function(args) {
  this.result = null;
  this.gameAreaList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.gameAreaList !== undefined) {
      this.gameAreaList = args.gameAreaList;
    }
  }
};
GameAreaListResult.prototype = {};
GameAreaListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.result = new result_ttypes.Result();
          this.result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size48 = 0;
          var _rtmp352;
          this.gameAreaList = [];
          var _etype51 = 0;
          _rtmp352 = input.readListBegin();
          _etype51 = _rtmp352.etype;
          _size48 = _rtmp352.size;
          for (var _i53 = 0; _i53 < _size48; ++_i53)
          {
            var elem54 = null;
            elem54 = new ttypes.GameArea();
            elem54.read(input);
            this.gameAreaList.push(elem54);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameAreaListResult.prototype.write = function(output) {
  output.writeStructBegin('GameAreaListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.gameAreaList !== null && this.gameAreaList !== undefined) {
    output.writeFieldBegin('gameAreaList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.gameAreaList.length);
    for (var iter55 in this.gameAreaList)
    {
      if (this.gameAreaList.hasOwnProperty(iter55))
      {
        iter55 = this.gameAreaList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameRoleResult = module.exports.GameRoleResult = function(args) {
  this.result = null;
  this.roleName = null;
  this.roleId = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
    if (args.roleId !== undefined) {
      this.roleId = args.roleId;
    }
  }
};
GameRoleResult.prototype = {};
GameRoleResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.result = new result_ttypes.Result();
          this.result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.roleName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.roleId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameRoleResult.prototype.write = function(output) {
  output.writeStructBegin('GameRoleResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.roleId !== null && this.roleId !== undefined) {
    output.writeFieldBegin('roleId', Thrift.Type.STRING, 3);
    output.writeString(this.roleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

