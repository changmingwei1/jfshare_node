//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
FileParam = module.exports.FileParam = function(args) {
  this.productType = null;
  this.DataType = null;
  this.ExpDate_Flag = null;
  this.CardNumber = null;
  this.StartDate = null;
  this.excelKeyUrl = null;
  this.notEncryptFlag = null;
  this.isTestFlag = null;
  if (args) {
    if (args.productType !== undefined) {
      this.productType = args.productType;
    }
    if (args.DataType !== undefined) {
      this.DataType = args.DataType;
    }
    if (args.ExpDate_Flag !== undefined) {
      this.ExpDate_Flag = args.ExpDate_Flag;
    }
    if (args.CardNumber !== undefined) {
      this.CardNumber = args.CardNumber;
    }
    if (args.StartDate !== undefined) {
      this.StartDate = args.StartDate;
    }
    if (args.excelKeyUrl !== undefined) {
      this.excelKeyUrl = args.excelKeyUrl;
    }
    if (args.notEncryptFlag !== undefined) {
      this.notEncryptFlag = args.notEncryptFlag;
    }
    if (args.isTestFlag !== undefined) {
      this.isTestFlag = args.isTestFlag;
    }
  }
};
FileParam.prototype = {};
FileParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.DataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ExpDate_Flag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.CardNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.StartDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.excelKeyUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.notEncryptFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isTestFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileParam.prototype.write = function(output) {
  output.writeStructBegin('FileParam');
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 1);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.DataType !== null && this.DataType !== undefined) {
    output.writeFieldBegin('DataType', Thrift.Type.STRING, 2);
    output.writeString(this.DataType);
    output.writeFieldEnd();
  }
  if (this.ExpDate_Flag !== null && this.ExpDate_Flag !== undefined) {
    output.writeFieldBegin('ExpDate_Flag', Thrift.Type.STRING, 3);
    output.writeString(this.ExpDate_Flag);
    output.writeFieldEnd();
  }
  if (this.CardNumber !== null && this.CardNumber !== undefined) {
    output.writeFieldBegin('CardNumber', Thrift.Type.I64, 4);
    output.writeI64(this.CardNumber);
    output.writeFieldEnd();
  }
  if (this.StartDate !== null && this.StartDate !== undefined) {
    output.writeFieldBegin('StartDate', Thrift.Type.STRING, 5);
    output.writeString(this.StartDate);
    output.writeFieldEnd();
  }
  if (this.excelKeyUrl !== null && this.excelKeyUrl !== undefined) {
    output.writeFieldBegin('excelKeyUrl', Thrift.Type.STRING, 6);
    output.writeString(this.excelKeyUrl);
    output.writeFieldEnd();
  }
  if (this.notEncryptFlag !== null && this.notEncryptFlag !== undefined) {
    output.writeFieldBegin('notEncryptFlag', Thrift.Type.BOOL, 7);
    output.writeBool(this.notEncryptFlag);
    output.writeFieldEnd();
  }
  if (this.isTestFlag !== null && this.isTestFlag !== undefined) {
    output.writeFieldBegin('isTestFlag', Thrift.Type.BOOL, 8);
    output.writeBool(this.isTestFlag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Recharge = module.exports.Recharge = function(args) {
  this.id = null;
  this.orderId = null;
  this.userId = null;
  this.chargeType = null;
  this.chargeChannel = null;
  this.state1 = null;
  this.state2 = null;
  this.chargeReqdate = null;
  this.chargeNotifydate = null;
  this.chargeMoney = null;
  this.businessCode = null;
  this.chargeAddr = null;
  this.thirdOrderNo = null;
  this.blance = null;
  this.applyTime = null;
  this.chargeNumblance = null;
  this.createTime = null;
  this.updateTime = null;
  this.reqOutNo = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chargeType !== undefined) {
      this.chargeType = args.chargeType;
    }
    if (args.chargeChannel !== undefined) {
      this.chargeChannel = args.chargeChannel;
    }
    if (args.state1 !== undefined) {
      this.state1 = args.state1;
    }
    if (args.state2 !== undefined) {
      this.state2 = args.state2;
    }
    if (args.chargeReqdate !== undefined) {
      this.chargeReqdate = args.chargeReqdate;
    }
    if (args.chargeNotifydate !== undefined) {
      this.chargeNotifydate = args.chargeNotifydate;
    }
    if (args.chargeMoney !== undefined) {
      this.chargeMoney = args.chargeMoney;
    }
    if (args.businessCode !== undefined) {
      this.businessCode = args.businessCode;
    }
    if (args.chargeAddr !== undefined) {
      this.chargeAddr = args.chargeAddr;
    }
    if (args.thirdOrderNo !== undefined) {
      this.thirdOrderNo = args.thirdOrderNo;
    }
    if (args.blance !== undefined) {
      this.blance = args.blance;
    }
    if (args.applyTime !== undefined) {
      this.applyTime = args.applyTime;
    }
    if (args.chargeNumblance !== undefined) {
      this.chargeNumblance = args.chargeNumblance;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.reqOutNo !== undefined) {
      this.reqOutNo = args.reqOutNo;
    }
  }
};
Recharge.prototype = {};
Recharge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.chargeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.chargeChannel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.chargeReqdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.chargeNotifydate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.chargeMoney = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.businessCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.chargeAddr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.thirdOrderNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.blance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.applyTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.chargeNumblance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.reqOutNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Recharge.prototype.write = function(output) {
  output.writeStructBegin('Recharge');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 2);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.chargeType !== null && this.chargeType !== undefined) {
    output.writeFieldBegin('chargeType', Thrift.Type.I32, 4);
    output.writeI32(this.chargeType);
    output.writeFieldEnd();
  }
  if (this.chargeChannel !== null && this.chargeChannel !== undefined) {
    output.writeFieldBegin('chargeChannel', Thrift.Type.I32, 5);
    output.writeI32(this.chargeChannel);
    output.writeFieldEnd();
  }
  if (this.state1 !== null && this.state1 !== undefined) {
    output.writeFieldBegin('state1', Thrift.Type.I32, 6);
    output.writeI32(this.state1);
    output.writeFieldEnd();
  }
  if (this.state2 !== null && this.state2 !== undefined) {
    output.writeFieldBegin('state2', Thrift.Type.I32, 7);
    output.writeI32(this.state2);
    output.writeFieldEnd();
  }
  if (this.chargeReqdate !== null && this.chargeReqdate !== undefined) {
    output.writeFieldBegin('chargeReqdate', Thrift.Type.STRING, 8);
    output.writeString(this.chargeReqdate);
    output.writeFieldEnd();
  }
  if (this.chargeNotifydate !== null && this.chargeNotifydate !== undefined) {
    output.writeFieldBegin('chargeNotifydate', Thrift.Type.STRING, 9);
    output.writeString(this.chargeNotifydate);
    output.writeFieldEnd();
  }
  if (this.chargeMoney !== null && this.chargeMoney !== undefined) {
    output.writeFieldBegin('chargeMoney', Thrift.Type.STRING, 10);
    output.writeString(this.chargeMoney);
    output.writeFieldEnd();
  }
  if (this.businessCode !== null && this.businessCode !== undefined) {
    output.writeFieldBegin('businessCode', Thrift.Type.STRING, 11);
    output.writeString(this.businessCode);
    output.writeFieldEnd();
  }
  if (this.chargeAddr !== null && this.chargeAddr !== undefined) {
    output.writeFieldBegin('chargeAddr', Thrift.Type.STRING, 12);
    output.writeString(this.chargeAddr);
    output.writeFieldEnd();
  }
  if (this.thirdOrderNo !== null && this.thirdOrderNo !== undefined) {
    output.writeFieldBegin('thirdOrderNo', Thrift.Type.STRING, 13);
    output.writeString(this.thirdOrderNo);
    output.writeFieldEnd();
  }
  if (this.blance !== null && this.blance !== undefined) {
    output.writeFieldBegin('blance', Thrift.Type.STRING, 14);
    output.writeString(this.blance);
    output.writeFieldEnd();
  }
  if (this.applyTime !== null && this.applyTime !== undefined) {
    output.writeFieldBegin('applyTime', Thrift.Type.STRING, 15);
    output.writeString(this.applyTime);
    output.writeFieldEnd();
  }
  if (this.chargeNumblance !== null && this.chargeNumblance !== undefined) {
    output.writeFieldBegin('chargeNumblance', Thrift.Type.STRING, 16);
    output.writeString(this.chargeNumblance);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 17);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 18);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.reqOutNo !== null && this.reqOutNo !== undefined) {
    output.writeFieldBegin('reqOutNo', Thrift.Type.STRING, 19);
    output.writeString(this.reqOutNo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RechargeListResult = module.exports.RechargeListResult = function(args) {
  this.result = null;
  this.recharges = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.recharges !== undefined) {
      this.recharges = args.recharges;
    }
  }
};
RechargeListResult.prototype = {};
RechargeListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.recharges = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Recharge();
          elem6.read(input);
          this.recharges.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RechargeListResult.prototype.write = function(output) {
  output.writeStructBegin('RechargeListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.recharges !== null && this.recharges !== undefined) {
    output.writeFieldBegin('recharges', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recharges.length);
    for (var iter7 in this.recharges)
    {
      if (this.recharges.hasOwnProperty(iter7))
      {
        iter7 = this.recharges[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotifyRecharge = module.exports.NotifyRecharge = function(args) {
  this.agtPhone = null;
  this.reqStreamId = null;
  this.state = null;
  this.sign = null;
  if (args) {
    if (args.agtPhone !== undefined) {
      this.agtPhone = args.agtPhone;
    }
    if (args.reqStreamId !== undefined) {
      this.reqStreamId = args.reqStreamId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
  }
};
NotifyRecharge.prototype = {};
NotifyRecharge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agtPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reqStreamId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotifyRecharge.prototype.write = function(output) {
  output.writeStructBegin('NotifyRecharge');
  if (this.agtPhone !== null && this.agtPhone !== undefined) {
    output.writeFieldBegin('agtPhone', Thrift.Type.STRING, 1);
    output.writeString(this.agtPhone);
    output.writeFieldEnd();
  }
  if (this.reqStreamId !== null && this.reqStreamId !== undefined) {
    output.writeFieldBegin('reqStreamId', Thrift.Type.STRING, 2);
    output.writeString(this.reqStreamId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 4);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

