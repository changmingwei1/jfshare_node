//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
FileParam = module.exports.FileParam = function(args) {
  this.ProductName = null;
  this.ProductNo = null;
  this.DataType = null;
  this.ExpDate_Flag = null;
  this.CardNumber = null;
  this.StartDate = null;
  this.FaceValue = null;
  this.RealValue = null;
  this.excelKeyUrl = null;
  this.orderId = null;
  this.sellerId = null;
  if (args) {
    if (args.ProductName !== undefined && args.ProductName !== null) {
      this.ProductName = args.ProductName;
    }
    if (args.ProductNo !== undefined && args.ProductNo !== null) {
      this.ProductNo = args.ProductNo;
    }
    if (args.DataType !== undefined && args.DataType !== null) {
      this.DataType = args.DataType;
    }
    if (args.ExpDate_Flag !== undefined && args.ExpDate_Flag !== null) {
      this.ExpDate_Flag = args.ExpDate_Flag;
    }
    if (args.CardNumber !== undefined && args.CardNumber !== null) {
      this.CardNumber = args.CardNumber;
    }
    if (args.StartDate !== undefined && args.StartDate !== null) {
      this.StartDate = args.StartDate;
    }
    if (args.FaceValue !== undefined && args.FaceValue !== null) {
      this.FaceValue = args.FaceValue;
    }
    if (args.RealValue !== undefined && args.RealValue !== null) {
      this.RealValue = args.RealValue;
    }
    if (args.excelKeyUrl !== undefined && args.excelKeyUrl !== null) {
      this.excelKeyUrl = args.excelKeyUrl;
    }
    if (args.orderId !== undefined && args.orderId !== null) {
      this.orderId = args.orderId;
    }
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
  }
};
FileParam.prototype = {};
FileParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ProductName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ProductNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.DataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ExpDate_Flag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.CardNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.StartDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.FaceValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.RealValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.excelKeyUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.sellerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileParam.prototype.write = function(output) {
  output.writeStructBegin('FileParam');
  if (this.ProductName !== null && this.ProductName !== undefined) {
    output.writeFieldBegin('ProductName', Thrift.Type.STRING, 1);
    output.writeString(this.ProductName);
    output.writeFieldEnd();
  }
  if (this.ProductNo !== null && this.ProductNo !== undefined) {
    output.writeFieldBegin('ProductNo', Thrift.Type.STRING, 2);
    output.writeString(this.ProductNo);
    output.writeFieldEnd();
  }
  if (this.DataType !== null && this.DataType !== undefined) {
    output.writeFieldBegin('DataType', Thrift.Type.STRING, 3);
    output.writeString(this.DataType);
    output.writeFieldEnd();
  }
  if (this.ExpDate_Flag !== null && this.ExpDate_Flag !== undefined) {
    output.writeFieldBegin('ExpDate_Flag', Thrift.Type.STRING, 4);
    output.writeString(this.ExpDate_Flag);
    output.writeFieldEnd();
  }
  if (this.CardNumber !== null && this.CardNumber !== undefined) {
    output.writeFieldBegin('CardNumber', Thrift.Type.I64, 5);
    output.writeI64(this.CardNumber);
    output.writeFieldEnd();
  }
  if (this.StartDate !== null && this.StartDate !== undefined) {
    output.writeFieldBegin('StartDate', Thrift.Type.STRING, 6);
    output.writeString(this.StartDate);
    output.writeFieldEnd();
  }
  if (this.FaceValue !== null && this.FaceValue !== undefined) {
    output.writeFieldBegin('FaceValue', Thrift.Type.STRING, 7);
    output.writeString(this.FaceValue);
    output.writeFieldEnd();
  }
  if (this.RealValue !== null && this.RealValue !== undefined) {
    output.writeFieldBegin('RealValue', Thrift.Type.STRING, 8);
    output.writeString(this.RealValue);
    output.writeFieldEnd();
  }
  if (this.excelKeyUrl !== null && this.excelKeyUrl !== undefined) {
    output.writeFieldBegin('excelKeyUrl', Thrift.Type.STRING, 9);
    output.writeString(this.excelKeyUrl);
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 10);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.STRING, 11);
    output.writeString(this.sellerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

