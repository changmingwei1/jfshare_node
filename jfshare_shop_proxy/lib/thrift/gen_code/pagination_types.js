//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Pagination = module.exports.Pagination = function(args) {
  this.totalCount = null;
  this.pageNumCount = null;
  this.numPerPage = null;
  this.currentPage = null;
  if (args) {
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.pageNumCount !== undefined) {
      this.pageNumCount = args.pageNumCount;
    }
    if (args.numPerPage !== undefined) {
      this.numPerPage = args.numPerPage;
    }
    if (args.currentPage !== undefined) {
      this.currentPage = args.currentPage;
    }
  }
};
Pagination.prototype = {};
Pagination.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageNumCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numPerPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.currentPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Pagination.prototype.write = function(output) {
  output.writeStructBegin('Pagination');
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 1);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.pageNumCount !== null && this.pageNumCount !== undefined) {
    output.writeFieldBegin('pageNumCount', Thrift.Type.I32, 2);
    output.writeI32(this.pageNumCount);
    output.writeFieldEnd();
  }
  if (this.numPerPage !== null && this.numPerPage !== undefined) {
    output.writeFieldBegin('numPerPage', Thrift.Type.I32, 3);
    output.writeI32(this.numPerPage);
    output.writeFieldEnd();
  }
  if (this.currentPage !== null && this.currentPage !== undefined) {
    output.writeFieldBegin('currentPage', Thrift.Type.I32, 4);
    output.writeI32(this.currentPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

