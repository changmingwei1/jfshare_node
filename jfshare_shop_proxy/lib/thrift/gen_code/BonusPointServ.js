//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./score_message_types');
//HELPER FUNCTIONS AND STRUCTURES

BonusPointServ_testInfo_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
BonusPointServ_testInfo_args.prototype = {};
BonusPointServ_testInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_testInfo_args.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_testInfo_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_testInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BonusPointServ_testInfo_result.prototype = {};
BonusPointServ_testInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_testInfo_result.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_testInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_sendNote_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
  }
};
BonusPointServ_sendNote_args.prototype = {};
BonusPointServ_sendNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_sendNote_args.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_sendNote_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_sendNote_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BonusPointServ_sendNote_result.prototype = {};
BonusPointServ_sendNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_sendNote_result.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_sendNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_queryMobilePhone_args = function(args) {
  this.loginName = null;
  this.code = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
  }
};
BonusPointServ_queryMobilePhone_args.prototype = {};
BonusPointServ_queryMobilePhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_queryMobilePhone_args.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_queryMobilePhone_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_queryMobilePhone_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BonusPointServ_queryMobilePhone_result.prototype = {};
BonusPointServ_queryMobilePhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScoreResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_queryMobilePhone_result.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_queryMobilePhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_queryHaiNan_args = function(args) {
  this.loginName = null;
  this.loginPassword = null;
  this.method = null;
  this.cookei = null;
  this.code = null;
  this.reqtimestamp = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.loginPassword !== undefined) {
      this.loginPassword = args.loginPassword;
    }
    if (args.method !== undefined) {
      this.method = args.method;
    }
    if (args.cookei !== undefined) {
      this.cookei = args.cookei;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.reqtimestamp !== undefined) {
      this.reqtimestamp = args.reqtimestamp;
    }
  }
};
BonusPointServ_queryHaiNan_args.prototype = {};
BonusPointServ_queryHaiNan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cookei = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.reqtimestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_queryHaiNan_args.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_queryHaiNan_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.loginPassword !== null && this.loginPassword !== undefined) {
    output.writeFieldBegin('loginPassword', Thrift.Type.STRING, 2);
    output.writeString(this.loginPassword);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 3);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.cookei !== null && this.cookei !== undefined) {
    output.writeFieldBegin('cookei', Thrift.Type.STRING, 4);
    output.writeString(this.cookei);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 5);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.reqtimestamp !== null && this.reqtimestamp !== undefined) {
    output.writeFieldBegin('reqtimestamp', Thrift.Type.STRING, 6);
    output.writeString(this.reqtimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_queryHaiNan_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BonusPointServ_queryHaiNan_result.prototype = {};
BonusPointServ_queryHaiNan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScoreResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_queryHaiNan_result.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_queryHaiNan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_queryNanFang_args = function(args) {
  this.loginName = null;
  this.loginPassword = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.loginPassword !== undefined) {
      this.loginPassword = args.loginPassword;
    }
  }
};
BonusPointServ_queryNanFang_args.prototype = {};
BonusPointServ_queryNanFang_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_queryNanFang_args.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_queryNanFang_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.loginPassword !== null && this.loginPassword !== undefined) {
    output.writeFieldBegin('loginPassword', Thrift.Type.STRING, 2);
    output.writeString(this.loginPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_queryNanFang_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BonusPointServ_queryNanFang_result.prototype = {};
BonusPointServ_queryNanFang_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FlightMileageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_queryNanFang_result.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_queryNanFang_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_sendHaiHangImages_args = function(args) {
};
BonusPointServ_sendHaiHangImages_args.prototype = {};
BonusPointServ_sendHaiHangImages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_sendHaiHangImages_args.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_sendHaiHangImages_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServ_sendHaiHangImages_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BonusPointServ_sendHaiHangImages_result.prototype = {};
BonusPointServ_sendHaiHangImages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HaiHangImageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BonusPointServ_sendHaiHangImages_result.prototype.write = function(output) {
  output.writeStructBegin('BonusPointServ_sendHaiHangImages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BonusPointServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BonusPointServClient.prototype = {};
BonusPointServClient.prototype.seqid = function() { return this._seqid; }
BonusPointServClient.prototype.new_seqid = function() { return this._seqid += 1; }
BonusPointServClient.prototype.testInfo = function(url, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testInfo(url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testInfo(url);
  }
};

BonusPointServClient.prototype.send_testInfo = function(url) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('testInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new BonusPointServ_testInfo_args();
  args.url = url;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BonusPointServClient.prototype.recv_testInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BonusPointServ_testInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testInfo failed: unknown result');
};
BonusPointServClient.prototype.sendNote = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendNote(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendNote(loginName);
  }
};

BonusPointServClient.prototype.send_sendNote = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendNote', Thrift.MessageType.CALL, this.seqid());
  var args = new BonusPointServ_sendNote_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BonusPointServClient.prototype.recv_sendNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BonusPointServ_sendNote_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendNote failed: unknown result');
};
BonusPointServClient.prototype.queryMobilePhone = function(loginName, code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryMobilePhone(loginName, code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryMobilePhone(loginName, code);
  }
};

BonusPointServClient.prototype.send_queryMobilePhone = function(loginName, code) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryMobilePhone', Thrift.MessageType.CALL, this.seqid());
  var args = new BonusPointServ_queryMobilePhone_args();
  args.loginName = loginName;
  args.code = code;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BonusPointServClient.prototype.recv_queryMobilePhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BonusPointServ_queryMobilePhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryMobilePhone failed: unknown result');
};
BonusPointServClient.prototype.queryHaiNan = function(loginName, loginPassword, method, cookei, code, reqtimestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryHaiNan(loginName, loginPassword, method, cookei, code, reqtimestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryHaiNan(loginName, loginPassword, method, cookei, code, reqtimestamp);
  }
};

BonusPointServClient.prototype.send_queryHaiNan = function(loginName, loginPassword, method, cookei, code, reqtimestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryHaiNan', Thrift.MessageType.CALL, this.seqid());
  var args = new BonusPointServ_queryHaiNan_args();
  args.loginName = loginName;
  args.loginPassword = loginPassword;
  args.method = method;
  args.cookei = cookei;
  args.code = code;
  args.reqtimestamp = reqtimestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BonusPointServClient.prototype.recv_queryHaiNan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BonusPointServ_queryHaiNan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryHaiNan failed: unknown result');
};
BonusPointServClient.prototype.queryNanFang = function(loginName, loginPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryNanFang(loginName, loginPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryNanFang(loginName, loginPassword);
  }
};

BonusPointServClient.prototype.send_queryNanFang = function(loginName, loginPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryNanFang', Thrift.MessageType.CALL, this.seqid());
  var args = new BonusPointServ_queryNanFang_args();
  args.loginName = loginName;
  args.loginPassword = loginPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BonusPointServClient.prototype.recv_queryNanFang = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BonusPointServ_queryNanFang_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryNanFang failed: unknown result');
};
BonusPointServClient.prototype.sendHaiHangImages = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendHaiHangImages();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendHaiHangImages();
  }
};

BonusPointServClient.prototype.send_sendHaiHangImages = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendHaiHangImages', Thrift.MessageType.CALL, this.seqid());
  var args = new BonusPointServ_sendHaiHangImages_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BonusPointServClient.prototype.recv_sendHaiHangImages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BonusPointServ_sendHaiHangImages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendHaiHangImages failed: unknown result');
};
BonusPointServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BonusPointServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BonusPointServProcessor.prototype.process_testInfo = function(seqid, input, output) {
  var args = new BonusPointServ_testInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testInfo.length === 1) {
    Q.fcall(this._handler.testInfo, args.url)
      .then(function(result) {
        var result = new BonusPointServ_testInfo_result({success: result});
        output.writeMessageBegin("testInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BonusPointServ_testInfo_result(err);
        output.writeMessageBegin("testInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.testInfo(args.url,  function (err, result) {
      var result = new BonusPointServ_testInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("testInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BonusPointServProcessor.prototype.process_sendNote = function(seqid, input, output) {
  var args = new BonusPointServ_sendNote_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendNote.length === 1) {
    Q.fcall(this._handler.sendNote, args.loginName)
      .then(function(result) {
        var result = new BonusPointServ_sendNote_result({success: result});
        output.writeMessageBegin("sendNote", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BonusPointServ_sendNote_result(err);
        output.writeMessageBegin("sendNote", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendNote(args.loginName,  function (err, result) {
      var result = new BonusPointServ_sendNote_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendNote", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BonusPointServProcessor.prototype.process_queryMobilePhone = function(seqid, input, output) {
  var args = new BonusPointServ_queryMobilePhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryMobilePhone.length === 2) {
    Q.fcall(this._handler.queryMobilePhone, args.loginName, args.code)
      .then(function(result) {
        var result = new BonusPointServ_queryMobilePhone_result({success: result});
        output.writeMessageBegin("queryMobilePhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BonusPointServ_queryMobilePhone_result(err);
        output.writeMessageBegin("queryMobilePhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryMobilePhone(args.loginName, args.code,  function (err, result) {
      var result = new BonusPointServ_queryMobilePhone_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryMobilePhone", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BonusPointServProcessor.prototype.process_queryHaiNan = function(seqid, input, output) {
  var args = new BonusPointServ_queryHaiNan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryHaiNan.length === 6) {
    Q.fcall(this._handler.queryHaiNan, args.loginName, args.loginPassword, args.method, args.cookei, args.code, args.reqtimestamp)
      .then(function(result) {
        var result = new BonusPointServ_queryHaiNan_result({success: result});
        output.writeMessageBegin("queryHaiNan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BonusPointServ_queryHaiNan_result(err);
        output.writeMessageBegin("queryHaiNan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryHaiNan(args.loginName, args.loginPassword, args.method, args.cookei, args.code, args.reqtimestamp,  function (err, result) {
      var result = new BonusPointServ_queryHaiNan_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryHaiNan", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BonusPointServProcessor.prototype.process_queryNanFang = function(seqid, input, output) {
  var args = new BonusPointServ_queryNanFang_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryNanFang.length === 2) {
    Q.fcall(this._handler.queryNanFang, args.loginName, args.loginPassword)
      .then(function(result) {
        var result = new BonusPointServ_queryNanFang_result({success: result});
        output.writeMessageBegin("queryNanFang", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BonusPointServ_queryNanFang_result(err);
        output.writeMessageBegin("queryNanFang", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryNanFang(args.loginName, args.loginPassword,  function (err, result) {
      var result = new BonusPointServ_queryNanFang_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryNanFang", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BonusPointServProcessor.prototype.process_sendHaiHangImages = function(seqid, input, output) {
  var args = new BonusPointServ_sendHaiHangImages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendHaiHangImages.length === 0) {
    Q.fcall(this._handler.sendHaiHangImages)
      .then(function(result) {
        var result = new BonusPointServ_sendHaiHangImages_result({success: result});
        output.writeMessageBegin("sendHaiHangImages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BonusPointServ_sendHaiHangImages_result(err);
        output.writeMessageBegin("sendHaiHangImages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendHaiHangImages( function (err, result) {
      var result = new BonusPointServ_sendHaiHangImages_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendHaiHangImages", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

