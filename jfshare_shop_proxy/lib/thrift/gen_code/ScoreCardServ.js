//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./batchCards_types');
//HELPER FUNCTIONS AND STRUCTURES

ScoreCardServ_createOneActivity_args = function(args) {
  this.entity = null;
  if (args) {
    if (args.entity !== undefined) {
      this.entity = args.entity;
    }
  }
};
ScoreCardServ_createOneActivity_args.prototype = {};
ScoreCardServ_createOneActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.entity = new ttypes.ActivityBean();
        this.entity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_createOneActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_createOneActivity_args');
  if (this.entity !== null && this.entity !== undefined) {
    output.writeFieldBegin('entity', Thrift.Type.STRUCT, 1);
    this.entity.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_createOneActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_createOneActivity_result.prototype = {};
ScoreCardServ_createOneActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_createOneActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_createOneActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryActivities_args = function(args) {
  this.param = null;
  this.pagination = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_queryActivities_args.prototype = {};
ScoreCardServ_queryActivities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ActivityQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryActivities_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryActivities_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryActivities_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryActivities_result.prototype = {};
ScoreCardServ_queryActivities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityBatchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryActivities_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryActivities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryActivityById_args = function(args) {
  this.activityId = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
  }
};
ScoreCardServ_queryActivityById_args.prototype = {};
ScoreCardServ_queryActivityById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryActivityById_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryActivityById_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 1);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryActivityById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryActivityById_result.prototype = {};
ScoreCardServ_queryActivityById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryActivityById_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryActivityById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryCards_args = function(args) {
  this.activityId = null;
  this.param = null;
  this.pagination = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_queryCards_args.prototype = {};
ScoreCardServ_queryCards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.CardQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryCards_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryCards_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 1);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryCards_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryCards_result.prototype = {};
ScoreCardServ_queryCards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CardBatchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryCards_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryCards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryCardById_args = function(args) {
  this.cardId = null;
  if (args) {
    if (args.cardId !== undefined) {
      this.cardId = args.cardId;
    }
  }
};
ScoreCardServ_queryCardById_args.prototype = {};
ScoreCardServ_queryCardById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cardId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryCardById_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryCardById_args');
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.I32, 1);
    output.writeI32(this.cardId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryCardById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryCardById_result.prototype = {};
ScoreCardServ_queryCardById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CardResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryCardById_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryCardById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRechargeCards_args = function(args) {
  this.userId = null;
  this.pagination = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_queryRechargeCards_args.prototype = {};
ScoreCardServ_queryRechargeCards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRechargeCards_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRechargeCards_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRechargeCards_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryRechargeCards_result.prototype = {};
ScoreCardServ_queryRechargeCards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CardRecordBatchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRechargeCards_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRechargeCards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRechargeCardById_args = function(args) {
  this.rechargeCardId = null;
  if (args) {
    if (args.rechargeCardId !== undefined) {
      this.rechargeCardId = args.rechargeCardId;
    }
  }
};
ScoreCardServ_queryRechargeCardById_args.prototype = {};
ScoreCardServ_queryRechargeCardById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.rechargeCardId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRechargeCardById_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRechargeCardById_args');
  if (this.rechargeCardId !== null && this.rechargeCardId !== undefined) {
    output.writeFieldBegin('rechargeCardId', Thrift.Type.I32, 1);
    output.writeI32(this.rechargeCardId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRechargeCardById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryRechargeCardById_result.prototype = {};
ScoreCardServ_queryRechargeCardById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CardRecordResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRechargeCardById_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRechargeCardById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_exportExcelByqueryCards_args = function(args) {
  this.activityId = null;
  this.param = null;
  this.psd = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.psd !== undefined) {
      this.psd = args.psd;
    }
  }
};
ScoreCardServ_exportExcelByqueryCards_args.prototype = {};
ScoreCardServ_exportExcelByqueryCards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.CardQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.psd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_exportExcelByqueryCards_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_exportExcelByqueryCards_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 1);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.psd !== null && this.psd !== undefined) {
    output.writeFieldBegin('psd', Thrift.Type.STRING, 3);
    output.writeString(this.psd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_exportExcelByqueryCards_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_exportExcelByqueryCards_result.prototype = {};
ScoreCardServ_exportExcelByqueryCards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExcelExportResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_exportExcelByqueryCards_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_exportExcelByqueryCards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_recharge_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ScoreCardServ_recharge_args.prototype = {};
ScoreCardServ_recharge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.RechargeParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_recharge_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_recharge_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_recharge_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_recharge_result.prototype = {};
ScoreCardServ_recharge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_recharge_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_recharge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_validataPassword_args = function(args) {
  this.validataStr = null;
  if (args) {
    if (args.validataStr !== undefined) {
      this.validataStr = args.validataStr;
    }
  }
};
ScoreCardServ_validataPassword_args.prototype = {};
ScoreCardServ_validataPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.validataStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_validataPassword_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_validataPassword_args');
  if (this.validataStr !== null && this.validataStr !== undefined) {
    output.writeFieldBegin('validataStr', Thrift.Type.STRING, 1);
    output.writeString(this.validataStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_validataPassword_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_validataPassword_result.prototype = {};
ScoreCardServ_validataPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_validataPassword_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_validataPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_directRecharge_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
ScoreCardServ_directRecharge_args.prototype = {};
ScoreCardServ_directRecharge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.ToRechargeParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_directRecharge_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_directRecharge_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_directRecharge_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_directRecharge_result.prototype = {};
ScoreCardServ_directRecharge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DirectRechargeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_directRecharge_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_directRecharge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_invalidOneActivity_args = function(args) {
  this.activityId = null;
  this.psd = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.psd !== undefined) {
      this.psd = args.psd;
    }
  }
};
ScoreCardServ_invalidOneActivity_args.prototype = {};
ScoreCardServ_invalidOneActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.psd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_invalidOneActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_invalidOneActivity_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 1);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.psd !== null && this.psd !== undefined) {
    output.writeFieldBegin('psd', Thrift.Type.STRING, 2);
    output.writeString(this.psd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_invalidOneActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_invalidOneActivity_result.prototype = {};
ScoreCardServ_invalidOneActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.InvalidOneActivityResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_invalidOneActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_invalidOneActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_createRedPaperActivity_args = function(args) {
  this.activity = null;
  this.userId = null;
  if (args) {
    if (args.activity !== undefined) {
      this.activity = args.activity;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ScoreCardServ_createRedPaperActivity_args.prototype = {};
ScoreCardServ_createRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.Activity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_createRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_createRedPaperActivity_args');
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 1);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_createRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_createRedPaperActivity_result.prototype = {};
ScoreCardServ_createRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_createRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_createRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_updateRedPaperActivity_args = function(args) {
  this.activity = null;
  this.userId = null;
  if (args) {
    if (args.activity !== undefined) {
      this.activity = args.activity;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ScoreCardServ_updateRedPaperActivity_args.prototype = {};
ScoreCardServ_updateRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activity = new ttypes.Activity();
        this.activity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_updateRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_updateRedPaperActivity_args');
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.STRUCT, 1);
    this.activity.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_updateRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_updateRedPaperActivity_result.prototype = {};
ScoreCardServ_updateRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_updateRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_updateRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_invalidRedPaperActivity_args = function(args) {
  this.activityId = null;
  this.userId = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ScoreCardServ_invalidRedPaperActivity_args.prototype = {};
ScoreCardServ_invalidRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_invalidRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_invalidRedPaperActivity_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_invalidRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_invalidRedPaperActivity_result.prototype = {};
ScoreCardServ_invalidRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_invalidRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_invalidRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryOneRedPaperActivity_args = function(args) {
  this.activityId = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
  }
};
ScoreCardServ_queryOneRedPaperActivity_args.prototype = {};
ScoreCardServ_queryOneRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryOneRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryOneRedPaperActivity_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 1);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryOneRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryOneRedPaperActivity_result.prototype = {};
ScoreCardServ_queryOneRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityRedPaperResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryOneRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryOneRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivity_args = function(args) {
  this.encryActivityId = null;
  if (args) {
    if (args.encryActivityId !== undefined) {
      this.encryActivityId = args.encryActivityId;
    }
  }
};
ScoreCardServ_queryRedPaperActivity_args.prototype = {};
ScoreCardServ_queryRedPaperActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encryActivityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivity_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRedPaperActivity_args');
  if (this.encryActivityId !== null && this.encryActivityId !== undefined) {
    output.writeFieldBegin('encryActivityId', Thrift.Type.STRING, 1);
    output.writeString(this.encryActivityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryRedPaperActivity_result.prototype = {};
ScoreCardServ_queryRedPaperActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityRedPaperResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivity_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRedPaperActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivityList_args = function(args) {
  this.queryParam = null;
  this.pagination = null;
  if (args) {
    if (args.queryParam !== undefined) {
      this.queryParam = args.queryParam;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_queryRedPaperActivityList_args.prototype = {};
ScoreCardServ_queryRedPaperActivityList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryParam = new ttypes.RedPaperActivityQueryParam();
        this.queryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivityList_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRedPaperActivityList_args');
  if (this.queryParam !== null && this.queryParam !== undefined) {
    output.writeFieldBegin('queryParam', Thrift.Type.STRUCT, 1);
    this.queryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivityList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryRedPaperActivityList_result.prototype = {};
ScoreCardServ_queryRedPaperActivityList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRedPaperActivityList_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRedPaperActivityList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRedPaperReceivedList_args = function(args) {
  this.activityId = null;
  this.sendQueryParam = null;
  this.pagination = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.sendQueryParam !== undefined) {
      this.sendQueryParam = args.sendQueryParam;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_queryRedPaperReceivedList_args.prototype = {};
ScoreCardServ_queryRedPaperReceivedList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendQueryParam = new ttypes.RedPaperSendQueryParam();
        this.sendQueryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRedPaperReceivedList_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRedPaperReceivedList_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 1);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.sendQueryParam !== null && this.sendQueryParam !== undefined) {
    output.writeFieldBegin('sendQueryParam', Thrift.Type.STRUCT, 2);
    this.sendQueryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryRedPaperReceivedList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryRedPaperReceivedList_result.prototype = {};
ScoreCardServ_queryRedPaperReceivedList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ReceiveRecoardListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryRedPaperReceivedList_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryRedPaperReceivedList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_getRedPaperReceivedList_args = function(args) {
  this.encryActivityId = null;
  this.sendQueryParam = null;
  this.pagination = null;
  if (args) {
    if (args.encryActivityId !== undefined) {
      this.encryActivityId = args.encryActivityId;
    }
    if (args.sendQueryParam !== undefined) {
      this.sendQueryParam = args.sendQueryParam;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_getRedPaperReceivedList_args.prototype = {};
ScoreCardServ_getRedPaperReceivedList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encryActivityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendQueryParam = new ttypes.RedPaperSendQueryParam();
        this.sendQueryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_getRedPaperReceivedList_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_getRedPaperReceivedList_args');
  if (this.encryActivityId !== null && this.encryActivityId !== undefined) {
    output.writeFieldBegin('encryActivityId', Thrift.Type.STRING, 1);
    output.writeString(this.encryActivityId);
    output.writeFieldEnd();
  }
  if (this.sendQueryParam !== null && this.sendQueryParam !== undefined) {
    output.writeFieldBegin('sendQueryParam', Thrift.Type.STRUCT, 2);
    this.sendQueryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_getRedPaperReceivedList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_getRedPaperReceivedList_result.prototype = {};
ScoreCardServ_getRedPaperReceivedList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ReceiveRecoardListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_getRedPaperReceivedList_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_getRedPaperReceivedList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_exportRedPaperExcelForReceived_args = function(args) {
  this.activityId = null;
  this.params = null;
  if (args) {
    if (args.activityId !== undefined) {
      this.activityId = args.activityId;
    }
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
ScoreCardServ_exportRedPaperExcelForReceived_args.prototype = {};
ScoreCardServ_exportRedPaperExcelForReceived_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.QueryParam4Record();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_exportRedPaperExcelForReceived_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_exportRedPaperExcelForReceived_args');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I32, 1);
    output.writeI32(this.activityId);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 2);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_exportRedPaperExcelForReceived_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_exportRedPaperExcelForReceived_result.prototype = {};
ScoreCardServ_exportRedPaperExcelForReceived_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result4Excel();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_exportRedPaperExcelForReceived_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_exportRedPaperExcelForReceived_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_generateH5Url_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ScoreCardServ_generateH5Url_args.prototype = {};
ScoreCardServ_generateH5Url_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.GenerateParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_generateH5Url_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_generateH5Url_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_generateH5Url_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_generateH5Url_result.prototype = {};
ScoreCardServ_generateH5Url_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_generateH5Url_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_generateH5Url_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_receiveRedbag_args = function(args) {
  this.encryActivityId = null;
  this.mobile = null;
  if (args) {
    if (args.encryActivityId !== undefined) {
      this.encryActivityId = args.encryActivityId;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
  }
};
ScoreCardServ_receiveRedbag_args.prototype = {};
ScoreCardServ_receiveRedbag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encryActivityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_receiveRedbag_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_receiveRedbag_args');
  if (this.encryActivityId !== null && this.encryActivityId !== undefined) {
    output.writeFieldBegin('encryActivityId', Thrift.Type.STRING, 1);
    output.writeString(this.encryActivityId);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_receiveRedbag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_receiveRedbag_result.prototype = {};
ScoreCardServ_receiveRedbag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_receiveRedbag_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_receiveRedbag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_activityStatistic_args = function(args) {
  this.param = null;
  this.pagination = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreCardServ_activityStatistic_args.prototype = {};
ScoreCardServ_activityStatistic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ActivityStatisticParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_activityStatistic_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_activityStatistic_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_activityStatistic_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_activityStatistic_result.prototype = {};
ScoreCardServ_activityStatistic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivityStatisticResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_activityStatistic_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_activityStatistic_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_exprotActivityStatistic_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
ScoreCardServ_exprotActivityStatistic_args.prototype = {};
ScoreCardServ_exprotActivityStatistic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ExprotParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_exprotActivityStatistic_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_exprotActivityStatistic_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_exprotActivityStatistic_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_exprotActivityStatistic_result.prototype = {};
ScoreCardServ_exprotActivityStatistic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExprotResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_exprotActivityStatistic_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_exprotActivityStatistic_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_chinaMobileNotifyOrder_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
ScoreCardServ_chinaMobileNotifyOrder_args.prototype = {};
ScoreCardServ_chinaMobileNotifyOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.req = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_chinaMobileNotifyOrder_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_chinaMobileNotifyOrder_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRING, 1);
    output.writeString(this.req);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_chinaMobileNotifyOrder_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_chinaMobileNotifyOrder_result.prototype = {};
ScoreCardServ_chinaMobileNotifyOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_chinaMobileNotifyOrder_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_chinaMobileNotifyOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_resendVirtualCode_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
ScoreCardServ_resendVirtualCode_args.prototype = {};
ScoreCardServ_resendVirtualCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.req = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_resendVirtualCode_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_resendVirtualCode_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRING, 1);
    output.writeString(this.req);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_resendVirtualCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_resendVirtualCode_result.prototype = {};
ScoreCardServ_resendVirtualCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_resendVirtualCode_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_resendVirtualCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_setCodeInvalid_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
ScoreCardServ_setCodeInvalid_args.prototype = {};
ScoreCardServ_setCodeInvalid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.req = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_setCodeInvalid_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_setCodeInvalid_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRING, 1);
    output.writeString(this.req);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_setCodeInvalid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_setCodeInvalid_result.prototype = {};
ScoreCardServ_setCodeInvalid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_setCodeInvalid_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_setCodeInvalid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryCouponListByUserId_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ScoreCardServ_queryCouponListByUserId_args.prototype = {};
ScoreCardServ_queryCouponListByUserId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryCouponListByUserId_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryCouponListByUserId_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryCouponListByUserId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryCouponListByUserId_result.prototype = {};
ScoreCardServ_queryCouponListByUserId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CouponListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryCouponListByUserId_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryCouponListByUserId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_bindingPhoneByCouponId_args = function(args) {
  this.userId = null;
  this.loginName = null;
  this.couponId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.couponId !== undefined) {
      this.couponId = args.couponId;
    }
  }
};
ScoreCardServ_bindingPhoneByCouponId_args.prototype = {};
ScoreCardServ_bindingPhoneByCouponId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.couponId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_bindingPhoneByCouponId_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_bindingPhoneByCouponId_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 2);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.couponId !== null && this.couponId !== undefined) {
    output.writeFieldBegin('couponId', Thrift.Type.STRING, 3);
    output.writeString(this.couponId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_bindingPhoneByCouponId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_bindingPhoneByCouponId_result.prototype = {};
ScoreCardServ_bindingPhoneByCouponId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_bindingPhoneByCouponId_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_bindingPhoneByCouponId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_createDiscountActiv_args = function(args) {
  this.activ = null;
  if (args) {
    if (args.activ !== undefined) {
      this.activ = args.activ;
    }
  }
};
ScoreCardServ_createDiscountActiv_args.prototype = {};
ScoreCardServ_createDiscountActiv_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activ = new ttypes.DiscountActiv();
        this.activ.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_createDiscountActiv_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_createDiscountActiv_args');
  if (this.activ !== null && this.activ !== undefined) {
    output.writeFieldBegin('activ', Thrift.Type.STRUCT, 1);
    this.activ.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_createDiscountActiv_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_createDiscountActiv_result.prototype = {};
ScoreCardServ_createDiscountActiv_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_createDiscountActiv_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_createDiscountActiv_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryAllDiscountActiv_args = function(args) {
};
ScoreCardServ_queryAllDiscountActiv_args.prototype = {};
ScoreCardServ_queryAllDiscountActiv_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryAllDiscountActiv_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryAllDiscountActiv_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryAllDiscountActiv_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryAllDiscountActiv_result.prototype = {};
ScoreCardServ_queryAllDiscountActiv_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DiscountActivListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryAllDiscountActiv_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryAllDiscountActiv_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryDiscountList_args = function(args) {
  this.activ = null;
  if (args) {
    if (args.activ !== undefined) {
      this.activ = args.activ;
    }
  }
};
ScoreCardServ_queryDiscountList_args.prototype = {};
ScoreCardServ_queryDiscountList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activ = new ttypes.DiscountActiv();
        this.activ.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryDiscountList_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryDiscountList_args');
  if (this.activ !== null && this.activ !== undefined) {
    output.writeFieldBegin('activ', Thrift.Type.STRUCT, 1);
    this.activ.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryDiscountList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryDiscountList_result.prototype = {};
ScoreCardServ_queryDiscountList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AdminCouponListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryDiscountList_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryDiscountList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryActivDetail_args = function(args) {
  this.activId = null;
  if (args) {
    if (args.activId !== undefined) {
      this.activId = args.activId;
    }
  }
};
ScoreCardServ_queryActivDetail_args.prototype = {};
ScoreCardServ_queryActivDetail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryActivDetail_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryActivDetail_args');
  if (this.activId !== null && this.activId !== undefined) {
    output.writeFieldBegin('activId', Thrift.Type.I32, 1);
    output.writeI32(this.activId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_queryActivDetail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_queryActivDetail_result.prototype = {};
ScoreCardServ_queryActivDetail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ActivDetailResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_queryActivDetail_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_queryActivDetail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_updateDiscountActiv_args = function(args) {
  this.activ = null;
  if (args) {
    if (args.activ !== undefined) {
      this.activ = args.activ;
    }
  }
};
ScoreCardServ_updateDiscountActiv_args.prototype = {};
ScoreCardServ_updateDiscountActiv_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activ = new ttypes.DiscountActiv();
        this.activ.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_updateDiscountActiv_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_updateDiscountActiv_args');
  if (this.activ !== null && this.activ !== undefined) {
    output.writeFieldBegin('activ', Thrift.Type.STRUCT, 1);
    this.activ.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_updateDiscountActiv_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_updateDiscountActiv_result.prototype = {};
ScoreCardServ_updateDiscountActiv_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_updateDiscountActiv_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_updateDiscountActiv_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_InvalidCoupon_args = function(args) {
  this.couponId = null;
  if (args) {
    if (args.couponId !== undefined) {
      this.couponId = args.couponId;
    }
  }
};
ScoreCardServ_InvalidCoupon_args.prototype = {};
ScoreCardServ_InvalidCoupon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.couponId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_InvalidCoupon_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_InvalidCoupon_args');
  if (this.couponId !== null && this.couponId !== undefined) {
    output.writeFieldBegin('couponId', Thrift.Type.STRING, 1);
    output.writeString(this.couponId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_InvalidCoupon_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_InvalidCoupon_result.prototype = {};
ScoreCardServ_InvalidCoupon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_InvalidCoupon_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_InvalidCoupon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_updateDiscountStateAndOrderId_args = function(args) {
  this.orderId = null;
  this.couponId = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.couponId !== undefined) {
      this.couponId = args.couponId;
    }
  }
};
ScoreCardServ_updateDiscountStateAndOrderId_args.prototype = {};
ScoreCardServ_updateDiscountStateAndOrderId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.orderId = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.orderId.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.couponId = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = input.readString();
          this.couponId.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_updateDiscountStateAndOrderId_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_updateDiscountStateAndOrderId_args');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.orderId.length);
    for (var iter102 in this.orderId)
    {
      if (this.orderId.hasOwnProperty(iter102))
      {
        iter102 = this.orderId[iter102];
        output.writeString(iter102);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.couponId !== null && this.couponId !== undefined) {
    output.writeFieldBegin('couponId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.couponId.length);
    for (var iter103 in this.couponId)
    {
      if (this.couponId.hasOwnProperty(iter103))
      {
        iter103 = this.couponId[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServ_updateDiscountStateAndOrderId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreCardServ_updateDiscountStateAndOrderId_result.prototype = {};
ScoreCardServ_updateDiscountStateAndOrderId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreCardServ_updateDiscountStateAndOrderId_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreCardServ_updateDiscountStateAndOrderId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreCardServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ScoreCardServClient.prototype = {};
ScoreCardServClient.prototype.seqid = function() { return this._seqid; }
ScoreCardServClient.prototype.new_seqid = function() { return this._seqid += 1; }
ScoreCardServClient.prototype.createOneActivity = function(entity, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createOneActivity(entity);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createOneActivity(entity);
  }
};

ScoreCardServClient.prototype.send_createOneActivity = function(entity) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createOneActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_createOneActivity_args();
  args.entity = entity;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_createOneActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_createOneActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createOneActivity failed: unknown result');
};
ScoreCardServClient.prototype.queryActivities = function(param, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryActivities(param, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryActivities(param, pagination);
  }
};

ScoreCardServClient.prototype.send_queryActivities = function(param, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryActivities', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryActivities_args();
  args.param = param;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryActivities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryActivities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryActivities failed: unknown result');
};
ScoreCardServClient.prototype.queryActivityById = function(activityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryActivityById(activityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryActivityById(activityId);
  }
};

ScoreCardServClient.prototype.send_queryActivityById = function(activityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryActivityById', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryActivityById_args();
  args.activityId = activityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryActivityById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryActivityById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryActivityById failed: unknown result');
};
ScoreCardServClient.prototype.queryCards = function(activityId, param, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryCards(activityId, param, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryCards(activityId, param, pagination);
  }
};

ScoreCardServClient.prototype.send_queryCards = function(activityId, param, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryCards', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryCards_args();
  args.activityId = activityId;
  args.param = param;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryCards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryCards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryCards failed: unknown result');
};
ScoreCardServClient.prototype.queryCardById = function(cardId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryCardById(cardId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryCardById(cardId);
  }
};

ScoreCardServClient.prototype.send_queryCardById = function(cardId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryCardById', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryCardById_args();
  args.cardId = cardId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryCardById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryCardById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryCardById failed: unknown result');
};
ScoreCardServClient.prototype.queryRechargeCards = function(userId, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRechargeCards(userId, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRechargeCards(userId, pagination);
  }
};

ScoreCardServClient.prototype.send_queryRechargeCards = function(userId, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRechargeCards', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryRechargeCards_args();
  args.userId = userId;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryRechargeCards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryRechargeCards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRechargeCards failed: unknown result');
};
ScoreCardServClient.prototype.queryRechargeCardById = function(rechargeCardId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRechargeCardById(rechargeCardId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRechargeCardById(rechargeCardId);
  }
};

ScoreCardServClient.prototype.send_queryRechargeCardById = function(rechargeCardId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRechargeCardById', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryRechargeCardById_args();
  args.rechargeCardId = rechargeCardId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryRechargeCardById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryRechargeCardById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRechargeCardById failed: unknown result');
};
ScoreCardServClient.prototype.exportExcelByqueryCards = function(activityId, param, psd, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportExcelByqueryCards(activityId, param, psd);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportExcelByqueryCards(activityId, param, psd);
  }
};

ScoreCardServClient.prototype.send_exportExcelByqueryCards = function(activityId, param, psd) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportExcelByqueryCards', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_exportExcelByqueryCards_args();
  args.activityId = activityId;
  args.param = param;
  args.psd = psd;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_exportExcelByqueryCards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_exportExcelByqueryCards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportExcelByqueryCards failed: unknown result');
};
ScoreCardServClient.prototype.recharge = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_recharge(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_recharge(param);
  }
};

ScoreCardServClient.prototype.send_recharge = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('recharge', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_recharge_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_recharge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_recharge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('recharge failed: unknown result');
};
ScoreCardServClient.prototype.validataPassword = function(validataStr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validataPassword(validataStr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validataPassword(validataStr);
  }
};

ScoreCardServClient.prototype.send_validataPassword = function(validataStr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validataPassword', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_validataPassword_args();
  args.validataStr = validataStr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_validataPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_validataPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validataPassword failed: unknown result');
};
ScoreCardServClient.prototype.directRecharge = function(params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_directRecharge(params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_directRecharge(params);
  }
};

ScoreCardServClient.prototype.send_directRecharge = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('directRecharge', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_directRecharge_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_directRecharge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_directRecharge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('directRecharge failed: unknown result');
};
ScoreCardServClient.prototype.invalidOneActivity = function(activityId, psd, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_invalidOneActivity(activityId, psd);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_invalidOneActivity(activityId, psd);
  }
};

ScoreCardServClient.prototype.send_invalidOneActivity = function(activityId, psd) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invalidOneActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_invalidOneActivity_args();
  args.activityId = activityId;
  args.psd = psd;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_invalidOneActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_invalidOneActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('invalidOneActivity failed: unknown result');
};
ScoreCardServClient.prototype.createRedPaperActivity = function(activity, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createRedPaperActivity(activity, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createRedPaperActivity(activity, userId);
  }
};

ScoreCardServClient.prototype.send_createRedPaperActivity = function(activity, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_createRedPaperActivity_args();
  args.activity = activity;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_createRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_createRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createRedPaperActivity failed: unknown result');
};
ScoreCardServClient.prototype.updateRedPaperActivity = function(activity, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateRedPaperActivity(activity, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateRedPaperActivity(activity, userId);
  }
};

ScoreCardServClient.prototype.send_updateRedPaperActivity = function(activity, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_updateRedPaperActivity_args();
  args.activity = activity;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_updateRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_updateRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateRedPaperActivity failed: unknown result');
};
ScoreCardServClient.prototype.invalidRedPaperActivity = function(activityId, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_invalidRedPaperActivity(activityId, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_invalidRedPaperActivity(activityId, userId);
  }
};

ScoreCardServClient.prototype.send_invalidRedPaperActivity = function(activityId, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invalidRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_invalidRedPaperActivity_args();
  args.activityId = activityId;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_invalidRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_invalidRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('invalidRedPaperActivity failed: unknown result');
};
ScoreCardServClient.prototype.queryOneRedPaperActivity = function(activityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryOneRedPaperActivity(activityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryOneRedPaperActivity(activityId);
  }
};

ScoreCardServClient.prototype.send_queryOneRedPaperActivity = function(activityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryOneRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryOneRedPaperActivity_args();
  args.activityId = activityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryOneRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryOneRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryOneRedPaperActivity failed: unknown result');
};
ScoreCardServClient.prototype.queryRedPaperActivity = function(encryActivityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRedPaperActivity(encryActivityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRedPaperActivity(encryActivityId);
  }
};

ScoreCardServClient.prototype.send_queryRedPaperActivity = function(encryActivityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRedPaperActivity', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryRedPaperActivity_args();
  args.encryActivityId = encryActivityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryRedPaperActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryRedPaperActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRedPaperActivity failed: unknown result');
};
ScoreCardServClient.prototype.queryRedPaperActivityList = function(queryParam, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRedPaperActivityList(queryParam, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRedPaperActivityList(queryParam, pagination);
  }
};

ScoreCardServClient.prototype.send_queryRedPaperActivityList = function(queryParam, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRedPaperActivityList', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryRedPaperActivityList_args();
  args.queryParam = queryParam;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryRedPaperActivityList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryRedPaperActivityList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRedPaperActivityList failed: unknown result');
};
ScoreCardServClient.prototype.queryRedPaperReceivedList = function(activityId, sendQueryParam, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryRedPaperReceivedList(activityId, sendQueryParam, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryRedPaperReceivedList(activityId, sendQueryParam, pagination);
  }
};

ScoreCardServClient.prototype.send_queryRedPaperReceivedList = function(activityId, sendQueryParam, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryRedPaperReceivedList', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryRedPaperReceivedList_args();
  args.activityId = activityId;
  args.sendQueryParam = sendQueryParam;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryRedPaperReceivedList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryRedPaperReceivedList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryRedPaperReceivedList failed: unknown result');
};
ScoreCardServClient.prototype.getRedPaperReceivedList = function(encryActivityId, sendQueryParam, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRedPaperReceivedList(encryActivityId, sendQueryParam, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRedPaperReceivedList(encryActivityId, sendQueryParam, pagination);
  }
};

ScoreCardServClient.prototype.send_getRedPaperReceivedList = function(encryActivityId, sendQueryParam, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRedPaperReceivedList', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_getRedPaperReceivedList_args();
  args.encryActivityId = encryActivityId;
  args.sendQueryParam = sendQueryParam;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_getRedPaperReceivedList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_getRedPaperReceivedList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRedPaperReceivedList failed: unknown result');
};
ScoreCardServClient.prototype.exportRedPaperExcelForReceived = function(activityId, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportRedPaperExcelForReceived(activityId, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportRedPaperExcelForReceived(activityId, params);
  }
};

ScoreCardServClient.prototype.send_exportRedPaperExcelForReceived = function(activityId, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportRedPaperExcelForReceived', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_exportRedPaperExcelForReceived_args();
  args.activityId = activityId;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_exportRedPaperExcelForReceived = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_exportRedPaperExcelForReceived_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportRedPaperExcelForReceived failed: unknown result');
};
ScoreCardServClient.prototype.generateH5Url = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generateH5Url(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generateH5Url(param);
  }
};

ScoreCardServClient.prototype.send_generateH5Url = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('generateH5Url', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_generateH5Url_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_generateH5Url = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_generateH5Url_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generateH5Url failed: unknown result');
};
ScoreCardServClient.prototype.receiveRedbag = function(encryActivityId, mobile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_receiveRedbag(encryActivityId, mobile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_receiveRedbag(encryActivityId, mobile);
  }
};

ScoreCardServClient.prototype.send_receiveRedbag = function(encryActivityId, mobile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('receiveRedbag', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_receiveRedbag_args();
  args.encryActivityId = encryActivityId;
  args.mobile = mobile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_receiveRedbag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_receiveRedbag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('receiveRedbag failed: unknown result');
};
ScoreCardServClient.prototype.activityStatistic = function(param, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_activityStatistic(param, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_activityStatistic(param, pagination);
  }
};

ScoreCardServClient.prototype.send_activityStatistic = function(param, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('activityStatistic', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_activityStatistic_args();
  args.param = param;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_activityStatistic = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_activityStatistic_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('activityStatistic failed: unknown result');
};
ScoreCardServClient.prototype.exprotActivityStatistic = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exprotActivityStatistic(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exprotActivityStatistic(param);
  }
};

ScoreCardServClient.prototype.send_exprotActivityStatistic = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exprotActivityStatistic', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_exprotActivityStatistic_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_exprotActivityStatistic = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_exprotActivityStatistic_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exprotActivityStatistic failed: unknown result');
};
ScoreCardServClient.prototype.chinaMobileNotifyOrder = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_chinaMobileNotifyOrder(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_chinaMobileNotifyOrder(req);
  }
};

ScoreCardServClient.prototype.send_chinaMobileNotifyOrder = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chinaMobileNotifyOrder', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_chinaMobileNotifyOrder_args();
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_chinaMobileNotifyOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_chinaMobileNotifyOrder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('chinaMobileNotifyOrder failed: unknown result');
};
ScoreCardServClient.prototype.resendVirtualCode = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resendVirtualCode(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resendVirtualCode(req);
  }
};

ScoreCardServClient.prototype.send_resendVirtualCode = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resendVirtualCode', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_resendVirtualCode_args();
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_resendVirtualCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_resendVirtualCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resendVirtualCode failed: unknown result');
};
ScoreCardServClient.prototype.setCodeInvalid = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setCodeInvalid(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setCodeInvalid(req);
  }
};

ScoreCardServClient.prototype.send_setCodeInvalid = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setCodeInvalid', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_setCodeInvalid_args();
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_setCodeInvalid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_setCodeInvalid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setCodeInvalid failed: unknown result');
};
ScoreCardServClient.prototype.queryCouponListByUserId = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryCouponListByUserId(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryCouponListByUserId(userId);
  }
};

ScoreCardServClient.prototype.send_queryCouponListByUserId = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryCouponListByUserId', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryCouponListByUserId_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryCouponListByUserId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryCouponListByUserId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryCouponListByUserId failed: unknown result');
};
ScoreCardServClient.prototype.bindingPhoneByCouponId = function(userId, loginName, couponId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bindingPhoneByCouponId(userId, loginName, couponId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bindingPhoneByCouponId(userId, loginName, couponId);
  }
};

ScoreCardServClient.prototype.send_bindingPhoneByCouponId = function(userId, loginName, couponId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bindingPhoneByCouponId', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_bindingPhoneByCouponId_args();
  args.userId = userId;
  args.loginName = loginName;
  args.couponId = couponId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_bindingPhoneByCouponId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_bindingPhoneByCouponId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('bindingPhoneByCouponId failed: unknown result');
};
ScoreCardServClient.prototype.createDiscountActiv = function(activ, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createDiscountActiv(activ);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createDiscountActiv(activ);
  }
};

ScoreCardServClient.prototype.send_createDiscountActiv = function(activ) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDiscountActiv', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_createDiscountActiv_args();
  args.activ = activ;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_createDiscountActiv = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_createDiscountActiv_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDiscountActiv failed: unknown result');
};
ScoreCardServClient.prototype.queryAllDiscountActiv = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryAllDiscountActiv();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryAllDiscountActiv();
  }
};

ScoreCardServClient.prototype.send_queryAllDiscountActiv = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryAllDiscountActiv', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryAllDiscountActiv_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryAllDiscountActiv = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryAllDiscountActiv_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryAllDiscountActiv failed: unknown result');
};
ScoreCardServClient.prototype.queryDiscountList = function(activ, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryDiscountList(activ);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryDiscountList(activ);
  }
};

ScoreCardServClient.prototype.send_queryDiscountList = function(activ) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryDiscountList', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryDiscountList_args();
  args.activ = activ;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryDiscountList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryDiscountList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryDiscountList failed: unknown result');
};
ScoreCardServClient.prototype.queryActivDetail = function(activId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryActivDetail(activId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryActivDetail(activId);
  }
};

ScoreCardServClient.prototype.send_queryActivDetail = function(activId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryActivDetail', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_queryActivDetail_args();
  args.activId = activId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_queryActivDetail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_queryActivDetail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryActivDetail failed: unknown result');
};
ScoreCardServClient.prototype.updateDiscountActiv = function(activ, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDiscountActiv(activ);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDiscountActiv(activ);
  }
};

ScoreCardServClient.prototype.send_updateDiscountActiv = function(activ) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDiscountActiv', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_updateDiscountActiv_args();
  args.activ = activ;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_updateDiscountActiv = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_updateDiscountActiv_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDiscountActiv failed: unknown result');
};
ScoreCardServClient.prototype.InvalidCoupon = function(couponId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_InvalidCoupon(couponId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_InvalidCoupon(couponId);
  }
};

ScoreCardServClient.prototype.send_InvalidCoupon = function(couponId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('InvalidCoupon', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_InvalidCoupon_args();
  args.couponId = couponId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_InvalidCoupon = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_InvalidCoupon_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('InvalidCoupon failed: unknown result');
};
ScoreCardServClient.prototype.updateDiscountStateAndOrderId = function(orderId, couponId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDiscountStateAndOrderId(orderId, couponId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDiscountStateAndOrderId(orderId, couponId);
  }
};

ScoreCardServClient.prototype.send_updateDiscountStateAndOrderId = function(orderId, couponId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDiscountStateAndOrderId', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreCardServ_updateDiscountStateAndOrderId_args();
  args.orderId = orderId;
  args.couponId = couponId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreCardServClient.prototype.recv_updateDiscountStateAndOrderId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreCardServ_updateDiscountStateAndOrderId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDiscountStateAndOrderId failed: unknown result');
};
ScoreCardServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ScoreCardServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ScoreCardServProcessor.prototype.process_createOneActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_createOneActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createOneActivity.length === 1) {
    Q.fcall(this._handler.createOneActivity, args.entity)
      .then(function(result) {
        var result = new ScoreCardServ_createOneActivity_result({success: result});
        output.writeMessageBegin("createOneActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_createOneActivity_result(err);
        output.writeMessageBegin("createOneActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createOneActivity(args.entity,  function (err, result) {
      var result = new ScoreCardServ_createOneActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createOneActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryActivities = function(seqid, input, output) {
  var args = new ScoreCardServ_queryActivities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryActivities.length === 2) {
    Q.fcall(this._handler.queryActivities, args.param, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_queryActivities_result({success: result});
        output.writeMessageBegin("queryActivities", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryActivities_result(err);
        output.writeMessageBegin("queryActivities", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryActivities(args.param, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_queryActivities_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryActivities", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryActivityById = function(seqid, input, output) {
  var args = new ScoreCardServ_queryActivityById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryActivityById.length === 1) {
    Q.fcall(this._handler.queryActivityById, args.activityId)
      .then(function(result) {
        var result = new ScoreCardServ_queryActivityById_result({success: result});
        output.writeMessageBegin("queryActivityById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryActivityById_result(err);
        output.writeMessageBegin("queryActivityById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryActivityById(args.activityId,  function (err, result) {
      var result = new ScoreCardServ_queryActivityById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryActivityById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryCards = function(seqid, input, output) {
  var args = new ScoreCardServ_queryCards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryCards.length === 3) {
    Q.fcall(this._handler.queryCards, args.activityId, args.param, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_queryCards_result({success: result});
        output.writeMessageBegin("queryCards", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryCards_result(err);
        output.writeMessageBegin("queryCards", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryCards(args.activityId, args.param, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_queryCards_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryCards", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryCardById = function(seqid, input, output) {
  var args = new ScoreCardServ_queryCardById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryCardById.length === 1) {
    Q.fcall(this._handler.queryCardById, args.cardId)
      .then(function(result) {
        var result = new ScoreCardServ_queryCardById_result({success: result});
        output.writeMessageBegin("queryCardById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryCardById_result(err);
        output.writeMessageBegin("queryCardById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryCardById(args.cardId,  function (err, result) {
      var result = new ScoreCardServ_queryCardById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryCardById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryRechargeCards = function(seqid, input, output) {
  var args = new ScoreCardServ_queryRechargeCards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRechargeCards.length === 2) {
    Q.fcall(this._handler.queryRechargeCards, args.userId, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_queryRechargeCards_result({success: result});
        output.writeMessageBegin("queryRechargeCards", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryRechargeCards_result(err);
        output.writeMessageBegin("queryRechargeCards", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRechargeCards(args.userId, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_queryRechargeCards_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryRechargeCards", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryRechargeCardById = function(seqid, input, output) {
  var args = new ScoreCardServ_queryRechargeCardById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRechargeCardById.length === 1) {
    Q.fcall(this._handler.queryRechargeCardById, args.rechargeCardId)
      .then(function(result) {
        var result = new ScoreCardServ_queryRechargeCardById_result({success: result});
        output.writeMessageBegin("queryRechargeCardById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryRechargeCardById_result(err);
        output.writeMessageBegin("queryRechargeCardById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRechargeCardById(args.rechargeCardId,  function (err, result) {
      var result = new ScoreCardServ_queryRechargeCardById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryRechargeCardById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_exportExcelByqueryCards = function(seqid, input, output) {
  var args = new ScoreCardServ_exportExcelByqueryCards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportExcelByqueryCards.length === 3) {
    Q.fcall(this._handler.exportExcelByqueryCards, args.activityId, args.param, args.psd)
      .then(function(result) {
        var result = new ScoreCardServ_exportExcelByqueryCards_result({success: result});
        output.writeMessageBegin("exportExcelByqueryCards", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_exportExcelByqueryCards_result(err);
        output.writeMessageBegin("exportExcelByqueryCards", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportExcelByqueryCards(args.activityId, args.param, args.psd,  function (err, result) {
      var result = new ScoreCardServ_exportExcelByqueryCards_result((err != null ? err : {success: result}));
      output.writeMessageBegin("exportExcelByqueryCards", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_recharge = function(seqid, input, output) {
  var args = new ScoreCardServ_recharge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.recharge.length === 1) {
    Q.fcall(this._handler.recharge, args.param)
      .then(function(result) {
        var result = new ScoreCardServ_recharge_result({success: result});
        output.writeMessageBegin("recharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_recharge_result(err);
        output.writeMessageBegin("recharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.recharge(args.param,  function (err, result) {
      var result = new ScoreCardServ_recharge_result((err != null ? err : {success: result}));
      output.writeMessageBegin("recharge", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_validataPassword = function(seqid, input, output) {
  var args = new ScoreCardServ_validataPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validataPassword.length === 1) {
    Q.fcall(this._handler.validataPassword, args.validataStr)
      .then(function(result) {
        var result = new ScoreCardServ_validataPassword_result({success: result});
        output.writeMessageBegin("validataPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_validataPassword_result(err);
        output.writeMessageBegin("validataPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validataPassword(args.validataStr,  function (err, result) {
      var result = new ScoreCardServ_validataPassword_result((err != null ? err : {success: result}));
      output.writeMessageBegin("validataPassword", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_directRecharge = function(seqid, input, output) {
  var args = new ScoreCardServ_directRecharge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.directRecharge.length === 1) {
    Q.fcall(this._handler.directRecharge, args.params)
      .then(function(result) {
        var result = new ScoreCardServ_directRecharge_result({success: result});
        output.writeMessageBegin("directRecharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_directRecharge_result(err);
        output.writeMessageBegin("directRecharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.directRecharge(args.params,  function (err, result) {
      var result = new ScoreCardServ_directRecharge_result((err != null ? err : {success: result}));
      output.writeMessageBegin("directRecharge", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_invalidOneActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_invalidOneActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.invalidOneActivity.length === 2) {
    Q.fcall(this._handler.invalidOneActivity, args.activityId, args.psd)
      .then(function(result) {
        var result = new ScoreCardServ_invalidOneActivity_result({success: result});
        output.writeMessageBegin("invalidOneActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_invalidOneActivity_result(err);
        output.writeMessageBegin("invalidOneActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.invalidOneActivity(args.activityId, args.psd,  function (err, result) {
      var result = new ScoreCardServ_invalidOneActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("invalidOneActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_createRedPaperActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_createRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createRedPaperActivity.length === 2) {
    Q.fcall(this._handler.createRedPaperActivity, args.activity, args.userId)
      .then(function(result) {
        var result = new ScoreCardServ_createRedPaperActivity_result({success: result});
        output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_createRedPaperActivity_result(err);
        output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createRedPaperActivity(args.activity, args.userId,  function (err, result) {
      var result = new ScoreCardServ_createRedPaperActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_updateRedPaperActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_updateRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateRedPaperActivity.length === 2) {
    Q.fcall(this._handler.updateRedPaperActivity, args.activity, args.userId)
      .then(function(result) {
        var result = new ScoreCardServ_updateRedPaperActivity_result({success: result});
        output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_updateRedPaperActivity_result(err);
        output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateRedPaperActivity(args.activity, args.userId,  function (err, result) {
      var result = new ScoreCardServ_updateRedPaperActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_invalidRedPaperActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_invalidRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.invalidRedPaperActivity.length === 2) {
    Q.fcall(this._handler.invalidRedPaperActivity, args.activityId, args.userId)
      .then(function(result) {
        var result = new ScoreCardServ_invalidRedPaperActivity_result({success: result});
        output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_invalidRedPaperActivity_result(err);
        output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.invalidRedPaperActivity(args.activityId, args.userId,  function (err, result) {
      var result = new ScoreCardServ_invalidRedPaperActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("invalidRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryOneRedPaperActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_queryOneRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryOneRedPaperActivity.length === 1) {
    Q.fcall(this._handler.queryOneRedPaperActivity, args.activityId)
      .then(function(result) {
        var result = new ScoreCardServ_queryOneRedPaperActivity_result({success: result});
        output.writeMessageBegin("queryOneRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryOneRedPaperActivity_result(err);
        output.writeMessageBegin("queryOneRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryOneRedPaperActivity(args.activityId,  function (err, result) {
      var result = new ScoreCardServ_queryOneRedPaperActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryOneRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryRedPaperActivity = function(seqid, input, output) {
  var args = new ScoreCardServ_queryRedPaperActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRedPaperActivity.length === 1) {
    Q.fcall(this._handler.queryRedPaperActivity, args.encryActivityId)
      .then(function(result) {
        var result = new ScoreCardServ_queryRedPaperActivity_result({success: result});
        output.writeMessageBegin("queryRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryRedPaperActivity_result(err);
        output.writeMessageBegin("queryRedPaperActivity", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRedPaperActivity(args.encryActivityId,  function (err, result) {
      var result = new ScoreCardServ_queryRedPaperActivity_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryRedPaperActivity", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryRedPaperActivityList = function(seqid, input, output) {
  var args = new ScoreCardServ_queryRedPaperActivityList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRedPaperActivityList.length === 2) {
    Q.fcall(this._handler.queryRedPaperActivityList, args.queryParam, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_queryRedPaperActivityList_result({success: result});
        output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryRedPaperActivityList_result(err);
        output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRedPaperActivityList(args.queryParam, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_queryRedPaperActivityList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryRedPaperActivityList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryRedPaperReceivedList = function(seqid, input, output) {
  var args = new ScoreCardServ_queryRedPaperReceivedList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryRedPaperReceivedList.length === 3) {
    Q.fcall(this._handler.queryRedPaperReceivedList, args.activityId, args.sendQueryParam, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_queryRedPaperReceivedList_result({success: result});
        output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryRedPaperReceivedList_result(err);
        output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryRedPaperReceivedList(args.activityId, args.sendQueryParam, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_queryRedPaperReceivedList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_getRedPaperReceivedList = function(seqid, input, output) {
  var args = new ScoreCardServ_getRedPaperReceivedList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRedPaperReceivedList.length === 3) {
    Q.fcall(this._handler.getRedPaperReceivedList, args.encryActivityId, args.sendQueryParam, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_getRedPaperReceivedList_result({success: result});
        output.writeMessageBegin("getRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_getRedPaperReceivedList_result(err);
        output.writeMessageBegin("getRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRedPaperReceivedList(args.encryActivityId, args.sendQueryParam, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_getRedPaperReceivedList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRedPaperReceivedList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_exportRedPaperExcelForReceived = function(seqid, input, output) {
  var args = new ScoreCardServ_exportRedPaperExcelForReceived_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportRedPaperExcelForReceived.length === 2) {
    Q.fcall(this._handler.exportRedPaperExcelForReceived, args.activityId, args.params)
      .then(function(result) {
        var result = new ScoreCardServ_exportRedPaperExcelForReceived_result({success: result});
        output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_exportRedPaperExcelForReceived_result(err);
        output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportRedPaperExcelForReceived(args.activityId, args.params,  function (err, result) {
      var result = new ScoreCardServ_exportRedPaperExcelForReceived_result((err != null ? err : {success: result}));
      output.writeMessageBegin("exportRedPaperExcelForReceived", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_generateH5Url = function(seqid, input, output) {
  var args = new ScoreCardServ_generateH5Url_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generateH5Url.length === 1) {
    Q.fcall(this._handler.generateH5Url, args.param)
      .then(function(result) {
        var result = new ScoreCardServ_generateH5Url_result({success: result});
        output.writeMessageBegin("generateH5Url", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_generateH5Url_result(err);
        output.writeMessageBegin("generateH5Url", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.generateH5Url(args.param,  function (err, result) {
      var result = new ScoreCardServ_generateH5Url_result((err != null ? err : {success: result}));
      output.writeMessageBegin("generateH5Url", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_receiveRedbag = function(seqid, input, output) {
  var args = new ScoreCardServ_receiveRedbag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.receiveRedbag.length === 2) {
    Q.fcall(this._handler.receiveRedbag, args.encryActivityId, args.mobile)
      .then(function(result) {
        var result = new ScoreCardServ_receiveRedbag_result({success: result});
        output.writeMessageBegin("receiveRedbag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_receiveRedbag_result(err);
        output.writeMessageBegin("receiveRedbag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.receiveRedbag(args.encryActivityId, args.mobile,  function (err, result) {
      var result = new ScoreCardServ_receiveRedbag_result((err != null ? err : {success: result}));
      output.writeMessageBegin("receiveRedbag", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_activityStatistic = function(seqid, input, output) {
  var args = new ScoreCardServ_activityStatistic_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.activityStatistic.length === 2) {
    Q.fcall(this._handler.activityStatistic, args.param, args.pagination)
      .then(function(result) {
        var result = new ScoreCardServ_activityStatistic_result({success: result});
        output.writeMessageBegin("activityStatistic", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_activityStatistic_result(err);
        output.writeMessageBegin("activityStatistic", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.activityStatistic(args.param, args.pagination,  function (err, result) {
      var result = new ScoreCardServ_activityStatistic_result((err != null ? err : {success: result}));
      output.writeMessageBegin("activityStatistic", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_exprotActivityStatistic = function(seqid, input, output) {
  var args = new ScoreCardServ_exprotActivityStatistic_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exprotActivityStatistic.length === 1) {
    Q.fcall(this._handler.exprotActivityStatistic, args.param)
      .then(function(result) {
        var result = new ScoreCardServ_exprotActivityStatistic_result({success: result});
        output.writeMessageBegin("exprotActivityStatistic", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_exprotActivityStatistic_result(err);
        output.writeMessageBegin("exprotActivityStatistic", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exprotActivityStatistic(args.param,  function (err, result) {
      var result = new ScoreCardServ_exprotActivityStatistic_result((err != null ? err : {success: result}));
      output.writeMessageBegin("exprotActivityStatistic", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_chinaMobileNotifyOrder = function(seqid, input, output) {
  var args = new ScoreCardServ_chinaMobileNotifyOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.chinaMobileNotifyOrder.length === 1) {
    Q.fcall(this._handler.chinaMobileNotifyOrder, args.req)
      .then(function(result) {
        var result = new ScoreCardServ_chinaMobileNotifyOrder_result({success: result});
        output.writeMessageBegin("chinaMobileNotifyOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_chinaMobileNotifyOrder_result(err);
        output.writeMessageBegin("chinaMobileNotifyOrder", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.chinaMobileNotifyOrder(args.req,  function (err, result) {
      var result = new ScoreCardServ_chinaMobileNotifyOrder_result((err != null ? err : {success: result}));
      output.writeMessageBegin("chinaMobileNotifyOrder", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_resendVirtualCode = function(seqid, input, output) {
  var args = new ScoreCardServ_resendVirtualCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resendVirtualCode.length === 1) {
    Q.fcall(this._handler.resendVirtualCode, args.req)
      .then(function(result) {
        var result = new ScoreCardServ_resendVirtualCode_result({success: result});
        output.writeMessageBegin("resendVirtualCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_resendVirtualCode_result(err);
        output.writeMessageBegin("resendVirtualCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resendVirtualCode(args.req,  function (err, result) {
      var result = new ScoreCardServ_resendVirtualCode_result((err != null ? err : {success: result}));
      output.writeMessageBegin("resendVirtualCode", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_setCodeInvalid = function(seqid, input, output) {
  var args = new ScoreCardServ_setCodeInvalid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setCodeInvalid.length === 1) {
    Q.fcall(this._handler.setCodeInvalid, args.req)
      .then(function(result) {
        var result = new ScoreCardServ_setCodeInvalid_result({success: result});
        output.writeMessageBegin("setCodeInvalid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_setCodeInvalid_result(err);
        output.writeMessageBegin("setCodeInvalid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setCodeInvalid(args.req,  function (err, result) {
      var result = new ScoreCardServ_setCodeInvalid_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setCodeInvalid", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryCouponListByUserId = function(seqid, input, output) {
  var args = new ScoreCardServ_queryCouponListByUserId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryCouponListByUserId.length === 1) {
    Q.fcall(this._handler.queryCouponListByUserId, args.userId)
      .then(function(result) {
        var result = new ScoreCardServ_queryCouponListByUserId_result({success: result});
        output.writeMessageBegin("queryCouponListByUserId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryCouponListByUserId_result(err);
        output.writeMessageBegin("queryCouponListByUserId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryCouponListByUserId(args.userId,  function (err, result) {
      var result = new ScoreCardServ_queryCouponListByUserId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryCouponListByUserId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_bindingPhoneByCouponId = function(seqid, input, output) {
  var args = new ScoreCardServ_bindingPhoneByCouponId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bindingPhoneByCouponId.length === 3) {
    Q.fcall(this._handler.bindingPhoneByCouponId, args.userId, args.loginName, args.couponId)
      .then(function(result) {
        var result = new ScoreCardServ_bindingPhoneByCouponId_result({success: result});
        output.writeMessageBegin("bindingPhoneByCouponId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_bindingPhoneByCouponId_result(err);
        output.writeMessageBegin("bindingPhoneByCouponId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.bindingPhoneByCouponId(args.userId, args.loginName, args.couponId,  function (err, result) {
      var result = new ScoreCardServ_bindingPhoneByCouponId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("bindingPhoneByCouponId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_createDiscountActiv = function(seqid, input, output) {
  var args = new ScoreCardServ_createDiscountActiv_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createDiscountActiv.length === 1) {
    Q.fcall(this._handler.createDiscountActiv, args.activ)
      .then(function(result) {
        var result = new ScoreCardServ_createDiscountActiv_result({success: result});
        output.writeMessageBegin("createDiscountActiv", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_createDiscountActiv_result(err);
        output.writeMessageBegin("createDiscountActiv", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createDiscountActiv(args.activ,  function (err, result) {
      var result = new ScoreCardServ_createDiscountActiv_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createDiscountActiv", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryAllDiscountActiv = function(seqid, input, output) {
  var args = new ScoreCardServ_queryAllDiscountActiv_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryAllDiscountActiv.length === 0) {
    Q.fcall(this._handler.queryAllDiscountActiv)
      .then(function(result) {
        var result = new ScoreCardServ_queryAllDiscountActiv_result({success: result});
        output.writeMessageBegin("queryAllDiscountActiv", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryAllDiscountActiv_result(err);
        output.writeMessageBegin("queryAllDiscountActiv", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryAllDiscountActiv( function (err, result) {
      var result = new ScoreCardServ_queryAllDiscountActiv_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryAllDiscountActiv", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryDiscountList = function(seqid, input, output) {
  var args = new ScoreCardServ_queryDiscountList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryDiscountList.length === 1) {
    Q.fcall(this._handler.queryDiscountList, args.activ)
      .then(function(result) {
        var result = new ScoreCardServ_queryDiscountList_result({success: result});
        output.writeMessageBegin("queryDiscountList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryDiscountList_result(err);
        output.writeMessageBegin("queryDiscountList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryDiscountList(args.activ,  function (err, result) {
      var result = new ScoreCardServ_queryDiscountList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryDiscountList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_queryActivDetail = function(seqid, input, output) {
  var args = new ScoreCardServ_queryActivDetail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryActivDetail.length === 1) {
    Q.fcall(this._handler.queryActivDetail, args.activId)
      .then(function(result) {
        var result = new ScoreCardServ_queryActivDetail_result({success: result});
        output.writeMessageBegin("queryActivDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_queryActivDetail_result(err);
        output.writeMessageBegin("queryActivDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryActivDetail(args.activId,  function (err, result) {
      var result = new ScoreCardServ_queryActivDetail_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryActivDetail", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_updateDiscountActiv = function(seqid, input, output) {
  var args = new ScoreCardServ_updateDiscountActiv_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDiscountActiv.length === 1) {
    Q.fcall(this._handler.updateDiscountActiv, args.activ)
      .then(function(result) {
        var result = new ScoreCardServ_updateDiscountActiv_result({success: result});
        output.writeMessageBegin("updateDiscountActiv", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_updateDiscountActiv_result(err);
        output.writeMessageBegin("updateDiscountActiv", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDiscountActiv(args.activ,  function (err, result) {
      var result = new ScoreCardServ_updateDiscountActiv_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateDiscountActiv", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_InvalidCoupon = function(seqid, input, output) {
  var args = new ScoreCardServ_InvalidCoupon_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.InvalidCoupon.length === 1) {
    Q.fcall(this._handler.InvalidCoupon, args.couponId)
      .then(function(result) {
        var result = new ScoreCardServ_InvalidCoupon_result({success: result});
        output.writeMessageBegin("InvalidCoupon", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_InvalidCoupon_result(err);
        output.writeMessageBegin("InvalidCoupon", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.InvalidCoupon(args.couponId,  function (err, result) {
      var result = new ScoreCardServ_InvalidCoupon_result((err != null ? err : {success: result}));
      output.writeMessageBegin("InvalidCoupon", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreCardServProcessor.prototype.process_updateDiscountStateAndOrderId = function(seqid, input, output) {
  var args = new ScoreCardServ_updateDiscountStateAndOrderId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDiscountStateAndOrderId.length === 2) {
    Q.fcall(this._handler.updateDiscountStateAndOrderId, args.orderId, args.couponId)
      .then(function(result) {
        var result = new ScoreCardServ_updateDiscountStateAndOrderId_result({success: result});
        output.writeMessageBegin("updateDiscountStateAndOrderId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreCardServ_updateDiscountStateAndOrderId_result(err);
        output.writeMessageBegin("updateDiscountStateAndOrderId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDiscountStateAndOrderId(args.orderId, args.couponId,  function (err, result) {
      var result = new ScoreCardServ_updateDiscountStateAndOrderId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateDiscountStateAndOrderId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

