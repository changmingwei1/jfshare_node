//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var seller_ttypes = require('./seller_types')
var product_ttypes = require('./product_types')


var ttypes = module.exports = {};
Item = module.exports.Item = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.count = null;
  this.price = null;
  this.wi = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.wi !== undefined) {
      this.wi = args.wi;
    }
  }
};
Item.prototype = {};
Item.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.wi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Item.prototype.write = function(output) {
  output.writeStructBegin('Item');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 4);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.wi !== null && this.wi !== undefined) {
    output.writeFieldBegin('wi', Thrift.Type.STRING, 5);
    output.writeString(this.wi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ItemPlus = module.exports.ItemPlus = function(args) {
  this.product = null;
  this.count = null;
  this.lockCount = null;
  this.cartPrice = null;
  this.totalCount = null;
  this.skuCount = null;
  this.wi = null;
  this.currBuy = null;
  this.sellerSendTime = null;
  if (args) {
    if (args.product !== undefined) {
      this.product = args.product;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.lockCount !== undefined) {
      this.lockCount = args.lockCount;
    }
    if (args.cartPrice !== undefined) {
      this.cartPrice = args.cartPrice;
    }
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.skuCount !== undefined) {
      this.skuCount = args.skuCount;
    }
    if (args.wi !== undefined) {
      this.wi = args.wi;
    }
    if (args.currBuy !== undefined) {
      this.currBuy = args.currBuy;
    }
    if (args.sellerSendTime !== undefined) {
      this.sellerSendTime = args.sellerSendTime;
    }
  }
};
ItemPlus.prototype = {};
ItemPlus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new product_ttypes.Product();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lockCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cartPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.totalCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.skuCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.wi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.currBuy = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.sellerSendTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ItemPlus.prototype.write = function(output) {
  output.writeStructBegin('ItemPlus');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 1);
    this.product.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.lockCount !== null && this.lockCount !== undefined) {
    output.writeFieldBegin('lockCount', Thrift.Type.I32, 3);
    output.writeI32(this.lockCount);
    output.writeFieldEnd();
  }
  if (this.cartPrice !== null && this.cartPrice !== undefined) {
    output.writeFieldBegin('cartPrice', Thrift.Type.STRING, 4);
    output.writeString(this.cartPrice);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I32, 5);
    output.writeI32(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.skuCount !== null && this.skuCount !== undefined) {
    output.writeFieldBegin('skuCount', Thrift.Type.I32, 6);
    output.writeI32(this.skuCount);
    output.writeFieldEnd();
  }
  if (this.wi !== null && this.wi !== undefined) {
    output.writeFieldBegin('wi', Thrift.Type.STRING, 7);
    output.writeString(this.wi);
    output.writeFieldEnd();
  }
  if (this.currBuy !== null && this.currBuy !== undefined) {
    output.writeFieldBegin('currBuy', Thrift.Type.I32, 8);
    output.writeI32(this.currBuy);
    output.writeFieldEnd();
  }
  if (this.sellerSendTime !== null && this.sellerSendTime !== undefined) {
    output.writeFieldBegin('sellerSendTime', Thrift.Type.I32, 9);
    output.writeI32(this.sellerSendTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ItemDetail = module.exports.ItemDetail = function(args) {
  this.product = null;
  if (args) {
    if (args.product !== undefined) {
      this.product = args.product;
    }
  }
};
ItemDetail.prototype = {};
ItemDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.ItemPlus();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ItemDetail.prototype.write = function(output) {
  output.writeStructBegin('ItemDetail');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 1);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

sellerItemDetail = module.exports.sellerItemDetail = function(args) {
  this.seller = null;
  this.itemDetailList = null;
  if (args) {
    if (args.seller !== undefined) {
      this.seller = args.seller;
    }
    if (args.itemDetailList !== undefined) {
      this.itemDetailList = args.itemDetailList;
    }
  }
};
sellerItemDetail.prototype = {};
sellerItemDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new seller_ttypes.Seller();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.itemDetailList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ItemDetail();
          elem6.read(input);
          this.itemDetailList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

sellerItemDetail.prototype.write = function(output) {
  output.writeStructBegin('sellerItemDetail');
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 1);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  if (this.itemDetailList !== null && this.itemDetailList !== undefined) {
    output.writeFieldBegin('itemDetailList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.itemDetailList.length);
    for (var iter7 in this.itemDetailList)
    {
      if (this.itemDetailList.hasOwnProperty(iter7))
      {
        iter7 = this.itemDetailList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartResult = module.exports.CartResult = function(args) {
  this.result = null;
  this.itemList = null;
  this.invalidItemList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.itemList !== undefined) {
      this.itemList = args.itemList;
    }
    if (args.invalidItemList !== undefined) {
      this.invalidItemList = args.invalidItemList;
    }
  }
};
CartResult.prototype = {};
CartResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.itemList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.sellerItemDetail();
          elem14.read(input);
          this.itemList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.invalidItemList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.ItemDetail();
          elem21.read(input);
          this.invalidItemList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartResult.prototype.write = function(output) {
  output.writeStructBegin('CartResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.itemList !== null && this.itemList !== undefined) {
    output.writeFieldBegin('itemList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.itemList.length);
    for (var iter22 in this.itemList)
    {
      if (this.itemList.hasOwnProperty(iter22))
      {
        iter22 = this.itemList[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invalidItemList !== null && this.invalidItemList !== undefined) {
    output.writeFieldBegin('invalidItemList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.invalidItemList.length);
    for (var iter23 in this.invalidItemList)
    {
      if (this.invalidItemList.hasOwnProperty(iter23))
      {
        iter23 = this.invalidItemList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MiniCartResult = module.exports.MiniCartResult = function(args) {
  this.result = null;
  this.pList = null;
  this.validCount = null;
  this.invalidCount = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.pList !== undefined) {
      this.pList = args.pList;
    }
    if (args.validCount !== undefined) {
      this.validCount = args.validCount;
    }
    if (args.invalidCount !== undefined) {
      this.invalidCount = args.invalidCount;
    }
  }
};
MiniCartResult.prototype = {};
MiniCartResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.pList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.ItemPlus();
          elem30.read(input);
          this.pList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.validCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.invalidCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MiniCartResult.prototype.write = function(output) {
  output.writeStructBegin('MiniCartResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pList !== null && this.pList !== undefined) {
    output.writeFieldBegin('pList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.pList.length);
    for (var iter31 in this.pList)
    {
      if (this.pList.hasOwnProperty(iter31))
      {
        iter31 = this.pList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validCount !== null && this.validCount !== undefined) {
    output.writeFieldBegin('validCount', Thrift.Type.I32, 3);
    output.writeI32(this.validCount);
    output.writeFieldEnd();
  }
  if (this.invalidCount !== null && this.invalidCount !== undefined) {
    output.writeFieldBegin('invalidCount', Thrift.Type.I32, 4);
    output.writeI32(this.invalidCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CartKey = module.exports.CartKey = function(args) {
  this.productId = null;
  this.skuNum = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
  }
};
CartKey.prototype = {};
CartKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartKey.prototype.write = function(output) {
  output.writeStructBegin('CartKey');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CheckItemInfo = module.exports.CheckItemInfo = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.skuCount = null;
  this.currQuantity = null;
  this.maxBuyLimit = null;
  this.currBuy = null;
  this.isOutOfGauge = null;
  this.isOutOfStock = null;
  if (args) {
    if (args.productId !== undefined) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined) {
      this.skuNum = args.skuNum;
    }
    if (args.skuCount !== undefined) {
      this.skuCount = args.skuCount;
    }
    if (args.currQuantity !== undefined) {
      this.currQuantity = args.currQuantity;
    }
    if (args.maxBuyLimit !== undefined) {
      this.maxBuyLimit = args.maxBuyLimit;
    }
    if (args.currBuy !== undefined) {
      this.currBuy = args.currBuy;
    }
    if (args.isOutOfGauge !== undefined) {
      this.isOutOfGauge = args.isOutOfGauge;
    }
    if (args.isOutOfStock !== undefined) {
      this.isOutOfStock = args.isOutOfStock;
    }
  }
};
CheckItemInfo.prototype = {};
CheckItemInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.skuCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.currQuantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxBuyLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.currBuy = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isOutOfGauge = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isOutOfStock = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckItemInfo.prototype.write = function(output) {
  output.writeStructBegin('CheckItemInfo');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.skuCount !== null && this.skuCount !== undefined) {
    output.writeFieldBegin('skuCount', Thrift.Type.I32, 3);
    output.writeI32(this.skuCount);
    output.writeFieldEnd();
  }
  if (this.currQuantity !== null && this.currQuantity !== undefined) {
    output.writeFieldBegin('currQuantity', Thrift.Type.I32, 4);
    output.writeI32(this.currQuantity);
    output.writeFieldEnd();
  }
  if (this.maxBuyLimit !== null && this.maxBuyLimit !== undefined) {
    output.writeFieldBegin('maxBuyLimit', Thrift.Type.I32, 5);
    output.writeI32(this.maxBuyLimit);
    output.writeFieldEnd();
  }
  if (this.currBuy !== null && this.currBuy !== undefined) {
    output.writeFieldBegin('currBuy', Thrift.Type.I32, 6);
    output.writeI32(this.currBuy);
    output.writeFieldEnd();
  }
  if (this.isOutOfGauge !== null && this.isOutOfGauge !== undefined) {
    output.writeFieldBegin('isOutOfGauge', Thrift.Type.BOOL, 7);
    output.writeBool(this.isOutOfGauge);
    output.writeFieldEnd();
  }
  if (this.isOutOfStock !== null && this.isOutOfStock !== undefined) {
    output.writeFieldBegin('isOutOfStock', Thrift.Type.BOOL, 8);
    output.writeBool(this.isOutOfStock);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CheckCartResult = module.exports.CheckCartResult = function(args) {
  this.result = null;
  this.checkList = null;
  this.value = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.checkList !== undefined) {
      this.checkList = args.checkList;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
CheckCartResult.prototype = {};
CheckCartResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.checkList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.CheckItemInfo();
          elem38.read(input);
          this.checkList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckCartResult.prototype.write = function(output) {
  output.writeStructBegin('CheckCartResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.checkList !== null && this.checkList !== undefined) {
    output.writeFieldBegin('checkList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.checkList.length);
    for (var iter39 in this.checkList)
    {
      if (this.checkList.hasOwnProperty(iter39))
      {
        iter39 = this.checkList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

