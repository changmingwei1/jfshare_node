//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./score_types');
//HELPER FUNCTIONS AND STRUCTURES

ScoreServ_income_args = function(args) {
  this.score = null;
  if (args) {
    if (args.score !== undefined) {
      this.score = args.score;
    }
  }
};
ScoreServ_income_args.prototype = {};
ScoreServ_income_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.score = new ttypes.Score();
        this.score.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_income_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_income_args');
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRUCT, 1);
    this.score.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_income_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreServ_income_result.prototype = {};
ScoreServ_income_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_income_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_income_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_expenditure_args = function(args) {
  this.score = null;
  if (args) {
    if (args.score !== undefined) {
      this.score = args.score;
    }
  }
};
ScoreServ_expenditure_args.prototype = {};
ScoreServ_expenditure_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.score = new ttypes.Score();
        this.score.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_expenditure_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_expenditure_args');
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRUCT, 1);
    this.score.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_expenditure_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreServ_expenditure_result.prototype = {};
ScoreServ_expenditure_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_expenditure_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_expenditure_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_getScore_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ScoreServ_getScore_args.prototype = {};
ScoreServ_getScore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_getScore_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_getScore_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_getScore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreServ_getScore_result.prototype = {};
ScoreServ_getScore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScoreResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_getScore_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_getScore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_queryScoreTrade_args = function(args) {
  this.param = null;
  this.pagination = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
ScoreServ_queryScoreTrade_args.prototype = {};
ScoreServ_queryScoreTrade_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ScoreTradeQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_queryScoreTrade_args.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_queryScoreTrade_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServ_queryScoreTrade_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ScoreServ_queryScoreTrade_result.prototype = {};
ScoreServ_queryScoreTrade_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScoreTradeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScoreServ_queryScoreTrade_result.prototype.write = function(output) {
  output.writeStructBegin('ScoreServ_queryScoreTrade_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScoreServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ScoreServClient.prototype = {};
ScoreServClient.prototype.seqid = function() { return this._seqid; }
ScoreServClient.prototype.new_seqid = function() { return this._seqid += 1; }
ScoreServClient.prototype.income = function(score, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_income(score);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_income(score);
  }
};

ScoreServClient.prototype.send_income = function(score) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('income', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreServ_income_args();
  args.score = score;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreServClient.prototype.recv_income = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreServ_income_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('income failed: unknown result');
};
ScoreServClient.prototype.expenditure = function(score, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expenditure(score);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expenditure(score);
  }
};

ScoreServClient.prototype.send_expenditure = function(score) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expenditure', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreServ_expenditure_args();
  args.score = score;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreServClient.prototype.recv_expenditure = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreServ_expenditure_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expenditure failed: unknown result');
};
ScoreServClient.prototype.getScore = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScore(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScore(userId);
  }
};

ScoreServClient.prototype.send_getScore = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScore', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreServ_getScore_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreServClient.prototype.recv_getScore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreServ_getScore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScore failed: unknown result');
};
ScoreServClient.prototype.queryScoreTrade = function(param, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryScoreTrade(param, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryScoreTrade(param, pagination);
  }
};

ScoreServClient.prototype.send_queryScoreTrade = function(param, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryScoreTrade', Thrift.MessageType.CALL, this.seqid());
  var args = new ScoreServ_queryScoreTrade_args();
  args.param = param;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScoreServClient.prototype.recv_queryScoreTrade = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScoreServ_queryScoreTrade_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryScoreTrade failed: unknown result');
};
ScoreServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ScoreServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ScoreServProcessor.prototype.process_income = function(seqid, input, output) {
  var args = new ScoreServ_income_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.income.length === 1) {
    Q.fcall(this._handler.income, args.score)
      .then(function(result) {
        var result = new ScoreServ_income_result({success: result});
        output.writeMessageBegin("income", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreServ_income_result(err);
        output.writeMessageBegin("income", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.income(args.score,  function (err, result) {
      var result = new ScoreServ_income_result((err != null ? err : {success: result}));
      output.writeMessageBegin("income", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreServProcessor.prototype.process_expenditure = function(seqid, input, output) {
  var args = new ScoreServ_expenditure_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.expenditure.length === 1) {
    Q.fcall(this._handler.expenditure, args.score)
      .then(function(result) {
        var result = new ScoreServ_expenditure_result({success: result});
        output.writeMessageBegin("expenditure", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreServ_expenditure_result(err);
        output.writeMessageBegin("expenditure", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.expenditure(args.score,  function (err, result) {
      var result = new ScoreServ_expenditure_result((err != null ? err : {success: result}));
      output.writeMessageBegin("expenditure", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreServProcessor.prototype.process_getScore = function(seqid, input, output) {
  var args = new ScoreServ_getScore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScore.length === 1) {
    Q.fcall(this._handler.getScore, args.userId)
      .then(function(result) {
        var result = new ScoreServ_getScore_result({success: result});
        output.writeMessageBegin("getScore", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreServ_getScore_result(err);
        output.writeMessageBegin("getScore", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getScore(args.userId,  function (err, result) {
      var result = new ScoreServ_getScore_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getScore", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScoreServProcessor.prototype.process_queryScoreTrade = function(seqid, input, output) {
  var args = new ScoreServ_queryScoreTrade_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryScoreTrade.length === 2) {
    Q.fcall(this._handler.queryScoreTrade, args.param, args.pagination)
      .then(function(result) {
        var result = new ScoreServ_queryScoreTrade_result({success: result});
        output.writeMessageBegin("queryScoreTrade", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ScoreServ_queryScoreTrade_result(err);
        output.writeMessageBegin("queryScoreTrade", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryScoreTrade(args.param, args.pagination,  function (err, result) {
      var result = new ScoreServ_queryScoreTrade_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryScoreTrade", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

