//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./message_types');
//HELPER FUNCTIONS AND STRUCTURES

MessageServ_addSystemMessage_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
MessageServ_addSystemMessage_args.prototype = {};
MessageServ_addSystemMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.SystemMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_addSystemMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_addSystemMessage_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_addSystemMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_addSystemMessage_result.prototype = {};
MessageServ_addSystemMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_addSystemMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_addSystemMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_getSystemMessage_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
MessageServ_getSystemMessage_args.prototype = {};
MessageServ_getSystemMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.SystemMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_getSystemMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_getSystemMessage_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_getSystemMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_getSystemMessage_result.prototype = {};
MessageServ_getSystemMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SystemMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_getSystemMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_getSystemMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_deleteSystemMessage_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MessageServ_deleteSystemMessage_args.prototype = {};
MessageServ_deleteSystemMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_deleteSystemMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_deleteSystemMessage_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_deleteSystemMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_deleteSystemMessage_result.prototype = {};
MessageServ_deleteSystemMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_deleteSystemMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_deleteSystemMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_updateSystemMessage_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
MessageServ_updateSystemMessage_args.prototype = {};
MessageServ_updateSystemMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.SystemMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_updateSystemMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_updateSystemMessage_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_updateSystemMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_updateSystemMessage_result.prototype = {};
MessageServ_updateSystemMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_updateSystemMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_updateSystemMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_sendPush_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
MessageServ_sendPush_args.prototype = {};
MessageServ_sendPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.PushMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_sendPush_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_sendPush_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_sendPush_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_sendPush_result.prototype = {};
MessageServ_sendPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_sendPush_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_sendPush_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_getAppUpgradeInfo_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
MessageServ_getAppUpgradeInfo_args.prototype = {};
MessageServ_getAppUpgradeInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.GetUpgradeParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_getAppUpgradeInfo_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_getAppUpgradeInfo_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_getAppUpgradeInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_getAppUpgradeInfo_result.prototype = {};
MessageServ_getAppUpgradeInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AppUpgradeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_getAppUpgradeInfo_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_getAppUpgradeInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_addAppUpgradeInfo_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined) {
      this.info = args.info;
    }
  }
};
MessageServ_addAppUpgradeInfo_args.prototype = {};
MessageServ_addAppUpgradeInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.AppUpgradeInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_addAppUpgradeInfo_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_addAppUpgradeInfo_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_addAppUpgradeInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_addAppUpgradeInfo_result.prototype = {};
MessageServ_addAppUpgradeInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_addAppUpgradeInfo_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_addAppUpgradeInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_updateAppUpgradeInfo_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined) {
      this.info = args.info;
    }
  }
};
MessageServ_updateAppUpgradeInfo_args.prototype = {};
MessageServ_updateAppUpgradeInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.AppUpgradeInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_updateAppUpgradeInfo_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_updateAppUpgradeInfo_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_updateAppUpgradeInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_updateAppUpgradeInfo_result.prototype = {};
MessageServ_updateAppUpgradeInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_updateAppUpgradeInfo_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_updateAppUpgradeInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_getAppUpgradeInfoStr_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
MessageServ_getAppUpgradeInfoStr_args.prototype = {};
MessageServ_getAppUpgradeInfoStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.GetUpgradeParamStr();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_getAppUpgradeInfoStr_args.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_getAppUpgradeInfoStr_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServ_getAppUpgradeInfoStr_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MessageServ_getAppUpgradeInfoStr_result.prototype = {};
MessageServ_getAppUpgradeInfoStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AppUpgradeResultStr();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageServ_getAppUpgradeInfoStr_result.prototype.write = function(output) {
  output.writeStructBegin('MessageServ_getAppUpgradeInfoStr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
MessageServClient.prototype = {};
MessageServClient.prototype.seqid = function() { return this._seqid; }
MessageServClient.prototype.new_seqid = function() { return this._seqid += 1; }
MessageServClient.prototype.addSystemMessage = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addSystemMessage(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addSystemMessage(message);
  }
};

MessageServClient.prototype.send_addSystemMessage = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addSystemMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_addSystemMessage_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_addSystemMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_addSystemMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addSystemMessage failed: unknown result');
};
MessageServClient.prototype.getSystemMessage = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSystemMessage(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSystemMessage(message);
  }
};

MessageServClient.prototype.send_getSystemMessage = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSystemMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_getSystemMessage_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_getSystemMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_getSystemMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSystemMessage failed: unknown result');
};
MessageServClient.prototype.deleteSystemMessage = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteSystemMessage(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteSystemMessage(id);
  }
};

MessageServClient.prototype.send_deleteSystemMessage = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteSystemMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_deleteSystemMessage_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_deleteSystemMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_deleteSystemMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteSystemMessage failed: unknown result');
};
MessageServClient.prototype.updateSystemMessage = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSystemMessage(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSystemMessage(message);
  }
};

MessageServClient.prototype.send_updateSystemMessage = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSystemMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_updateSystemMessage_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_updateSystemMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_updateSystemMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSystemMessage failed: unknown result');
};
MessageServClient.prototype.sendPush = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendPush(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendPush(message);
  }
};

MessageServClient.prototype.send_sendPush = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendPush', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_sendPush_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_sendPush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_sendPush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendPush failed: unknown result');
};
MessageServClient.prototype.getAppUpgradeInfo = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAppUpgradeInfo(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAppUpgradeInfo(param);
  }
};

MessageServClient.prototype.send_getAppUpgradeInfo = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAppUpgradeInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_getAppUpgradeInfo_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_getAppUpgradeInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_getAppUpgradeInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAppUpgradeInfo failed: unknown result');
};
MessageServClient.prototype.addAppUpgradeInfo = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addAppUpgradeInfo(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addAppUpgradeInfo(info);
  }
};

MessageServClient.prototype.send_addAppUpgradeInfo = function(info) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addAppUpgradeInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_addAppUpgradeInfo_args();
  args.info = info;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_addAppUpgradeInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_addAppUpgradeInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addAppUpgradeInfo failed: unknown result');
};
MessageServClient.prototype.updateAppUpgradeInfo = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateAppUpgradeInfo(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateAppUpgradeInfo(info);
  }
};

MessageServClient.prototype.send_updateAppUpgradeInfo = function(info) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateAppUpgradeInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_updateAppUpgradeInfo_args();
  args.info = info;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_updateAppUpgradeInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_updateAppUpgradeInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateAppUpgradeInfo failed: unknown result');
};
MessageServClient.prototype.getAppUpgradeInfoStr = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAppUpgradeInfoStr(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAppUpgradeInfoStr(param);
  }
};

MessageServClient.prototype.send_getAppUpgradeInfoStr = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAppUpgradeInfoStr', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageServ_getAppUpgradeInfoStr_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServClient.prototype.recv_getAppUpgradeInfoStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageServ_getAppUpgradeInfoStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAppUpgradeInfoStr failed: unknown result');
};
MessageServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MessageServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MessageServProcessor.prototype.process_addSystemMessage = function(seqid, input, output) {
  var args = new MessageServ_addSystemMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addSystemMessage.length === 1) {
    Q.fcall(this._handler.addSystemMessage, args.message)
      .then(function(result) {
        var result = new MessageServ_addSystemMessage_result({success: result});
        output.writeMessageBegin("addSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_addSystemMessage_result(err);
        output.writeMessageBegin("addSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addSystemMessage(args.message,  function (err, result) {
      var result = new MessageServ_addSystemMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addSystemMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_getSystemMessage = function(seqid, input, output) {
  var args = new MessageServ_getSystemMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSystemMessage.length === 1) {
    Q.fcall(this._handler.getSystemMessage, args.message)
      .then(function(result) {
        var result = new MessageServ_getSystemMessage_result({success: result});
        output.writeMessageBegin("getSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_getSystemMessage_result(err);
        output.writeMessageBegin("getSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSystemMessage(args.message,  function (err, result) {
      var result = new MessageServ_getSystemMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSystemMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_deleteSystemMessage = function(seqid, input, output) {
  var args = new MessageServ_deleteSystemMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteSystemMessage.length === 1) {
    Q.fcall(this._handler.deleteSystemMessage, args.id)
      .then(function(result) {
        var result = new MessageServ_deleteSystemMessage_result({success: result});
        output.writeMessageBegin("deleteSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_deleteSystemMessage_result(err);
        output.writeMessageBegin("deleteSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteSystemMessage(args.id,  function (err, result) {
      var result = new MessageServ_deleteSystemMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteSystemMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_updateSystemMessage = function(seqid, input, output) {
  var args = new MessageServ_updateSystemMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSystemMessage.length === 1) {
    Q.fcall(this._handler.updateSystemMessage, args.message)
      .then(function(result) {
        var result = new MessageServ_updateSystemMessage_result({success: result});
        output.writeMessageBegin("updateSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_updateSystemMessage_result(err);
        output.writeMessageBegin("updateSystemMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSystemMessage(args.message,  function (err, result) {
      var result = new MessageServ_updateSystemMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateSystemMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_sendPush = function(seqid, input, output) {
  var args = new MessageServ_sendPush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendPush.length === 1) {
    Q.fcall(this._handler.sendPush, args.message)
      .then(function(result) {
        var result = new MessageServ_sendPush_result({success: result});
        output.writeMessageBegin("sendPush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_sendPush_result(err);
        output.writeMessageBegin("sendPush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendPush(args.message,  function (err, result) {
      var result = new MessageServ_sendPush_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendPush", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_getAppUpgradeInfo = function(seqid, input, output) {
  var args = new MessageServ_getAppUpgradeInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAppUpgradeInfo.length === 1) {
    Q.fcall(this._handler.getAppUpgradeInfo, args.param)
      .then(function(result) {
        var result = new MessageServ_getAppUpgradeInfo_result({success: result});
        output.writeMessageBegin("getAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_getAppUpgradeInfo_result(err);
        output.writeMessageBegin("getAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAppUpgradeInfo(args.param,  function (err, result) {
      var result = new MessageServ_getAppUpgradeInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_addAppUpgradeInfo = function(seqid, input, output) {
  var args = new MessageServ_addAppUpgradeInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addAppUpgradeInfo.length === 1) {
    Q.fcall(this._handler.addAppUpgradeInfo, args.info)
      .then(function(result) {
        var result = new MessageServ_addAppUpgradeInfo_result({success: result});
        output.writeMessageBegin("addAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_addAppUpgradeInfo_result(err);
        output.writeMessageBegin("addAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addAppUpgradeInfo(args.info,  function (err, result) {
      var result = new MessageServ_addAppUpgradeInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_updateAppUpgradeInfo = function(seqid, input, output) {
  var args = new MessageServ_updateAppUpgradeInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateAppUpgradeInfo.length === 1) {
    Q.fcall(this._handler.updateAppUpgradeInfo, args.info)
      .then(function(result) {
        var result = new MessageServ_updateAppUpgradeInfo_result({success: result});
        output.writeMessageBegin("updateAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_updateAppUpgradeInfo_result(err);
        output.writeMessageBegin("updateAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateAppUpgradeInfo(args.info,  function (err, result) {
      var result = new MessageServ_updateAppUpgradeInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateAppUpgradeInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServProcessor.prototype.process_getAppUpgradeInfoStr = function(seqid, input, output) {
  var args = new MessageServ_getAppUpgradeInfoStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAppUpgradeInfoStr.length === 1) {
    Q.fcall(this._handler.getAppUpgradeInfoStr, args.param)
      .then(function(result) {
        var result = new MessageServ_getAppUpgradeInfoStr_result({success: result});
        output.writeMessageBegin("getAppUpgradeInfoStr", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageServ_getAppUpgradeInfoStr_result(err);
        output.writeMessageBegin("getAppUpgradeInfoStr", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAppUpgradeInfoStr(args.param,  function (err, result) {
      var result = new MessageServ_getAppUpgradeInfoStr_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getAppUpgradeInfoStr", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

