//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = require('./common_types');
//HELPER FUNCTIONS AND STRUCTURES

CommonServ_province_args = function(args) {
};
CommonServ_province_args.prototype = {};
CommonServ_province_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_province_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_province_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_province_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AreaInfoResult(args.success);
    }
  }
};
CommonServ_province_result.prototype = {};
CommonServ_province_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AreaInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_province_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_province_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_city_args = function(args) {
  this.provinceId = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
  }
};
CommonServ_city_args.prototype = {};
CommonServ_city_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_city_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_city_args');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_city_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AreaInfoResult(args.success);
    }
  }
};
CommonServ_city_result.prototype = {};
CommonServ_city_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AreaInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_city_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_city_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_county_args = function(args) {
  this.cityId = null;
  if (args) {
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
  }
};
CommonServ_county_args.prototype = {};
CommonServ_county_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_county_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_county_args');
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 1);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_county_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AreaInfoResult(args.success);
    }
  }
};
CommonServ_county_result.prototype = {};
CommonServ_county_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AreaInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_county_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_county_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_street_args = function(args) {
  this.county = null;
  if (args) {
    if (args.county !== undefined && args.county !== null) {
      this.county = args.county;
    }
  }
};
CommonServ_street_args.prototype = {};
CommonServ_street_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.county = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_street_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_street_args');
  if (this.county !== null && this.county !== undefined) {
    output.writeFieldBegin('county', Thrift.Type.I32, 1);
    output.writeI32(this.county);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_street_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AreaInfoResult(args.success);
    }
  }
};
CommonServ_street_result.prototype = {};
CommonServ_street_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AreaInfoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_street_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_street_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_numberAttribution_args = function(args) {
  this.number = null;
  if (args) {
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
  }
};
CommonServ_numberAttribution_args.prototype = {};
CommonServ_numberAttribution_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_numberAttribution_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_numberAttribution_args');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 1);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_numberAttribution_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionResult(args.success);
    }
  }
};
CommonServ_numberAttribution_result.prototype = {};
CommonServ_numberAttribution_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_numberAttribution_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_numberAttribution_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_numberAttributionOperator_args = function(args) {
  this.number = null;
  if (args) {
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
  }
};
CommonServ_numberAttributionOperator_args.prototype = {};
CommonServ_numberAttributionOperator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_numberAttributionOperator_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_numberAttributionOperator_args');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 1);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_numberAttributionOperator_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionOperatorResult(args.success);
    }
  }
};
CommonServ_numberAttributionOperator_result.prototype = {};
CommonServ_numberAttributionOperator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionOperatorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_numberAttributionOperator_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_numberAttributionOperator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_ipAttribution_args = function(args) {
  this.ip = null;
  if (args) {
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
  }
};
CommonServ_ipAttribution_args.prototype = {};
CommonServ_ipAttribution_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_ipAttribution_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_ipAttribution_args');
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_ipAttribution_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionResult(args.success);
    }
  }
};
CommonServ_ipAttribution_result.prototype = {};
CommonServ_ipAttribution_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_ipAttribution_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_ipAttribution_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_cityAttribution_args = function(args) {
  this.cityId = null;
  if (args) {
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
  }
};
CommonServ_cityAttribution_args.prototype = {};
CommonServ_cityAttribution_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_cityAttribution_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_cityAttribution_args');
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 1);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_cityAttribution_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionResult(args.success);
    }
  }
};
CommonServ_cityAttribution_result.prototype = {};
CommonServ_cityAttribution_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_cityAttribution_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_cityAttribution_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_idByName_args = function(args) {
  this.provinceName = null;
  this.cityName = null;
  this.countyName = null;
  if (args) {
    if (args.provinceName !== undefined && args.provinceName !== null) {
      this.provinceName = args.provinceName;
    }
    if (args.cityName !== undefined && args.cityName !== null) {
      this.cityName = args.cityName;
    }
    if (args.countyName !== undefined && args.countyName !== null) {
      this.countyName = args.countyName;
    }
  }
};
CommonServ_idByName_args.prototype = {};
CommonServ_idByName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.countyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_idByName_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_idByName_args');
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 1);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 2);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.countyName !== null && this.countyName !== undefined) {
    output.writeFieldBegin('countyName', Thrift.Type.STRING, 3);
    output.writeString(this.countyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_idByName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionIdResult(args.success);
    }
  }
};
CommonServ_idByName_result.prototype = {};
CommonServ_idByName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionIdResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_idByName_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_idByName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getAttributionIdByCountyId_args = function(args) {
  this.countyId = null;
  if (args) {
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
  }
};
CommonServ_getAttributionIdByCountyId_args.prototype = {};
CommonServ_getAttributionIdByCountyId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getAttributionIdByCountyId_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getAttributionIdByCountyId_args');
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 1);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getAttributionIdByCountyId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionIdResult(args.success);
    }
  }
};
CommonServ_getAttributionIdByCountyId_result.prototype = {};
CommonServ_getAttributionIdByCountyId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionIdResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getAttributionIdByCountyId_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getAttributionIdByCountyId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getAttributionNameById_args = function(args) {
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
  }
};
CommonServ_getAttributionNameById_args.prototype = {};
CommonServ_getAttributionNameById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getAttributionNameById_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getAttributionNameById_args');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 2);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 3);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getAttributionNameById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributionResult(args.success);
    }
  }
};
CommonServ_getAttributionNameById_result.prototype = {};
CommonServ_getAttributionNameById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getAttributionNameById_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getAttributionNameById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getCaptcha_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CommonServ_getCaptcha_args.prototype = {};
CommonServ_getCaptcha_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getCaptcha_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getCaptcha_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getCaptcha_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CaptchaResult(args.success);
    }
  }
};
CommonServ_getCaptcha_result.prototype = {};
CommonServ_getCaptcha_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CaptchaResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getCaptcha_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getCaptcha_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_validateCaptcha_args = function(args) {
  this.captcha = null;
  if (args) {
    if (args.captcha !== undefined && args.captcha !== null) {
      this.captcha = new ttypes.Captcha(args.captcha);
    }
  }
};
CommonServ_validateCaptcha_args.prototype = {};
CommonServ_validateCaptcha_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.captcha = new ttypes.Captcha();
        this.captcha.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_validateCaptcha_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_validateCaptcha_args');
  if (this.captcha !== null && this.captcha !== undefined) {
    output.writeFieldBegin('captcha', Thrift.Type.STRUCT, 1);
    this.captcha.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_validateCaptcha_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
CommonServ_validateCaptcha_result.prototype = {};
CommonServ_validateCaptcha_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_validateCaptcha_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_validateCaptcha_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_sendMsgCaptcha_args = function(args) {
  this.captcha = null;
  if (args) {
    if (args.captcha !== undefined && args.captcha !== null) {
      this.captcha = new ttypes.MsgCaptcha(args.captcha);
    }
  }
};
CommonServ_sendMsgCaptcha_args.prototype = {};
CommonServ_sendMsgCaptcha_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.captcha = new ttypes.MsgCaptcha();
        this.captcha.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_sendMsgCaptcha_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_sendMsgCaptcha_args');
  if (this.captcha !== null && this.captcha !== undefined) {
    output.writeFieldBegin('captcha', Thrift.Type.STRUCT, 1);
    this.captcha.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_sendMsgCaptcha_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
CommonServ_sendMsgCaptcha_result.prototype = {};
CommonServ_sendMsgCaptcha_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_sendMsgCaptcha_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_sendMsgCaptcha_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_validateMsgCaptcha_args = function(args) {
  this.captcha = null;
  if (args) {
    if (args.captcha !== undefined && args.captcha !== null) {
      this.captcha = new ttypes.MsgCaptcha(args.captcha);
    }
  }
};
CommonServ_validateMsgCaptcha_args.prototype = {};
CommonServ_validateMsgCaptcha_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.captcha = new ttypes.MsgCaptcha();
        this.captcha.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_validateMsgCaptcha_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_validateMsgCaptcha_args');
  if (this.captcha !== null && this.captcha !== undefined) {
    output.writeFieldBegin('captcha', Thrift.Type.STRUCT, 1);
    this.captcha.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_validateMsgCaptcha_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
CommonServ_validateMsgCaptcha_result.prototype = {};
CommonServ_validateMsgCaptcha_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_validateMsgCaptcha_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_validateMsgCaptcha_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getQRCode_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CommonServ_getQRCode_args.prototype = {};
CommonServ_getQRCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getQRCode_args.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getQRCode_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServ_getQRCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CaptchaResult(args.success);
    }
  }
};
CommonServ_getQRCode_result.prototype = {};
CommonServ_getQRCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CaptchaResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonServ_getQRCode_result.prototype.write = function(output) {
  output.writeStructBegin('CommonServ_getQRCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CommonServClient.prototype = {};
CommonServClient.prototype.seqid = function() { return this._seqid; }
CommonServClient.prototype.new_seqid = function() { return this._seqid += 1; }
CommonServClient.prototype.province = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_province();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_province();
  }
};

CommonServClient.prototype.send_province = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('province', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_province_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_province = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_province_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('province failed: unknown result');
};
CommonServClient.prototype.city = function(provinceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_city(provinceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_city(provinceId);
  }
};

CommonServClient.prototype.send_city = function(provinceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('city', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_city_args();
  args.provinceId = provinceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_city = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_city_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('city failed: unknown result');
};
CommonServClient.prototype.county = function(cityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_county(cityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_county(cityId);
  }
};

CommonServClient.prototype.send_county = function(cityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('county', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_county_args();
  args.cityId = cityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_county = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_county_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('county failed: unknown result');
};
CommonServClient.prototype.street = function(county, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_street(county);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_street(county);
  }
};

CommonServClient.prototype.send_street = function(county) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('street', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_street_args();
  args.county = county;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_street = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_street_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('street failed: unknown result');
};
CommonServClient.prototype.numberAttribution = function(number, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_numberAttribution(number);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_numberAttribution(number);
  }
};

CommonServClient.prototype.send_numberAttribution = function(number) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('numberAttribution', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_numberAttribution_args();
  args.number = number;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_numberAttribution = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_numberAttribution_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('numberAttribution failed: unknown result');
};
CommonServClient.prototype.numberAttributionOperator = function(number, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_numberAttributionOperator(number);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_numberAttributionOperator(number);
  }
};

CommonServClient.prototype.send_numberAttributionOperator = function(number) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('numberAttributionOperator', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_numberAttributionOperator_args();
  args.number = number;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_numberAttributionOperator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_numberAttributionOperator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('numberAttributionOperator failed: unknown result');
};
CommonServClient.prototype.ipAttribution = function(ip, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ipAttribution(ip);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ipAttribution(ip);
  }
};

CommonServClient.prototype.send_ipAttribution = function(ip) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ipAttribution', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_ipAttribution_args();
  args.ip = ip;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_ipAttribution = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_ipAttribution_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ipAttribution failed: unknown result');
};
CommonServClient.prototype.cityAttribution = function(cityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cityAttribution(cityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cityAttribution(cityId);
  }
};

CommonServClient.prototype.send_cityAttribution = function(cityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cityAttribution', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_cityAttribution_args();
  args.cityId = cityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_cityAttribution = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_cityAttribution_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cityAttribution failed: unknown result');
};
CommonServClient.prototype.idByName = function(provinceName, cityName, countyName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_idByName(provinceName, cityName, countyName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_idByName(provinceName, cityName, countyName);
  }
};

CommonServClient.prototype.send_idByName = function(provinceName, cityName, countyName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('idByName', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_idByName_args();
  args.provinceName = provinceName;
  args.cityName = cityName;
  args.countyName = countyName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_idByName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_idByName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('idByName failed: unknown result');
};
CommonServClient.prototype.getAttributionIdByCountyId = function(countyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAttributionIdByCountyId(countyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAttributionIdByCountyId(countyId);
  }
};

CommonServClient.prototype.send_getAttributionIdByCountyId = function(countyId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAttributionIdByCountyId', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_getAttributionIdByCountyId_args();
  args.countyId = countyId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_getAttributionIdByCountyId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_getAttributionIdByCountyId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAttributionIdByCountyId failed: unknown result');
};
CommonServClient.prototype.getAttributionNameById = function(provinceId, cityId, countyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAttributionNameById(provinceId, cityId, countyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAttributionNameById(provinceId, cityId, countyId);
  }
};

CommonServClient.prototype.send_getAttributionNameById = function(provinceId, cityId, countyId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAttributionNameById', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_getAttributionNameById_args();
  args.provinceId = provinceId;
  args.cityId = cityId;
  args.countyId = countyId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_getAttributionNameById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_getAttributionNameById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAttributionNameById failed: unknown result');
};
CommonServClient.prototype.getCaptcha = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCaptcha(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCaptcha(id);
  }
};

CommonServClient.prototype.send_getCaptcha = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCaptcha', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_getCaptcha_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_getCaptcha = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_getCaptcha_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCaptcha failed: unknown result');
};
CommonServClient.prototype.validateCaptcha = function(captcha, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validateCaptcha(captcha);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validateCaptcha(captcha);
  }
};

CommonServClient.prototype.send_validateCaptcha = function(captcha) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validateCaptcha', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_validateCaptcha_args();
  args.captcha = captcha;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_validateCaptcha = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_validateCaptcha_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validateCaptcha failed: unknown result');
};
CommonServClient.prototype.sendMsgCaptcha = function(captcha, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMsgCaptcha(captcha);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMsgCaptcha(captcha);
  }
};

CommonServClient.prototype.send_sendMsgCaptcha = function(captcha) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMsgCaptcha', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_sendMsgCaptcha_args();
  args.captcha = captcha;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_sendMsgCaptcha = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_sendMsgCaptcha_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMsgCaptcha failed: unknown result');
};
CommonServClient.prototype.validateMsgCaptcha = function(captcha, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validateMsgCaptcha(captcha);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validateMsgCaptcha(captcha);
  }
};

CommonServClient.prototype.send_validateMsgCaptcha = function(captcha) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validateMsgCaptcha', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_validateMsgCaptcha_args();
  args.captcha = captcha;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_validateMsgCaptcha = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_validateMsgCaptcha_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validateMsgCaptcha failed: unknown result');
};
CommonServClient.prototype.getQRCode = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getQRCode(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getQRCode(id);
  }
};

CommonServClient.prototype.send_getQRCode = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQRCode', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonServ_getQRCode_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServClient.prototype.recv_getQRCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonServ_getQRCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQRCode failed: unknown result');
};
CommonServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
CommonServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

CommonServProcessor.prototype.process_province = function(seqid, input, output) {
  var args = new CommonServ_province_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.province.length === 0) {
    Q.fcall(this._handler.province)
      .then(function(result) {
        var result = new CommonServ_province_result({success: result});
        output.writeMessageBegin("province", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("province", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.province(function (err, result) {
      if (err == null) {
        var result = new CommonServ_province_result((err != null ? err : {success: result}));
        output.writeMessageBegin("province", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("province", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_city = function(seqid, input, output) {
  var args = new CommonServ_city_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.city.length === 1) {
    Q.fcall(this._handler.city, args.provinceId)
      .then(function(result) {
        var result = new CommonServ_city_result({success: result});
        output.writeMessageBegin("city", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("city", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.city(args.provinceId, function (err, result) {
      if (err == null) {
        var result = new CommonServ_city_result((err != null ? err : {success: result}));
        output.writeMessageBegin("city", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("city", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_county = function(seqid, input, output) {
  var args = new CommonServ_county_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.county.length === 1) {
    Q.fcall(this._handler.county, args.cityId)
      .then(function(result) {
        var result = new CommonServ_county_result({success: result});
        output.writeMessageBegin("county", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("county", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.county(args.cityId, function (err, result) {
      if (err == null) {
        var result = new CommonServ_county_result((err != null ? err : {success: result}));
        output.writeMessageBegin("county", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("county", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_street = function(seqid, input, output) {
  var args = new CommonServ_street_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.street.length === 1) {
    Q.fcall(this._handler.street, args.county)
      .then(function(result) {
        var result = new CommonServ_street_result({success: result});
        output.writeMessageBegin("street", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("street", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.street(args.county, function (err, result) {
      if (err == null) {
        var result = new CommonServ_street_result((err != null ? err : {success: result}));
        output.writeMessageBegin("street", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("street", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_numberAttribution = function(seqid, input, output) {
  var args = new CommonServ_numberAttribution_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.numberAttribution.length === 1) {
    Q.fcall(this._handler.numberAttribution, args.number)
      .then(function(result) {
        var result = new CommonServ_numberAttribution_result({success: result});
        output.writeMessageBegin("numberAttribution", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("numberAttribution", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.numberAttribution(args.number, function (err, result) {
      if (err == null) {
        var result = new CommonServ_numberAttribution_result((err != null ? err : {success: result}));
        output.writeMessageBegin("numberAttribution", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("numberAttribution", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_numberAttributionOperator = function(seqid, input, output) {
  var args = new CommonServ_numberAttributionOperator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.numberAttributionOperator.length === 1) {
    Q.fcall(this._handler.numberAttributionOperator, args.number)
      .then(function(result) {
        var result = new CommonServ_numberAttributionOperator_result({success: result});
        output.writeMessageBegin("numberAttributionOperator", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("numberAttributionOperator", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.numberAttributionOperator(args.number, function (err, result) {
      if (err == null) {
        var result = new CommonServ_numberAttributionOperator_result((err != null ? err : {success: result}));
        output.writeMessageBegin("numberAttributionOperator", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("numberAttributionOperator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_ipAttribution = function(seqid, input, output) {
  var args = new CommonServ_ipAttribution_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ipAttribution.length === 1) {
    Q.fcall(this._handler.ipAttribution, args.ip)
      .then(function(result) {
        var result = new CommonServ_ipAttribution_result({success: result});
        output.writeMessageBegin("ipAttribution", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipAttribution", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ipAttribution(args.ip, function (err, result) {
      if (err == null) {
        var result = new CommonServ_ipAttribution_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ipAttribution", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipAttribution", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_cityAttribution = function(seqid, input, output) {
  var args = new CommonServ_cityAttribution_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cityAttribution.length === 1) {
    Q.fcall(this._handler.cityAttribution, args.cityId)
      .then(function(result) {
        var result = new CommonServ_cityAttribution_result({success: result});
        output.writeMessageBegin("cityAttribution", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cityAttribution", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cityAttribution(args.cityId, function (err, result) {
      if (err == null) {
        var result = new CommonServ_cityAttribution_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cityAttribution", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cityAttribution", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_idByName = function(seqid, input, output) {
  var args = new CommonServ_idByName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.idByName.length === 3) {
    Q.fcall(this._handler.idByName, args.provinceName, args.cityName, args.countyName)
      .then(function(result) {
        var result = new CommonServ_idByName_result({success: result});
        output.writeMessageBegin("idByName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("idByName", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.idByName(args.provinceName, args.cityName, args.countyName, function (err, result) {
      if (err == null) {
        var result = new CommonServ_idByName_result((err != null ? err : {success: result}));
        output.writeMessageBegin("idByName", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("idByName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_getAttributionIdByCountyId = function(seqid, input, output) {
  var args = new CommonServ_getAttributionIdByCountyId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAttributionIdByCountyId.length === 1) {
    Q.fcall(this._handler.getAttributionIdByCountyId, args.countyId)
      .then(function(result) {
        var result = new CommonServ_getAttributionIdByCountyId_result({success: result});
        output.writeMessageBegin("getAttributionIdByCountyId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAttributionIdByCountyId", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAttributionIdByCountyId(args.countyId, function (err, result) {
      if (err == null) {
        var result = new CommonServ_getAttributionIdByCountyId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAttributionIdByCountyId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAttributionIdByCountyId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_getAttributionNameById = function(seqid, input, output) {
  var args = new CommonServ_getAttributionNameById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAttributionNameById.length === 3) {
    Q.fcall(this._handler.getAttributionNameById, args.provinceId, args.cityId, args.countyId)
      .then(function(result) {
        var result = new CommonServ_getAttributionNameById_result({success: result});
        output.writeMessageBegin("getAttributionNameById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAttributionNameById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAttributionNameById(args.provinceId, args.cityId, args.countyId, function (err, result) {
      if (err == null) {
        var result = new CommonServ_getAttributionNameById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAttributionNameById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAttributionNameById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_getCaptcha = function(seqid, input, output) {
  var args = new CommonServ_getCaptcha_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCaptcha.length === 1) {
    Q.fcall(this._handler.getCaptcha, args.id)
      .then(function(result) {
        var result = new CommonServ_getCaptcha_result({success: result});
        output.writeMessageBegin("getCaptcha", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCaptcha", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCaptcha(args.id, function (err, result) {
      if (err == null) {
        var result = new CommonServ_getCaptcha_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCaptcha", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCaptcha", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_validateCaptcha = function(seqid, input, output) {
  var args = new CommonServ_validateCaptcha_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validateCaptcha.length === 1) {
    Q.fcall(this._handler.validateCaptcha, args.captcha)
      .then(function(result) {
        var result = new CommonServ_validateCaptcha_result({success: result});
        output.writeMessageBegin("validateCaptcha", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateCaptcha", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validateCaptcha(args.captcha, function (err, result) {
      if (err == null) {
        var result = new CommonServ_validateCaptcha_result((err != null ? err : {success: result}));
        output.writeMessageBegin("validateCaptcha", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateCaptcha", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_sendMsgCaptcha = function(seqid, input, output) {
  var args = new CommonServ_sendMsgCaptcha_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMsgCaptcha.length === 1) {
    Q.fcall(this._handler.sendMsgCaptcha, args.captcha)
      .then(function(result) {
        var result = new CommonServ_sendMsgCaptcha_result({success: result});
        output.writeMessageBegin("sendMsgCaptcha", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMsgCaptcha", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMsgCaptcha(args.captcha, function (err, result) {
      if (err == null) {
        var result = new CommonServ_sendMsgCaptcha_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendMsgCaptcha", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMsgCaptcha", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_validateMsgCaptcha = function(seqid, input, output) {
  var args = new CommonServ_validateMsgCaptcha_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validateMsgCaptcha.length === 1) {
    Q.fcall(this._handler.validateMsgCaptcha, args.captcha)
      .then(function(result) {
        var result = new CommonServ_validateMsgCaptcha_result({success: result});
        output.writeMessageBegin("validateMsgCaptcha", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateMsgCaptcha", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validateMsgCaptcha(args.captcha, function (err, result) {
      if (err == null) {
        var result = new CommonServ_validateMsgCaptcha_result((err != null ? err : {success: result}));
        output.writeMessageBegin("validateMsgCaptcha", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateMsgCaptcha", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommonServProcessor.prototype.process_getQRCode = function(seqid, input, output) {
  var args = new CommonServ_getQRCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getQRCode.length === 1) {
    Q.fcall(this._handler.getQRCode, args.id)
      .then(function(result) {
        var result = new CommonServ_getQRCode_result({success: result});
        output.writeMessageBegin("getQRCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getQRCode", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getQRCode(args.id, function (err, result) {
      if (err == null) {
        var result = new CommonServ_getQRCode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getQRCode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getQRCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

