//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./fileUpload_types');
//HELPER FUNCTIONS AND STRUCTURES

FileForCardServ_fileToTY_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
FileForCardServ_fileToTY_args.prototype = {};
FileForCardServ_fileToTY_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.FileParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_fileToTY_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_fileToTY_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_fileToTY_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_fileToTY_result.prototype = {};
FileForCardServ_fileToTY_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_fileToTY_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_fileToTY_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_auditPass_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
FileForCardServ_auditPass_args.prototype = {};
FileForCardServ_auditPass_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.AuditParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_auditPass_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_auditPass_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_auditPass_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_auditPass_result.prototype = {};
FileForCardServ_auditPass_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_auditPass_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_auditPass_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryCardsList_args = function(args) {
  this.conditions = null;
  this.pagination = null;
  if (args) {
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
    if (args.pagination !== undefined) {
      this.pagination = args.pagination;
    }
  }
};
FileForCardServ_queryCardsList_args.prototype = {};
FileForCardServ_queryCardsList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditions = new ttypes.QueryConditions();
        this.conditions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryCardsList_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryCardsList_args');
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRUCT, 1);
    this.conditions.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryCardsList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_queryCardsList_result.prototype = {};
FileForCardServ_queryCardsList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ThirdPartyCardResultList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryCardsList_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryCardsList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_addRecharge_args = function(args) {
  this.recharge = null;
  if (args) {
    if (args.recharge !== undefined) {
      this.recharge = args.recharge;
    }
  }
};
FileForCardServ_addRecharge_args.prototype = {};
FileForCardServ_addRecharge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.recharge = new ttypes.Recharge();
        this.recharge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_addRecharge_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_addRecharge_args');
  if (this.recharge !== null && this.recharge !== undefined) {
    output.writeFieldBegin('recharge', Thrift.Type.STRUCT, 1);
    this.recharge.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_addRecharge_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_addRecharge_result.prototype = {};
FileForCardServ_addRecharge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_addRecharge_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_addRecharge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_updateRecharge_args = function(args) {
  this.recharge = null;
  if (args) {
    if (args.recharge !== undefined) {
      this.recharge = args.recharge;
    }
  }
};
FileForCardServ_updateRecharge_args.prototype = {};
FileForCardServ_updateRecharge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.recharge = new ttypes.Recharge();
        this.recharge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_updateRecharge_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_updateRecharge_args');
  if (this.recharge !== null && this.recharge !== undefined) {
    output.writeFieldBegin('recharge', Thrift.Type.STRUCT, 1);
    this.recharge.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_updateRecharge_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_updateRecharge_result.prototype = {};
FileForCardServ_updateRecharge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_updateRecharge_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_updateRecharge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_rechargeNotify_args = function(args) {
  this.notifyRecharge = null;
  if (args) {
    if (args.notifyRecharge !== undefined) {
      this.notifyRecharge = args.notifyRecharge;
    }
  }
};
FileForCardServ_rechargeNotify_args.prototype = {};
FileForCardServ_rechargeNotify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notifyRecharge = new ttypes.NotifyRecharge();
        this.notifyRecharge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_rechargeNotify_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_rechargeNotify_args');
  if (this.notifyRecharge !== null && this.notifyRecharge !== undefined) {
    output.writeFieldBegin('notifyRecharge', Thrift.Type.STRUCT, 1);
    this.notifyRecharge.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_rechargeNotify_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_rechargeNotify_result.prototype = {};
FileForCardServ_rechargeNotify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_rechargeNotify_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_rechargeNotify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_rechargeList_args = function(args) {
  this.states = null;
  this.recharge = null;
  if (args) {
    if (args.states !== undefined) {
      this.states = args.states;
    }
    if (args.recharge !== undefined) {
      this.recharge = args.recharge;
    }
  }
};
FileForCardServ_rechargeList_args.prototype = {};
FileForCardServ_rechargeList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.states = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI32();
          this.states.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.recharge = new ttypes.Recharge();
        this.recharge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_rechargeList_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_rechargeList_args');
  if (this.states !== null && this.states !== undefined) {
    output.writeFieldBegin('states', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.states.length);
    for (var iter63 in this.states)
    {
      if (this.states.hasOwnProperty(iter63))
      {
        iter63 = this.states[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recharge !== null && this.recharge !== undefined) {
    output.writeFieldBegin('recharge', Thrift.Type.STRUCT, 2);
    this.recharge.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_rechargeList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_rechargeList_result.prototype = {};
FileForCardServ_rechargeList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RechargeListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_rechargeList_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_rechargeList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryGameList_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
FileForCardServ_queryGameList_args.prototype = {};
FileForCardServ_queryGameList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ThirdGameParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryGameList_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryGameList_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryGameList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_queryGameList_result.prototype = {};
FileForCardServ_queryGameList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ThirdGameListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryGameList_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryGameList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryGameAreaList_args = function(args) {
  this.thirdGameId = null;
  if (args) {
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
  }
};
FileForCardServ_queryGameAreaList_args.prototype = {};
FileForCardServ_queryGameAreaList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thirdGameId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryGameAreaList_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryGameAreaList_args');
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 1);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryGameAreaList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_queryGameAreaList_result.prototype = {};
FileForCardServ_queryGameAreaList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GameAreaListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryGameAreaList_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryGameAreaList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryGameRole_args = function(args) {
  this.account = null;
  this.gamearea = null;
  this.gameserver = null;
  this.thirdGameId = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.gamearea !== undefined) {
      this.gamearea = args.gamearea;
    }
    if (args.gameserver !== undefined) {
      this.gameserver = args.gameserver;
    }
    if (args.thirdGameId !== undefined) {
      this.thirdGameId = args.thirdGameId;
    }
  }
};
FileForCardServ_queryGameRole_args.prototype = {};
FileForCardServ_queryGameRole_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.gamearea = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.gameserver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.thirdGameId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryGameRole_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryGameRole_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.gamearea !== null && this.gamearea !== undefined) {
    output.writeFieldBegin('gamearea', Thrift.Type.STRING, 2);
    output.writeString(this.gamearea);
    output.writeFieldEnd();
  }
  if (this.gameserver !== null && this.gameserver !== undefined) {
    output.writeFieldBegin('gameserver', Thrift.Type.STRING, 3);
    output.writeString(this.gameserver);
    output.writeFieldEnd();
  }
  if (this.thirdGameId !== null && this.thirdGameId !== undefined) {
    output.writeFieldBegin('thirdGameId', Thrift.Type.STRING, 4);
    output.writeString(this.thirdGameId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_queryGameRole_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_queryGameRole_result.prototype = {};
FileForCardServ_queryGameRole_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GameRoleResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_queryGameRole_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_queryGameRole_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_validateRechargeGame_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
FileForCardServ_validateRechargeGame_args.prototype = {};
FileForCardServ_validateRechargeGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.ThirdGameRechargeParam();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_validateRechargeGame_args.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_validateRechargeGame_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServ_validateRechargeGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileForCardServ_validateRechargeGame_result.prototype = {};
FileForCardServ_validateRechargeGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileForCardServ_validateRechargeGame_result.prototype.write = function(output) {
  output.writeStructBegin('FileForCardServ_validateRechargeGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileForCardServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
FileForCardServClient.prototype = {};
FileForCardServClient.prototype.seqid = function() { return this._seqid; }
FileForCardServClient.prototype.new_seqid = function() { return this._seqid += 1; }
FileForCardServClient.prototype.fileToTY = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fileToTY(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fileToTY(param);
  }
};

FileForCardServClient.prototype.send_fileToTY = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fileToTY', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_fileToTY_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_fileToTY = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_fileToTY_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fileToTY failed: unknown result');
};
FileForCardServClient.prototype.auditPass = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_auditPass(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_auditPass(param);
  }
};

FileForCardServClient.prototype.send_auditPass = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('auditPass', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_auditPass_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_auditPass = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_auditPass_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('auditPass failed: unknown result');
};
FileForCardServClient.prototype.queryCardsList = function(conditions, pagination, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryCardsList(conditions, pagination);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryCardsList(conditions, pagination);
  }
};

FileForCardServClient.prototype.send_queryCardsList = function(conditions, pagination) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryCardsList', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_queryCardsList_args();
  args.conditions = conditions;
  args.pagination = pagination;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_queryCardsList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_queryCardsList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryCardsList failed: unknown result');
};
FileForCardServClient.prototype.addRecharge = function(recharge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRecharge(recharge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRecharge(recharge);
  }
};

FileForCardServClient.prototype.send_addRecharge = function(recharge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addRecharge', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_addRecharge_args();
  args.recharge = recharge;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_addRecharge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_addRecharge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addRecharge failed: unknown result');
};
FileForCardServClient.prototype.updateRecharge = function(recharge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateRecharge(recharge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateRecharge(recharge);
  }
};

FileForCardServClient.prototype.send_updateRecharge = function(recharge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateRecharge', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_updateRecharge_args();
  args.recharge = recharge;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_updateRecharge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_updateRecharge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateRecharge failed: unknown result');
};
FileForCardServClient.prototype.rechargeNotify = function(notifyRecharge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rechargeNotify(notifyRecharge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rechargeNotify(notifyRecharge);
  }
};

FileForCardServClient.prototype.send_rechargeNotify = function(notifyRecharge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rechargeNotify', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_rechargeNotify_args();
  args.notifyRecharge = notifyRecharge;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_rechargeNotify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_rechargeNotify_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rechargeNotify failed: unknown result');
};
FileForCardServClient.prototype.rechargeList = function(states, recharge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rechargeList(states, recharge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rechargeList(states, recharge);
  }
};

FileForCardServClient.prototype.send_rechargeList = function(states, recharge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rechargeList', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_rechargeList_args();
  args.states = states;
  args.recharge = recharge;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_rechargeList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_rechargeList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rechargeList failed: unknown result');
};
FileForCardServClient.prototype.queryGameList = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryGameList(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryGameList(param);
  }
};

FileForCardServClient.prototype.send_queryGameList = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryGameList', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_queryGameList_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_queryGameList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_queryGameList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryGameList failed: unknown result');
};
FileForCardServClient.prototype.queryGameAreaList = function(thirdGameId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryGameAreaList(thirdGameId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryGameAreaList(thirdGameId);
  }
};

FileForCardServClient.prototype.send_queryGameAreaList = function(thirdGameId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryGameAreaList', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_queryGameAreaList_args();
  args.thirdGameId = thirdGameId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_queryGameAreaList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_queryGameAreaList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryGameAreaList failed: unknown result');
};
FileForCardServClient.prototype.queryGameRole = function(account, gamearea, gameserver, thirdGameId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryGameRole(account, gamearea, gameserver, thirdGameId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryGameRole(account, gamearea, gameserver, thirdGameId);
  }
};

FileForCardServClient.prototype.send_queryGameRole = function(account, gamearea, gameserver, thirdGameId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryGameRole', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_queryGameRole_args();
  args.account = account;
  args.gamearea = gamearea;
  args.gameserver = gameserver;
  args.thirdGameId = thirdGameId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_queryGameRole = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_queryGameRole_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryGameRole failed: unknown result');
};
FileForCardServClient.prototype.validateRechargeGame = function(params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validateRechargeGame(params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validateRechargeGame(params);
  }
};

FileForCardServClient.prototype.send_validateRechargeGame = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('validateRechargeGame', Thrift.MessageType.CALL, this.seqid());
  var args = new FileForCardServ_validateRechargeGame_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileForCardServClient.prototype.recv_validateRechargeGame = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileForCardServ_validateRechargeGame_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validateRechargeGame failed: unknown result');
};
FileForCardServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FileForCardServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FileForCardServProcessor.prototype.process_fileToTY = function(seqid, input, output) {
  var args = new FileForCardServ_fileToTY_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fileToTY.length === 1) {
    Q.fcall(this._handler.fileToTY, args.param)
      .then(function(result) {
        var result = new FileForCardServ_fileToTY_result({success: result});
        output.writeMessageBegin("fileToTY", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_fileToTY_result(err);
        output.writeMessageBegin("fileToTY", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fileToTY(args.param,  function (err, result) {
      var result = new FileForCardServ_fileToTY_result((err != null ? err : {success: result}));
      output.writeMessageBegin("fileToTY", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_auditPass = function(seqid, input, output) {
  var args = new FileForCardServ_auditPass_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.auditPass.length === 1) {
    Q.fcall(this._handler.auditPass, args.param)
      .then(function(result) {
        var result = new FileForCardServ_auditPass_result({success: result});
        output.writeMessageBegin("auditPass", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_auditPass_result(err);
        output.writeMessageBegin("auditPass", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.auditPass(args.param,  function (err, result) {
      var result = new FileForCardServ_auditPass_result((err != null ? err : {success: result}));
      output.writeMessageBegin("auditPass", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_queryCardsList = function(seqid, input, output) {
  var args = new FileForCardServ_queryCardsList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryCardsList.length === 2) {
    Q.fcall(this._handler.queryCardsList, args.conditions, args.pagination)
      .then(function(result) {
        var result = new FileForCardServ_queryCardsList_result({success: result});
        output.writeMessageBegin("queryCardsList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_queryCardsList_result(err);
        output.writeMessageBegin("queryCardsList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryCardsList(args.conditions, args.pagination,  function (err, result) {
      var result = new FileForCardServ_queryCardsList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryCardsList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_addRecharge = function(seqid, input, output) {
  var args = new FileForCardServ_addRecharge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRecharge.length === 1) {
    Q.fcall(this._handler.addRecharge, args.recharge)
      .then(function(result) {
        var result = new FileForCardServ_addRecharge_result({success: result});
        output.writeMessageBegin("addRecharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_addRecharge_result(err);
        output.writeMessageBegin("addRecharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addRecharge(args.recharge,  function (err, result) {
      var result = new FileForCardServ_addRecharge_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addRecharge", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_updateRecharge = function(seqid, input, output) {
  var args = new FileForCardServ_updateRecharge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateRecharge.length === 1) {
    Q.fcall(this._handler.updateRecharge, args.recharge)
      .then(function(result) {
        var result = new FileForCardServ_updateRecharge_result({success: result});
        output.writeMessageBegin("updateRecharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_updateRecharge_result(err);
        output.writeMessageBegin("updateRecharge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateRecharge(args.recharge,  function (err, result) {
      var result = new FileForCardServ_updateRecharge_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateRecharge", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_rechargeNotify = function(seqid, input, output) {
  var args = new FileForCardServ_rechargeNotify_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rechargeNotify.length === 1) {
    Q.fcall(this._handler.rechargeNotify, args.notifyRecharge)
      .then(function(result) {
        var result = new FileForCardServ_rechargeNotify_result({success: result});
        output.writeMessageBegin("rechargeNotify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_rechargeNotify_result(err);
        output.writeMessageBegin("rechargeNotify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rechargeNotify(args.notifyRecharge,  function (err, result) {
      var result = new FileForCardServ_rechargeNotify_result((err != null ? err : {success: result}));
      output.writeMessageBegin("rechargeNotify", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_rechargeList = function(seqid, input, output) {
  var args = new FileForCardServ_rechargeList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rechargeList.length === 2) {
    Q.fcall(this._handler.rechargeList, args.states, args.recharge)
      .then(function(result) {
        var result = new FileForCardServ_rechargeList_result({success: result});
        output.writeMessageBegin("rechargeList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_rechargeList_result(err);
        output.writeMessageBegin("rechargeList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rechargeList(args.states, args.recharge,  function (err, result) {
      var result = new FileForCardServ_rechargeList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("rechargeList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_queryGameList = function(seqid, input, output) {
  var args = new FileForCardServ_queryGameList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryGameList.length === 1) {
    Q.fcall(this._handler.queryGameList, args.param)
      .then(function(result) {
        var result = new FileForCardServ_queryGameList_result({success: result});
        output.writeMessageBegin("queryGameList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_queryGameList_result(err);
        output.writeMessageBegin("queryGameList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryGameList(args.param,  function (err, result) {
      var result = new FileForCardServ_queryGameList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryGameList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_queryGameAreaList = function(seqid, input, output) {
  var args = new FileForCardServ_queryGameAreaList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryGameAreaList.length === 1) {
    Q.fcall(this._handler.queryGameAreaList, args.thirdGameId)
      .then(function(result) {
        var result = new FileForCardServ_queryGameAreaList_result({success: result});
        output.writeMessageBegin("queryGameAreaList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_queryGameAreaList_result(err);
        output.writeMessageBegin("queryGameAreaList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryGameAreaList(args.thirdGameId,  function (err, result) {
      var result = new FileForCardServ_queryGameAreaList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryGameAreaList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_queryGameRole = function(seqid, input, output) {
  var args = new FileForCardServ_queryGameRole_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryGameRole.length === 4) {
    Q.fcall(this._handler.queryGameRole, args.account, args.gamearea, args.gameserver, args.thirdGameId)
      .then(function(result) {
        var result = new FileForCardServ_queryGameRole_result({success: result});
        output.writeMessageBegin("queryGameRole", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_queryGameRole_result(err);
        output.writeMessageBegin("queryGameRole", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryGameRole(args.account, args.gamearea, args.gameserver, args.thirdGameId,  function (err, result) {
      var result = new FileForCardServ_queryGameRole_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryGameRole", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileForCardServProcessor.prototype.process_validateRechargeGame = function(seqid, input, output) {
  var args = new FileForCardServ_validateRechargeGame_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validateRechargeGame.length === 1) {
    Q.fcall(this._handler.validateRechargeGame, args.params)
      .then(function(result) {
        var result = new FileForCardServ_validateRechargeGame_result({success: result});
        output.writeMessageBegin("validateRechargeGame", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new FileForCardServ_validateRechargeGame_result(err);
        output.writeMessageBegin("validateRechargeGame", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.validateRechargeGame(args.params,  function (err, result) {
      var result = new FileForCardServ_validateRechargeGame_result((err != null ? err : {success: result}));
      output.writeMessageBegin("validateRechargeGame", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

