//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
TraceItem = module.exports.TraceItem = function(args) {
  this.time = null;
  this.context = null;
  this.ftime = null;
  if (args) {
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.context !== undefined) {
      this.context = args.context;
    }
    if (args.ftime !== undefined) {
      this.ftime = args.ftime;
    }
  }
};
TraceItem.prototype = {};
TraceItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ftime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceItem.prototype.write = function(output) {
  output.writeStructBegin('TraceItem');
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 1);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 2);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  if (this.ftime !== null && this.ftime !== undefined) {
    output.writeFieldBegin('ftime', Thrift.Type.STRING, 3);
    output.writeString(this.ftime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressTrace = module.exports.ExpressTrace = function(args) {
  this.state = null;
  this.nu = null;
  this.status = null;
  this.traceItems = null;
  this.orderId = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.nu !== undefined) {
      this.nu = args.nu;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.traceItems !== undefined) {
      this.traceItems = args.traceItems;
    }
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
  }
};
ExpressTrace.prototype = {};
ExpressTrace.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nu = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.traceItems = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.TraceItem();
          elem6.read(input);
          this.traceItems.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressTrace.prototype.write = function(output) {
  output.writeStructBegin('ExpressTrace');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 1);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.nu !== null && this.nu !== undefined) {
    output.writeFieldBegin('nu', Thrift.Type.STRING, 2);
    output.writeString(this.nu);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 3);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.traceItems !== null && this.traceItems !== undefined) {
    output.writeFieldBegin('traceItems', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.traceItems.length);
    for (var iter7 in this.traceItems)
    {
      if (this.traceItems.hasOwnProperty(iter7))
      {
        iter7 = this.traceItems[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 5);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressInfo = module.exports.ExpressInfo = function(args) {
  this.id = null;
  this.name = null;
  this.queryUrl = null;
  this.status = null;
  this.comment = null;
  this.createTime = null;
  this.createUserId = null;
  this.lastUpdateTime = null;
  this.lastUpdateUserId = null;
  this.kuaidiKey = null;
  this.nameRule = null;
  this.expressNoRule = null;
  this.grabState = null;
  this.typeState = null;
  this.dnfTel = null;
  this.userType = null;
  this.serialNum = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.queryUrl !== undefined) {
      this.queryUrl = args.queryUrl;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.createUserId !== undefined) {
      this.createUserId = args.createUserId;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.lastUpdateUserId !== undefined) {
      this.lastUpdateUserId = args.lastUpdateUserId;
    }
    if (args.kuaidiKey !== undefined) {
      this.kuaidiKey = args.kuaidiKey;
    }
    if (args.nameRule !== undefined) {
      this.nameRule = args.nameRule;
    }
    if (args.expressNoRule !== undefined) {
      this.expressNoRule = args.expressNoRule;
    }
    if (args.grabState !== undefined) {
      this.grabState = args.grabState;
    }
    if (args.typeState !== undefined) {
      this.typeState = args.typeState;
    }
    if (args.dnfTel !== undefined) {
      this.dnfTel = args.dnfTel;
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
    if (args.serialNum !== undefined) {
      this.serialNum = args.serialNum;
    }
  }
};
ExpressInfo.prototype = {};
ExpressInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queryUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.createUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.kuaidiKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.nameRule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.expressNoRule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.grabState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.typeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.dnfTel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.serialNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressInfo.prototype.write = function(output) {
  output.writeStructBegin('ExpressInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.queryUrl !== null && this.queryUrl !== undefined) {
    output.writeFieldBegin('queryUrl', Thrift.Type.STRING, 3);
    output.writeString(this.queryUrl);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 5);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.createUserId !== null && this.createUserId !== undefined) {
    output.writeFieldBegin('createUserId', Thrift.Type.I32, 7);
    output.writeI32(this.createUserId);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 8);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateUserId !== null && this.lastUpdateUserId !== undefined) {
    output.writeFieldBegin('lastUpdateUserId', Thrift.Type.I32, 9);
    output.writeI32(this.lastUpdateUserId);
    output.writeFieldEnd();
  }
  if (this.kuaidiKey !== null && this.kuaidiKey !== undefined) {
    output.writeFieldBegin('kuaidiKey', Thrift.Type.STRING, 10);
    output.writeString(this.kuaidiKey);
    output.writeFieldEnd();
  }
  if (this.nameRule !== null && this.nameRule !== undefined) {
    output.writeFieldBegin('nameRule', Thrift.Type.STRING, 11);
    output.writeString(this.nameRule);
    output.writeFieldEnd();
  }
  if (this.expressNoRule !== null && this.expressNoRule !== undefined) {
    output.writeFieldBegin('expressNoRule', Thrift.Type.STRING, 12);
    output.writeString(this.expressNoRule);
    output.writeFieldEnd();
  }
  if (this.grabState !== null && this.grabState !== undefined) {
    output.writeFieldBegin('grabState', Thrift.Type.I32, 13);
    output.writeI32(this.grabState);
    output.writeFieldEnd();
  }
  if (this.typeState !== null && this.typeState !== undefined) {
    output.writeFieldBegin('typeState', Thrift.Type.I32, 14);
    output.writeI32(this.typeState);
    output.writeFieldEnd();
  }
  if (this.dnfTel !== null && this.dnfTel !== undefined) {
    output.writeFieldBegin('dnfTel', Thrift.Type.STRING, 15);
    output.writeString(this.dnfTel);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 16);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.serialNum !== null && this.serialNum !== undefined) {
    output.writeFieldBegin('serialNum', Thrift.Type.I32, 17);
    output.writeI32(this.serialNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressInfoResult = module.exports.ExpressInfoResult = function(args) {
  this.result = null;
  this.expressInfoList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.expressInfoList !== undefined) {
      this.expressInfoList = args.expressInfoList;
    }
  }
};
ExpressInfoResult.prototype = {};
ExpressInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.expressInfoList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ExpressInfo();
          elem14.read(input);
          this.expressInfoList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressInfoResult.prototype.write = function(output) {
  output.writeStructBegin('ExpressInfoResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.expressInfoList !== null && this.expressInfoList !== undefined) {
    output.writeFieldBegin('expressInfoList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.expressInfoList.length);
    for (var iter15 in this.expressInfoList)
    {
      if (this.expressInfoList.hasOwnProperty(iter15))
      {
        iter15 = this.expressInfoList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressResult = module.exports.ExpressResult = function(args) {
  this.result = null;
  this.expressInfo = null;
  this.expressTrace = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.expressInfo !== undefined) {
      this.expressInfo = args.expressInfo;
    }
    if (args.expressTrace !== undefined) {
      this.expressTrace = args.expressTrace;
    }
  }
};
ExpressResult.prototype = {};
ExpressResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.expressInfo = new ttypes.ExpressInfo();
        this.expressInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.expressTrace = new ttypes.ExpressTrace();
        this.expressTrace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressResult.prototype.write = function(output) {
  output.writeStructBegin('ExpressResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.expressInfo !== null && this.expressInfo !== undefined) {
    output.writeFieldBegin('expressInfo', Thrift.Type.STRUCT, 2);
    this.expressInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.expressTrace !== null && this.expressTrace !== undefined) {
    output.writeFieldBegin('expressTrace', Thrift.Type.STRUCT, 3);
    this.expressTrace.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressQueryConditions = module.exports.ExpressQueryConditions = function(args) {
  this.name = null;
  this.nameRule = null;
  this.pageSize = null;
  this.curPage = null;
  this.orderByClause = null;
  this.id = null;
  this.grabState = null;
  this.status = null;
  this.typeState = null;
  this.userType = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.nameRule !== undefined) {
      this.nameRule = args.nameRule;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
    if (args.curPage !== undefined) {
      this.curPage = args.curPage;
    }
    if (args.orderByClause !== undefined) {
      this.orderByClause = args.orderByClause;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.grabState !== undefined) {
      this.grabState = args.grabState;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.typeState !== undefined) {
      this.typeState = args.typeState;
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    }
  }
};
ExpressQueryConditions.prototype = {};
ExpressQueryConditions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameRule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.curPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orderByClause = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.grabState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.typeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressQueryConditions.prototype.write = function(output) {
  output.writeStructBegin('ExpressQueryConditions');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.nameRule !== null && this.nameRule !== undefined) {
    output.writeFieldBegin('nameRule', Thrift.Type.STRING, 2);
    output.writeString(this.nameRule);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.curPage !== null && this.curPage !== undefined) {
    output.writeFieldBegin('curPage', Thrift.Type.I32, 4);
    output.writeI32(this.curPage);
    output.writeFieldEnd();
  }
  if (this.orderByClause !== null && this.orderByClause !== undefined) {
    output.writeFieldBegin('orderByClause', Thrift.Type.STRING, 5);
    output.writeString(this.orderByClause);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 6);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.grabState !== null && this.grabState !== undefined) {
    output.writeFieldBegin('grabState', Thrift.Type.I32, 7);
    output.writeI32(this.grabState);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 8);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.typeState !== null && this.typeState !== undefined) {
    output.writeFieldBegin('typeState', Thrift.Type.I32, 9);
    output.writeI32(this.typeState);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 10);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressInfoPaginate = module.exports.ExpressInfoPaginate = function(args) {
  this.result = null;
  this.total = null;
  this.pageCount = null;
  this.expressInfoList = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.pageCount !== undefined) {
      this.pageCount = args.pageCount;
    }
    if (args.expressInfoList !== undefined) {
      this.expressInfoList = args.expressInfoList;
    }
  }
};
ExpressInfoPaginate.prototype = {};
ExpressInfoPaginate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.expressInfoList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ExpressInfo();
          elem22.read(input);
          this.expressInfoList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressInfoPaginate.prototype.write = function(output) {
  output.writeStructBegin('ExpressInfoPaginate');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 2);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.pageCount !== null && this.pageCount !== undefined) {
    output.writeFieldBegin('pageCount', Thrift.Type.I32, 3);
    output.writeI32(this.pageCount);
    output.writeFieldEnd();
  }
  if (this.expressInfoList !== null && this.expressInfoList !== undefined) {
    output.writeFieldBegin('expressInfoList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.expressInfoList.length);
    for (var iter23 in this.expressInfoList)
    {
      if (this.expressInfoList.hasOwnProperty(iter23))
      {
        iter23 = this.expressInfoList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeReq = module.exports.SubscribeReq = function(args) {
  this.company = null;
  this.number = null;
  this.from = null;
  this.to = null;
  if (args) {
    if (args.company !== undefined) {
      this.company = args.company;
    }
    if (args.number !== undefined) {
      this.number = args.number;
    }
    if (args.from !== undefined) {
      this.from = args.from;
    }
    if (args.to !== undefined) {
      this.to = args.to;
    }
  }
};
SubscribeReq.prototype = {};
SubscribeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.from = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeReq.prototype.write = function(output) {
  output.writeStructBegin('SubscribeReq');
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 1);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 2);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  if (this.from !== null && this.from !== undefined) {
    output.writeFieldBegin('from', Thrift.Type.STRING, 3);
    output.writeString(this.from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 4);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeRes = module.exports.SubscribeRes = function(args) {
  this.status = null;
  this.nu = null;
  this.ischeck = null;
  this.com = null;
  this.traceJSON = null;
  this.state = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.nu !== undefined) {
      this.nu = args.nu;
    }
    if (args.ischeck !== undefined) {
      this.ischeck = args.ischeck;
    }
    if (args.com !== undefined) {
      this.com = args.com;
    }
    if (args.traceJSON !== undefined) {
      this.traceJSON = args.traceJSON;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
SubscribeRes.prototype = {};
SubscribeRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nu = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ischeck = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.com = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.traceJSON = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeRes.prototype.write = function(output) {
  output.writeStructBegin('SubscribeRes');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 1);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.nu !== null && this.nu !== undefined) {
    output.writeFieldBegin('nu', Thrift.Type.STRING, 2);
    output.writeString(this.nu);
    output.writeFieldEnd();
  }
  if (this.ischeck !== null && this.ischeck !== undefined) {
    output.writeFieldBegin('ischeck', Thrift.Type.STRING, 3);
    output.writeString(this.ischeck);
    output.writeFieldEnd();
  }
  if (this.com !== null && this.com !== undefined) {
    output.writeFieldBegin('com', Thrift.Type.STRING, 4);
    output.writeString(this.com);
    output.writeFieldEnd();
  }
  if (this.traceJSON !== null && this.traceJSON !== undefined) {
    output.writeFieldBegin('traceJSON', Thrift.Type.STRING, 5);
    output.writeString(this.traceJSON);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 6);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpressParams = module.exports.ExpressParams = function(args) {
  this.orderId = null;
  this.queryType = null;
  this.com = null;
  this.num = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.queryType !== undefined) {
      this.queryType = args.queryType;
    }
    if (args.com !== undefined) {
      this.com = args.com;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
  }
};
ExpressParams.prototype = {};
ExpressParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.com = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.num = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpressParams.prototype.write = function(output) {
  output.writeStructBegin('ExpressParams');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.queryType !== null && this.queryType !== undefined) {
    output.writeFieldBegin('queryType', Thrift.Type.I32, 2);
    output.writeI32(this.queryType);
    output.writeFieldEnd();
  }
  if (this.com !== null && this.com !== undefined) {
    output.writeFieldBegin('com', Thrift.Type.STRING, 3);
    output.writeString(this.com);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.STRING, 4);
    output.writeString(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

