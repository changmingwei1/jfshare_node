//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var order_ttypes = require('./order_types')
var pay_ttypes = require('./pay_types')


var ttypes = module.exports = {};
BuySellerDetail = module.exports.BuySellerDetail = function(args) {
  this.sellerId = null;
  this.sellerName = null;
  this.buyerComment = null;
  this.productList = null;
  if (args) {
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.sellerName !== undefined && args.sellerName !== null) {
      this.sellerName = args.sellerName;
    }
    if (args.buyerComment !== undefined && args.buyerComment !== null) {
      this.buyerComment = args.buyerComment;
    }
    if (args.productList !== undefined && args.productList !== null) {
      this.productList = Thrift.copyList(args.productList, [order_ttypes.OrderInfo]);
    }
  }
};
BuySellerDetail.prototype = {};
BuySellerDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sellerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.buyerComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.productList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new order_ttypes.OrderInfo();
          elem6.read(input);
          this.productList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuySellerDetail.prototype.write = function(output) {
  output.writeStructBegin('BuySellerDetail');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.sellerName !== null && this.sellerName !== undefined) {
    output.writeFieldBegin('sellerName', Thrift.Type.STRING, 2);
    output.writeString(this.sellerName);
    output.writeFieldEnd();
  }
  if (this.buyerComment !== null && this.buyerComment !== undefined) {
    output.writeFieldBegin('buyerComment', Thrift.Type.STRING, 3);
    output.writeString(this.buyerComment);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter7 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter7))
      {
        iter7 = this.productList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BuyInfo = module.exports.BuyInfo = function(args) {
  this.userId = null;
  this.userName = null;
  this.amount = null;
  this.payChannel = null;
  this.deliverInfo = null;
  this.sellerDetailList = null;
  this.fromSource = null;
  this.wi = null;
  this.exchangeScore = null;
  this.exchangeCash = null;
  this.tradeCode = null;
  this.fromBatch = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.payChannel !== undefined && args.payChannel !== null) {
      this.payChannel = new pay_ttypes.PayChannel(args.payChannel);
    }
    if (args.deliverInfo !== undefined && args.deliverInfo !== null) {
      this.deliverInfo = new order_ttypes.DeliverInfo(args.deliverInfo);
    }
    if (args.sellerDetailList !== undefined && args.sellerDetailList !== null) {
      this.sellerDetailList = Thrift.copyList(args.sellerDetailList, [ttypes.BuySellerDetail]);
    }
    if (args.fromSource !== undefined && args.fromSource !== null) {
      this.fromSource = args.fromSource;
    }
    if (args.wi !== undefined && args.wi !== null) {
      this.wi = args.wi;
    }
    if (args.exchangeScore !== undefined && args.exchangeScore !== null) {
      this.exchangeScore = args.exchangeScore;
    }
    if (args.exchangeCash !== undefined && args.exchangeCash !== null) {
      this.exchangeCash = args.exchangeCash;
    }
    if (args.tradeCode !== undefined && args.tradeCode !== null) {
      this.tradeCode = args.tradeCode;
    }
    if (args.fromBatch !== undefined && args.fromBatch !== null) {
      this.fromBatch = args.fromBatch;
    }
  }
};
BuyInfo.prototype = {};
BuyInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payChannel = new pay_ttypes.PayChannel();
        this.payChannel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.deliverInfo = new order_ttypes.DeliverInfo();
        this.deliverInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.sellerDetailList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.BuySellerDetail();
          elem14.read(input);
          this.sellerDetailList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.fromSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.wi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.exchangeScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeCash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.tradeCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.fromBatch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuyInfo.prototype.write = function(output) {
  output.writeStructBegin('BuyInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 3);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.payChannel !== null && this.payChannel !== undefined) {
    output.writeFieldBegin('payChannel', Thrift.Type.STRUCT, 4);
    this.payChannel.write(output);
    output.writeFieldEnd();
  }
  if (this.deliverInfo !== null && this.deliverInfo !== undefined) {
    output.writeFieldBegin('deliverInfo', Thrift.Type.STRUCT, 5);
    this.deliverInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.sellerDetailList !== null && this.sellerDetailList !== undefined) {
    output.writeFieldBegin('sellerDetailList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.sellerDetailList.length);
    for (var iter15 in this.sellerDetailList)
    {
      if (this.sellerDetailList.hasOwnProperty(iter15))
      {
        iter15 = this.sellerDetailList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.I32, 7);
    output.writeI32(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.wi !== null && this.wi !== undefined) {
    output.writeFieldBegin('wi', Thrift.Type.STRING, 8);
    output.writeString(this.wi);
    output.writeFieldEnd();
  }
  if (this.exchangeScore !== null && this.exchangeScore !== undefined) {
    output.writeFieldBegin('exchangeScore', Thrift.Type.I32, 9);
    output.writeI32(this.exchangeScore);
    output.writeFieldEnd();
  }
  if (this.exchangeCash !== null && this.exchangeCash !== undefined) {
    output.writeFieldBegin('exchangeCash', Thrift.Type.STRING, 10);
    output.writeString(this.exchangeCash);
    output.writeFieldEnd();
  }
  if (this.tradeCode !== null && this.tradeCode !== undefined) {
    output.writeFieldBegin('tradeCode', Thrift.Type.STRING, 11);
    output.writeString(this.tradeCode);
    output.writeFieldEnd();
  }
  if (this.fromBatch !== null && this.fromBatch !== undefined) {
    output.writeFieldBegin('fromBatch', Thrift.Type.I32, 12);
    output.writeI32(this.fromBatch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderConfirmResult = module.exports.OrderConfirmResult = function(args) {
  this.result = null;
  this.orderIdList = null;
  this.extend = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.orderIdList !== undefined && args.orderIdList !== null) {
      this.orderIdList = Thrift.copyList(args.orderIdList, [null]);
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = args.extend;
    }
  }
};
OrderConfirmResult.prototype = {};
OrderConfirmResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.orderIdList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.orderIdList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.extend = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderConfirmResult.prototype.write = function(output) {
  output.writeStructBegin('OrderConfirmResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.orderIdList !== null && this.orderIdList !== undefined) {
    output.writeFieldBegin('orderIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.orderIdList.length);
    for (var iter23 in this.orderIdList)
    {
      if (this.orderIdList.hasOwnProperty(iter23))
      {
        iter23 = this.orderIdList[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.STRING, 3);
    output.writeString(this.extend);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeProduct = module.exports.ExchangeProduct = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.price = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined && args.skuNum !== null) {
      this.skuNum = args.skuNum;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
ExchangeProduct.prototype = {};
ExchangeProduct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeProduct.prototype.write = function(output) {
  output.writeStructBegin('ExchangeProduct');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 3);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeRule = module.exports.ExchangeRule = function(args) {
  this.percent = null;
  this.score = null;
  this.cash = null;
  this.maxExchangeCash = null;
  if (args) {
    if (args.percent !== undefined && args.percent !== null) {
      this.percent = args.percent;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.cash !== undefined && args.cash !== null) {
      this.cash = args.cash;
    }
    if (args.maxExchangeCash !== undefined && args.maxExchangeCash !== null) {
      this.maxExchangeCash = args.maxExchangeCash;
    }
  }
};
ExchangeRule.prototype = {};
ExchangeRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.percent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.score = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.maxExchangeCash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeRule.prototype.write = function(output) {
  output.writeStructBegin('ExchangeRule');
  if (this.percent !== null && this.percent !== undefined) {
    output.writeFieldBegin('percent', Thrift.Type.STRING, 1);
    output.writeString(this.percent);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRING, 2);
    output.writeString(this.score);
    output.writeFieldEnd();
  }
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.STRING, 3);
    output.writeString(this.cash);
    output.writeFieldEnd();
  }
  if (this.maxExchangeCash !== null && this.maxExchangeCash !== undefined) {
    output.writeFieldBegin('maxExchangeCash', Thrift.Type.STRING, 4);
    output.writeString(this.maxExchangeCash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeParam = module.exports.ExchangeParam = function(args) {
  this.userId = null;
  this.productList = null;
  this.amount = null;
  this.score = null;
  this.tradeCode = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.productList !== undefined && args.productList !== null) {
      this.productList = Thrift.copyList(args.productList, [ttypes.ExchangeProduct]);
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.tradeCode !== undefined && args.tradeCode !== null) {
      this.tradeCode = args.tradeCode;
    }
  }
};
ExchangeParam.prototype = {};
ExchangeParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.productList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.ExchangeProduct();
          elem30.read(input);
          this.productList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.score = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tradeCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeParam.prototype.write = function(output) {
  output.writeStructBegin('ExchangeParam');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter31 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter31))
      {
        iter31 = this.productList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 3);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRING, 4);
    output.writeString(this.score);
    output.writeFieldEnd();
  }
  if (this.tradeCode !== null && this.tradeCode !== undefined) {
    output.writeFieldBegin('tradeCode', Thrift.Type.STRING, 5);
    output.writeString(this.tradeCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeDetail = module.exports.ExchangeDetail = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.price = null;
  this.count = null;
  this.score = null;
  this.amount = null;
  this.rule = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined && args.skuNum !== null) {
      this.skuNum = args.skuNum;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.rule !== undefined && args.rule !== null) {
      this.rule = new ttypes.ExchangeRule(args.rule);
    }
  }
};
ExchangeDetail.prototype = {};
ExchangeDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.score = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.rule = new ttypes.ExchangeRule();
        this.rule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeDetail.prototype.write = function(output) {
  output.writeStructBegin('ExchangeDetail');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 3);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.STRING, 5);
    output.writeString(this.score);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 6);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.rule !== null && this.rule !== undefined) {
    output.writeFieldBegin('rule', Thrift.Type.STRUCT, 7);
    this.rule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeResult = module.exports.ExchangeResult = function(args) {
  this.result = null;
  this.totalScore = null;
  this.exchangeScore = null;
  this.amount = null;
  this.exchangeDetailList = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.totalScore !== undefined && args.totalScore !== null) {
      this.totalScore = args.totalScore;
    }
    if (args.exchangeScore !== undefined && args.exchangeScore !== null) {
      this.exchangeScore = args.exchangeScore;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.exchangeDetailList !== undefined && args.exchangeDetailList !== null) {
      this.exchangeDetailList = Thrift.copyList(args.exchangeDetailList, [ttypes.ExchangeDetail]);
    }
  }
};
ExchangeResult.prototype = {};
ExchangeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.totalScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeScore = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.exchangeDetailList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ExchangeDetail();
          elem38.read(input);
          this.exchangeDetailList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeResult.prototype.write = function(output) {
  output.writeStructBegin('ExchangeResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.totalScore !== null && this.totalScore !== undefined) {
    output.writeFieldBegin('totalScore', Thrift.Type.STRING, 2);
    output.writeString(this.totalScore);
    output.writeFieldEnd();
  }
  if (this.exchangeScore !== null && this.exchangeScore !== undefined) {
    output.writeFieldBegin('exchangeScore', Thrift.Type.STRING, 3);
    output.writeString(this.exchangeScore);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 4);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.exchangeDetailList !== null && this.exchangeDetailList !== undefined) {
    output.writeFieldBegin('exchangeDetailList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.exchangeDetailList.length);
    for (var iter39 in this.exchangeDetailList)
    {
      if (this.exchangeDetailList.hasOwnProperty(iter39))
      {
        iter39 = this.exchangeDetailList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeRuleResult = module.exports.ExchangeRuleResult = function(args) {
  this.result = null;
  this.exchangeRule = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.exchangeRule !== undefined && args.exchangeRule !== null) {
      this.exchangeRule = new ttypes.ExchangeRule(args.exchangeRule);
    }
  }
};
ExchangeRuleResult.prototype = {};
ExchangeRuleResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.exchangeRule = new ttypes.ExchangeRule();
        this.exchangeRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeRuleResult.prototype.write = function(output) {
  output.writeStructBegin('ExchangeRuleResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.exchangeRule !== null && this.exchangeRule !== undefined) {
    output.writeFieldBegin('exchangeRule', Thrift.Type.STRUCT, 2);
    this.exchangeRule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

