//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
ProductSkuItem = module.exports.ProductSkuItem = function(args) {
  this.sellerClassNum = null;
  this.shelf = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.vPicture = null;
  this.skuName = null;
  this.weight = null;
  this.refPrice = null;
  this.storehouseId = null;
  this.skuNum = null;
  if (args) {
    if (args.sellerClassNum !== undefined && args.sellerClassNum !== null) {
      this.sellerClassNum = args.sellerClassNum;
    }
    if (args.shelf !== undefined && args.shelf !== null) {
      this.shelf = args.shelf;
    }
    if (args.curPrice !== undefined && args.curPrice !== null) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined && args.orgPrice !== null) {
      this.orgPrice = args.orgPrice;
    }
    if (args.vPicture !== undefined && args.vPicture !== null) {
      this.vPicture = args.vPicture;
    }
    if (args.skuName !== undefined && args.skuName !== null) {
      this.skuName = args.skuName;
    }
    if (args.weight !== undefined && args.weight !== null) {
      this.weight = args.weight;
    }
    if (args.refPrice !== undefined && args.refPrice !== null) {
      this.refPrice = args.refPrice;
    }
    if (args.storehouseId !== undefined && args.storehouseId !== null) {
      this.storehouseId = args.storehouseId;
    }
    if (args.skuNum !== undefined && args.skuNum !== null) {
      this.skuNum = args.skuNum;
    }
  }
};
ProductSkuItem.prototype = {};
ProductSkuItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sellerClassNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shelf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.vPicture = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.skuName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.weight = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.refPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.storehouseId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuItem.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuItem');
  if (this.sellerClassNum !== null && this.sellerClassNum !== undefined) {
    output.writeFieldBegin('sellerClassNum', Thrift.Type.STRING, 1);
    output.writeString(this.sellerClassNum);
    output.writeFieldEnd();
  }
  if (this.shelf !== null && this.shelf !== undefined) {
    output.writeFieldBegin('shelf', Thrift.Type.STRING, 2);
    output.writeString(this.shelf);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 3);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 4);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.vPicture !== null && this.vPicture !== undefined) {
    output.writeFieldBegin('vPicture', Thrift.Type.STRING, 5);
    output.writeString(this.vPicture);
    output.writeFieldEnd();
  }
  if (this.skuName !== null && this.skuName !== undefined) {
    output.writeFieldBegin('skuName', Thrift.Type.STRING, 6);
    output.writeString(this.skuName);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.STRING, 7);
    output.writeString(this.weight);
    output.writeFieldEnd();
  }
  if (this.refPrice !== null && this.refPrice !== undefined) {
    output.writeFieldBegin('refPrice', Thrift.Type.STRING, 8);
    output.writeString(this.refPrice);
    output.writeFieldEnd();
  }
  if (this.storehouseId !== null && this.storehouseId !== undefined) {
    output.writeFieldBegin('storehouseId', Thrift.Type.I32, 9);
    output.writeI32(this.storehouseId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 10);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSku = module.exports.ProductSku = function(args) {
  this.skuItems = null;
  this.sellerClassNum = null;
  this.shelf = null;
  this.curPrice = null;
  this.orgPrice = null;
  this.minCurPrice = null;
  this.maxCurPrice = null;
  this.minOrgPrice = null;
  this.maxOrgPrice = null;
  this.vPicture = null;
  this.skuName = null;
  this.skuNum = null;
  this.refPrice = null;
  if (args) {
    if (args.skuItems !== undefined && args.skuItems !== null) {
      this.skuItems = Thrift.copyList(args.skuItems, [ttypes.ProductSkuItem]);
    }
    if (args.sellerClassNum !== undefined && args.sellerClassNum !== null) {
      this.sellerClassNum = args.sellerClassNum;
    }
    if (args.shelf !== undefined && args.shelf !== null) {
      this.shelf = args.shelf;
    }
    if (args.curPrice !== undefined && args.curPrice !== null) {
      this.curPrice = args.curPrice;
    }
    if (args.orgPrice !== undefined && args.orgPrice !== null) {
      this.orgPrice = args.orgPrice;
    }
    if (args.minCurPrice !== undefined && args.minCurPrice !== null) {
      this.minCurPrice = args.minCurPrice;
    }
    if (args.maxCurPrice !== undefined && args.maxCurPrice !== null) {
      this.maxCurPrice = args.maxCurPrice;
    }
    if (args.minOrgPrice !== undefined && args.minOrgPrice !== null) {
      this.minOrgPrice = args.minOrgPrice;
    }
    if (args.maxOrgPrice !== undefined && args.maxOrgPrice !== null) {
      this.maxOrgPrice = args.maxOrgPrice;
    }
    if (args.vPicture !== undefined && args.vPicture !== null) {
      this.vPicture = args.vPicture;
    }
    if (args.skuName !== undefined && args.skuName !== null) {
      this.skuName = args.skuName;
    }
    if (args.skuNum !== undefined && args.skuNum !== null) {
      this.skuNum = args.skuNum;
    }
    if (args.refPrice !== undefined && args.refPrice !== null) {
      this.refPrice = args.refPrice;
    }
  }
};
ProductSku.prototype = {};
ProductSku.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.skuItems = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ProductSkuItem();
          elem6.read(input);
          this.skuItems.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sellerClassNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shelf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.minCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.maxCurPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.minOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.maxOrgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.vPicture = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.skuName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.refPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSku.prototype.write = function(output) {
  output.writeStructBegin('ProductSku');
  if (this.skuItems !== null && this.skuItems !== undefined) {
    output.writeFieldBegin('skuItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.skuItems.length);
    for (var iter7 in this.skuItems)
    {
      if (this.skuItems.hasOwnProperty(iter7))
      {
        iter7 = this.skuItems[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sellerClassNum !== null && this.sellerClassNum !== undefined) {
    output.writeFieldBegin('sellerClassNum', Thrift.Type.STRING, 2);
    output.writeString(this.sellerClassNum);
    output.writeFieldEnd();
  }
  if (this.shelf !== null && this.shelf !== undefined) {
    output.writeFieldBegin('shelf', Thrift.Type.STRING, 3);
    output.writeString(this.shelf);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 4);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 5);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.minCurPrice !== null && this.minCurPrice !== undefined) {
    output.writeFieldBegin('minCurPrice', Thrift.Type.STRING, 6);
    output.writeString(this.minCurPrice);
    output.writeFieldEnd();
  }
  if (this.maxCurPrice !== null && this.maxCurPrice !== undefined) {
    output.writeFieldBegin('maxCurPrice', Thrift.Type.STRING, 7);
    output.writeString(this.maxCurPrice);
    output.writeFieldEnd();
  }
  if (this.minOrgPrice !== null && this.minOrgPrice !== undefined) {
    output.writeFieldBegin('minOrgPrice', Thrift.Type.STRING, 8);
    output.writeString(this.minOrgPrice);
    output.writeFieldEnd();
  }
  if (this.maxOrgPrice !== null && this.maxOrgPrice !== undefined) {
    output.writeFieldBegin('maxOrgPrice', Thrift.Type.STRING, 9);
    output.writeString(this.maxOrgPrice);
    output.writeFieldEnd();
  }
  if (this.vPicture !== null && this.vPicture !== undefined) {
    output.writeFieldBegin('vPicture', Thrift.Type.STRING, 10);
    output.writeString(this.vPicture);
    output.writeFieldEnd();
  }
  if (this.skuName !== null && this.skuName !== undefined) {
    output.writeFieldBegin('skuName', Thrift.Type.STRING, 11);
    output.writeString(this.skuName);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 12);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.refPrice !== null && this.refPrice !== undefined) {
    output.writeFieldBegin('refPrice', Thrift.Type.STRING, 13);
    output.writeString(this.refPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSkuResult = module.exports.ProductSkuResult = function(args) {
  this.result = null;
  this.productSku = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.productSku !== undefined && args.productSku !== null) {
      this.productSku = new ttypes.ProductSku(args.productSku);
    }
  }
};
ProductSkuResult.prototype = {};
ProductSkuResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.productSku = new ttypes.ProductSku();
        this.productSku.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuResult.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.productSku !== null && this.productSku !== undefined) {
    output.writeFieldBegin('productSku', Thrift.Type.STRUCT, 2);
    this.productSku.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Product = module.exports.Product = function(args) {
  this.productId = null;
  this.sellerId = null;
  this.productName = null;
  this.viceName = null;
  this.subjectId = null;
  this.brandId = null;
  this.imgKey = ',,,,,';
  this.detailKey = null;
  this.maxBuyLimit = null;
  this.activeState = null;
  this.type = null;
  this.remark = null;
  this.createTime = null;
  this.createUserId = null;
  this.lastUpdateTime = null;
  this.lastUpdateId = null;
  this.skuTemplate = null;
  this.attribute = null;
  this.productSku = null;
  this.productUrl = null;
  this.tags = null;
  this.detailContent = null;
  this.productSnapshootId = null;
  this.storehouseIds = null;
  this.postageId = null;
  this.thirdExchangeRate = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.viceName !== undefined && args.viceName !== null) {
      this.viceName = args.viceName;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined && args.brandId !== null) {
      this.brandId = args.brandId;
    }
    if (args.imgKey !== undefined && args.imgKey !== null) {
      this.imgKey = args.imgKey;
    }
    if (args.detailKey !== undefined && args.detailKey !== null) {
      this.detailKey = args.detailKey;
    }
    if (args.maxBuyLimit !== undefined && args.maxBuyLimit !== null) {
      this.maxBuyLimit = args.maxBuyLimit;
    }
    if (args.activeState !== undefined && args.activeState !== null) {
      this.activeState = args.activeState;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.createUserId !== undefined && args.createUserId !== null) {
      this.createUserId = args.createUserId;
    }
    if (args.lastUpdateTime !== undefined && args.lastUpdateTime !== null) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
    if (args.lastUpdateId !== undefined && args.lastUpdateId !== null) {
      this.lastUpdateId = args.lastUpdateId;
    }
    if (args.skuTemplate !== undefined && args.skuTemplate !== null) {
      this.skuTemplate = args.skuTemplate;
    }
    if (args.attribute !== undefined && args.attribute !== null) {
      this.attribute = args.attribute;
    }
    if (args.productSku !== undefined && args.productSku !== null) {
      this.productSku = new ttypes.ProductSku(args.productSku);
    }
    if (args.productUrl !== undefined && args.productUrl !== null) {
      this.productUrl = args.productUrl;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = args.tags;
    }
    if (args.detailContent !== undefined && args.detailContent !== null) {
      this.detailContent = args.detailContent;
    }
    if (args.productSnapshootId !== undefined && args.productSnapshootId !== null) {
      this.productSnapshootId = args.productSnapshootId;
    }
    if (args.storehouseIds !== undefined && args.storehouseIds !== null) {
      this.storehouseIds = args.storehouseIds;
    }
    if (args.postageId !== undefined && args.postageId !== null) {
      this.postageId = args.postageId;
    }
    if (args.thirdExchangeRate !== undefined && args.thirdExchangeRate !== null) {
      this.thirdExchangeRate = args.thirdExchangeRate;
    }
  }
};
Product.prototype = {};
Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.imgKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.detailKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.maxBuyLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.createUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.lastUpdateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.skuTemplate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.productSku = new ttypes.ProductSku();
        this.productSku.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.productUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.tags = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.detailContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.productSnapshootId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.storehouseIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.postageId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.thirdExchangeRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 2);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 3);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 4);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 5);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 6);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.imgKey !== null && this.imgKey !== undefined) {
    output.writeFieldBegin('imgKey', Thrift.Type.STRING, 7);
    output.writeString(this.imgKey);
    output.writeFieldEnd();
  }
  if (this.detailKey !== null && this.detailKey !== undefined) {
    output.writeFieldBegin('detailKey', Thrift.Type.STRING, 8);
    output.writeString(this.detailKey);
    output.writeFieldEnd();
  }
  if (this.maxBuyLimit !== null && this.maxBuyLimit !== undefined) {
    output.writeFieldBegin('maxBuyLimit', Thrift.Type.I32, 9);
    output.writeI32(this.maxBuyLimit);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 10);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 11);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 12);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 13);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.createUserId !== null && this.createUserId !== undefined) {
    output.writeFieldBegin('createUserId', Thrift.Type.I32, 14);
    output.writeI32(this.createUserId);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.STRING, 15);
    output.writeString(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdateId !== null && this.lastUpdateId !== undefined) {
    output.writeFieldBegin('lastUpdateId', Thrift.Type.I32, 16);
    output.writeI32(this.lastUpdateId);
    output.writeFieldEnd();
  }
  if (this.skuTemplate !== null && this.skuTemplate !== undefined) {
    output.writeFieldBegin('skuTemplate', Thrift.Type.STRING, 17);
    output.writeString(this.skuTemplate);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 18);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.productSku !== null && this.productSku !== undefined) {
    output.writeFieldBegin('productSku', Thrift.Type.STRUCT, 19);
    this.productSku.write(output);
    output.writeFieldEnd();
  }
  if (this.productUrl !== null && this.productUrl !== undefined) {
    output.writeFieldBegin('productUrl', Thrift.Type.STRING, 20);
    output.writeString(this.productUrl);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.STRING, 21);
    output.writeString(this.tags);
    output.writeFieldEnd();
  }
  if (this.detailContent !== null && this.detailContent !== undefined) {
    output.writeFieldBegin('detailContent', Thrift.Type.STRING, 22);
    output.writeString(this.detailContent);
    output.writeFieldEnd();
  }
  if (this.productSnapshootId !== null && this.productSnapshootId !== undefined) {
    output.writeFieldBegin('productSnapshootId', Thrift.Type.STRING, 23);
    output.writeString(this.productSnapshootId);
    output.writeFieldEnd();
  }
  if (this.storehouseIds !== null && this.storehouseIds !== undefined) {
    output.writeFieldBegin('storehouseIds', Thrift.Type.STRING, 24);
    output.writeString(this.storehouseIds);
    output.writeFieldEnd();
  }
  if (this.postageId !== null && this.postageId !== undefined) {
    output.writeFieldBegin('postageId', Thrift.Type.I32, 25);
    output.writeI32(this.postageId);
    output.writeFieldEnd();
  }
  if (this.thirdExchangeRate !== null && this.thirdExchangeRate !== undefined) {
    output.writeFieldBegin('thirdExchangeRate', Thrift.Type.STRING, 26);
    output.writeString(this.thirdExchangeRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductResult = module.exports.ProductResult = function(args) {
  this.result = null;
  this.product = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.product !== undefined && args.product !== null) {
      this.product = new ttypes.Product(args.product);
    }
  }
};
ProductResult.prototype = {};
ProductResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.Product();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductResult.prototype.write = function(output) {
  output.writeStructBegin('ProductResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 2);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductDetailParam = module.exports.ProductDetailParam = function(args) {
  this.detailKey = null;
  this.productId = null;
  if (args) {
    if (args.detailKey !== undefined && args.detailKey !== null) {
      this.detailKey = args.detailKey;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
  }
};
ProductDetailParam.prototype = {};
ProductDetailParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.detailKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductDetailParam.prototype.write = function(output) {
  output.writeStructBegin('ProductDetailParam');
  if (this.detailKey !== null && this.detailKey !== undefined) {
    output.writeFieldBegin('detailKey', Thrift.Type.STRING, 1);
    output.writeString(this.detailKey);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductRetParam = module.exports.ProductRetParam = function(args) {
  this.baseTag = null;
  this.skuTemplateTag = null;
  this.skuTag = null;
  this.attributeTag = null;
  if (args) {
    if (args.baseTag !== undefined && args.baseTag !== null) {
      this.baseTag = args.baseTag;
    }
    if (args.skuTemplateTag !== undefined && args.skuTemplateTag !== null) {
      this.skuTemplateTag = args.skuTemplateTag;
    }
    if (args.skuTag !== undefined && args.skuTag !== null) {
      this.skuTag = args.skuTag;
    }
    if (args.attributeTag !== undefined && args.attributeTag !== null) {
      this.attributeTag = args.attributeTag;
    }
  }
};
ProductRetParam.prototype = {};
ProductRetParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.baseTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.skuTemplateTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.skuTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.attributeTag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductRetParam.prototype.write = function(output) {
  output.writeStructBegin('ProductRetParam');
  if (this.baseTag !== null && this.baseTag !== undefined) {
    output.writeFieldBegin('baseTag', Thrift.Type.I32, 1);
    output.writeI32(this.baseTag);
    output.writeFieldEnd();
  }
  if (this.skuTemplateTag !== null && this.skuTemplateTag !== undefined) {
    output.writeFieldBegin('skuTemplateTag', Thrift.Type.I32, 2);
    output.writeI32(this.skuTemplateTag);
    output.writeFieldEnd();
  }
  if (this.skuTag !== null && this.skuTag !== undefined) {
    output.writeFieldBegin('skuTag', Thrift.Type.I32, 3);
    output.writeI32(this.skuTag);
    output.writeFieldEnd();
  }
  if (this.attributeTag !== null && this.attributeTag !== undefined) {
    output.writeFieldBegin('attributeTag', Thrift.Type.I32, 4);
    output.writeI32(this.attributeTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurvey = module.exports.ProductSurvey = function(args) {
  this.productId = null;
  this.productName = null;
  this.subjectId = null;
  this.brandId = null;
  this.orgPrice = null;
  this.curPrice = null;
  this.activeStock = null;
  this.totalSales = null;
  this.activeState = null;
  this.imgUrl = null;
  this.viceName = null;
  this.createTime = null;
  this.sellerId = null;
  this.type = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined && args.brandId !== null) {
      this.brandId = args.brandId;
    }
    if (args.orgPrice !== undefined && args.orgPrice !== null) {
      this.orgPrice = args.orgPrice;
    }
    if (args.curPrice !== undefined && args.curPrice !== null) {
      this.curPrice = args.curPrice;
    }
    if (args.activeStock !== undefined && args.activeStock !== null) {
      this.activeStock = args.activeStock;
    }
    if (args.totalSales !== undefined && args.totalSales !== null) {
      this.totalSales = args.totalSales;
    }
    if (args.activeState !== undefined && args.activeState !== null) {
      this.activeState = args.activeState;
    }
    if (args.imgUrl !== undefined && args.imgUrl !== null) {
      this.imgUrl = args.imgUrl;
    }
    if (args.viceName !== undefined && args.viceName !== null) {
      this.viceName = args.viceName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
ProductSurvey.prototype = {};
ProductSurvey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.orgPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.curPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.activeStock = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.totalSales = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.imgUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurvey.prototype.write = function(output) {
  output.writeStructBegin('ProductSurvey');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 3);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 4);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.orgPrice !== null && this.orgPrice !== undefined) {
    output.writeFieldBegin('orgPrice', Thrift.Type.STRING, 5);
    output.writeString(this.orgPrice);
    output.writeFieldEnd();
  }
  if (this.curPrice !== null && this.curPrice !== undefined) {
    output.writeFieldBegin('curPrice', Thrift.Type.STRING, 6);
    output.writeString(this.curPrice);
    output.writeFieldEnd();
  }
  if (this.activeStock !== null && this.activeStock !== undefined) {
    output.writeFieldBegin('activeStock', Thrift.Type.I32, 7);
    output.writeI32(this.activeStock);
    output.writeFieldEnd();
  }
  if (this.totalSales !== null && this.totalSales !== undefined) {
    output.writeFieldBegin('totalSales', Thrift.Type.I32, 8);
    output.writeI32(this.totalSales);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 9);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.imgUrl !== null && this.imgUrl !== undefined) {
    output.writeFieldBegin('imgUrl', Thrift.Type.STRING, 10);
    output.writeString(this.imgUrl);
    output.writeFieldEnd();
  }
  if (this.viceName !== null && this.viceName !== undefined) {
    output.writeFieldBegin('viceName', Thrift.Type.STRING, 11);
    output.writeString(this.viceName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 12);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 13);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 14);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurveyQueryParam = module.exports.ProductSurveyQueryParam = function(args) {
  this.sellerId = null;
  this.productId = null;
  this.productName = null;
  this.activeState = null;
  this.pagination = null;
  this.sort = null;
  this.subjectId = null;
  this.brandId = null;
  this.subjectIdList = null;
  this.productIdList = null;
  if (args) {
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.activeState !== undefined && args.activeState !== null) {
      this.activeState = args.activeState;
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
    if (args.sort !== undefined && args.sort !== null) {
      this.sort = args.sort;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.brandId !== undefined && args.brandId !== null) {
      this.brandId = args.brandId;
    }
    if (args.subjectIdList !== undefined && args.subjectIdList !== null) {
      this.subjectIdList = Thrift.copyList(args.subjectIdList, [null]);
    }
    if (args.productIdList !== undefined && args.productIdList !== null) {
      this.productIdList = Thrift.copyList(args.productIdList, [null]);
    }
  }
};
ProductSurveyQueryParam.prototype = {};
ProductSurveyQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sort = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.subjectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.brandId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.subjectIdList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32();
          this.subjectIdList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.productIdList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.productIdList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurveyQueryParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSurveyQueryParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 3);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 4);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 5);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.sort !== null && this.sort !== undefined) {
    output.writeFieldBegin('sort', Thrift.Type.STRING, 6);
    output.writeString(this.sort);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I32, 7);
    output.writeI32(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.brandId !== null && this.brandId !== undefined) {
    output.writeFieldBegin('brandId', Thrift.Type.I32, 8);
    output.writeI32(this.brandId);
    output.writeFieldEnd();
  }
  if (this.subjectIdList !== null && this.subjectIdList !== undefined) {
    output.writeFieldBegin('subjectIdList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.I32, this.subjectIdList.length);
    for (var iter22 in this.subjectIdList)
    {
      if (this.subjectIdList.hasOwnProperty(iter22))
      {
        iter22 = this.subjectIdList[iter22];
        output.writeI32(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.productIdList !== null && this.productIdList !== undefined) {
    output.writeFieldBegin('productIdList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.productIdList.length);
    for (var iter23 in this.productIdList)
    {
      if (this.productIdList.hasOwnProperty(iter23))
      {
        iter23 = this.productIdList[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurveyQueryBatchParam = module.exports.ProductSurveyQueryBatchParam = function(args) {
  this.productIds = null;
  this.fromType = null;
  if (args) {
    if (args.productIds !== undefined && args.productIds !== null) {
      this.productIds = Thrift.copyList(args.productIds, [null]);
    }
    if (args.fromType !== undefined && args.fromType !== null) {
      this.fromType = args.fromType;
    }
  }
};
ProductSurveyQueryBatchParam.prototype = {};
ProductSurveyQueryBatchParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.productIds = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.productIds.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fromType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurveyQueryBatchParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSurveyQueryBatchParam');
  if (this.productIds !== null && this.productIds !== undefined) {
    output.writeFieldBegin('productIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.productIds.length);
    for (var iter31 in this.productIds)
    {
      if (this.productIds.hasOwnProperty(iter31))
      {
        iter31 = this.productIds[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fromType !== null && this.fromType !== undefined) {
    output.writeFieldBegin('fromType', Thrift.Type.I32, 2);
    output.writeI32(this.fromType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSkuParam = module.exports.ProductSkuParam = function(args) {
  this.productId = null;
  this.skuNum = null;
  this.storehouseId = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.skuNum !== undefined && args.skuNum !== null) {
      this.skuNum = args.skuNum;
    }
    if (args.storehouseId !== undefined && args.storehouseId !== null) {
      this.storehouseId = args.storehouseId;
    }
  }
};
ProductSkuParam.prototype = {};
ProductSkuParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.skuNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.storehouseId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSkuParam.prototype.write = function(output) {
  output.writeStructBegin('ProductSkuParam');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.skuNum !== null && this.skuNum !== undefined) {
    output.writeFieldBegin('skuNum', Thrift.Type.STRING, 2);
    output.writeString(this.skuNum);
    output.writeFieldEnd();
  }
  if (this.storehouseId !== null && this.storehouseId !== undefined) {
    output.writeFieldBegin('storehouseId', Thrift.Type.I32, 3);
    output.writeI32(this.storehouseId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductSurveyResult = module.exports.ProductSurveyResult = function(args) {
  this.result = null;
  this.pagination = null;
  this.productSurveyList = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
    if (args.productSurveyList !== undefined && args.productSurveyList !== null) {
      this.productSurveyList = Thrift.copyList(args.productSurveyList, [ttypes.ProductSurvey]);
    }
  }
};
ProductSurveyResult.prototype = {};
ProductSurveyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.productSurveyList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ProductSurvey();
          elem38.read(input);
          this.productSurveyList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSurveyResult.prototype.write = function(output) {
  output.writeStructBegin('ProductSurveyResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.productSurveyList !== null && this.productSurveyList !== undefined) {
    output.writeFieldBegin('productSurveyList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.productSurveyList.length);
    for (var iter39 in this.productSurveyList)
    {
      if (this.productSurveyList.hasOwnProperty(iter39))
      {
        iter39 = this.productSurveyList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCard = module.exports.ProductCard = function(args) {
  this.sellerId = null;
  this.productId = null;
  this.cardNumber = null;
  this.password = null;
  if (args) {
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
ProductCard.prototype = {};
ProductCard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCard.prototype.write = function(output) {
  output.writeStructBegin('ProductCard');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 3);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardView = module.exports.ProductCardView = function(args) {
  this.productId = null;
  this.cardNumber = null;
  this.password = null;
  this.state = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
ProductCardView.prototype = {};
ProductCardView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardView.prototype.write = function(output) {
  output.writeStructBegin('ProductCardView');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 2);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardViewParam = module.exports.ProductCardViewParam = function(args) {
  this.sellerId = null;
  this.productId = null;
  this.cardNumber = null;
  this.state = null;
  if (args) {
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
ProductCardViewParam.prototype = {};
ProductCardViewParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardViewParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardViewParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 3);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardStatistics = module.exports.ProductCardStatistics = function(args) {
  this.productId = null;
  this.productName = null;
  this.total = null;
  this.usedNum = null;
  this.unusedNum = null;
  this.createTime = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.total !== undefined && args.total !== null) {
      this.total = args.total;
    }
    if (args.usedNum !== undefined && args.usedNum !== null) {
      this.usedNum = args.usedNum;
    }
    if (args.unusedNum !== undefined && args.unusedNum !== null) {
      this.unusedNum = args.unusedNum;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
  }
};
ProductCardStatistics.prototype = {};
ProductCardStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.usedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.unusedNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardStatistics.prototype.write = function(output) {
  output.writeStructBegin('ProductCardStatistics');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.usedNum !== null && this.usedNum !== undefined) {
    output.writeFieldBegin('usedNum', Thrift.Type.I32, 4);
    output.writeI32(this.usedNum);
    output.writeFieldEnd();
  }
  if (this.unusedNum !== null && this.unusedNum !== undefined) {
    output.writeFieldBegin('unusedNum', Thrift.Type.I32, 5);
    output.writeI32(this.unusedNum);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardStatisticsParam = module.exports.ProductCardStatisticsParam = function(args) {
  this.sellerId = null;
  this.productName = null;
  if (args) {
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
  }
};
ProductCardStatisticsParam.prototype = {};
ProductCardStatisticsParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardStatisticsParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardStatisticsParam');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardParam = module.exports.ProductCardParam = function(args) {
  this.productId = null;
  this.transactionId = null;
  this.num = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = args.transactionId;
    }
    if (args.num !== undefined && args.num !== null) {
      this.num = args.num;
    }
  }
};
ProductCardParam.prototype = {};
ProductCardParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.transactionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardParam.prototype.write = function(output) {
  output.writeStructBegin('ProductCardParam');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRING, 2);
    output.writeString(this.transactionId);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardResult = module.exports.ProductCardResult = function(args) {
  this.result = null;
  this.cardList = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.cardList !== undefined && args.cardList !== null) {
      this.cardList = Thrift.copyList(args.cardList, [ttypes.ProductCard]);
    }
  }
};
ProductCardResult.prototype = {};
ProductCardResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.cardList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ProductCard();
          elem46.read(input);
          this.cardList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardResult.prototype.write = function(output) {
  output.writeStructBegin('ProductCardResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardList !== null && this.cardList !== undefined) {
    output.writeFieldBegin('cardList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardList.length);
    for (var iter47 in this.cardList)
    {
      if (this.cardList.hasOwnProperty(iter47))
      {
        iter47 = this.cardList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardViewListResult = module.exports.ProductCardViewListResult = function(args) {
  this.result = null;
  this.cardViewList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.cardViewList !== undefined && args.cardViewList !== null) {
      this.cardViewList = Thrift.copyList(args.cardViewList, [ttypes.ProductCardView]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
  }
};
ProductCardViewListResult.prototype = {};
ProductCardViewListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.cardViewList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.ProductCardView();
          elem54.read(input);
          this.cardViewList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardViewListResult.prototype.write = function(output) {
  output.writeStructBegin('ProductCardViewListResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardViewList !== null && this.cardViewList !== undefined) {
    output.writeFieldBegin('cardViewList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardViewList.length);
    for (var iter55 in this.cardViewList)
    {
      if (this.cardViewList.hasOwnProperty(iter55))
      {
        iter55 = this.cardViewList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductCardStatisticsResult = module.exports.ProductCardStatisticsResult = function(args) {
  this.result = null;
  this.cardtatisticsList = null;
  this.pagination = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new result_ttypes.Result(args.result);
    }
    if (args.cardtatisticsList !== undefined && args.cardtatisticsList !== null) {
      this.cardtatisticsList = Thrift.copyList(args.cardtatisticsList, [ttypes.ProductCardStatistics]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
  }
};
ProductCardStatisticsResult.prototype = {};
ProductCardStatisticsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.cardtatisticsList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.ProductCardStatistics();
          elem62.read(input);
          this.cardtatisticsList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCardStatisticsResult.prototype.write = function(output) {
  output.writeStructBegin('ProductCardStatisticsResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.cardtatisticsList !== null && this.cardtatisticsList !== undefined) {
    output.writeFieldBegin('cardtatisticsList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cardtatisticsList.length);
    for (var iter63 in this.cardtatisticsList)
    {
      if (this.cardtatisticsList.hasOwnProperty(iter63))
      {
        iter63 = this.cardtatisticsList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProductOpt = module.exports.ProductOpt = function(args) {
  this.productId = null;
  this.curState = null;
  this.activeState = null;
  this.desc = null;
  this.operatorId = null;
  this.operatorType = null;
  this.createTime = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.curState !== undefined && args.curState !== null) {
      this.curState = args.curState;
    }
    if (args.activeState !== undefined && args.activeState !== null) {
      this.activeState = args.activeState;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
    if (args.operatorId !== undefined && args.operatorId !== null) {
      this.operatorId = args.operatorId;
    }
    if (args.operatorType !== undefined && args.operatorType !== null) {
      this.operatorType = args.operatorType;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
  }
};
ProductOpt.prototype = {};
ProductOpt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.curState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operatorId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductOpt.prototype.write = function(output) {
  output.writeStructBegin('ProductOpt');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.curState !== null && this.curState !== undefined) {
    output.writeFieldBegin('curState', Thrift.Type.I32, 2);
    output.writeI32(this.curState);
    output.writeFieldEnd();
  }
  if (this.activeState !== null && this.activeState !== undefined) {
    output.writeFieldBegin('activeState', Thrift.Type.I32, 3);
    output.writeI32(this.activeState);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.STRING, 5);
    output.writeString(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.operatorType !== null && this.operatorType !== undefined) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 6);
    output.writeI32(this.operatorType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 7);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

