//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var pagination_ttypes = require('./pagination_types')


var ttypes = require('./seller_types');
//HELPER FUNCTIONS AND STRUCTURES

SellerServ_querySeller_args = function(args) {
  this.sellerId = null;
  this.param = null;
  if (args) {
    if (args.sellerId !== undefined && args.sellerId !== null) {
      this.sellerId = args.sellerId;
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.SellerRetParam(args.param);
    }
  }
};
SellerServ_querySeller_args.prototype = {};
SellerServ_querySeller_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sellerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.SellerRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_querySeller_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_querySeller_args');
  if (this.sellerId !== null && this.sellerId !== undefined) {
    output.writeFieldBegin('sellerId', Thrift.Type.I32, 1);
    output.writeI32(this.sellerId);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_querySeller_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SellerResult(args.success);
    }
  }
};
SellerServ_querySeller_result.prototype = {};
SellerServ_querySeller_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SellerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_querySeller_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_querySeller_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_querySellerBatch_args = function(args) {
  this.sellerIds = null;
  this.param = null;
  if (args) {
    if (args.sellerIds !== undefined && args.sellerIds !== null) {
      this.sellerIds = Thrift.copyList(args.sellerIds, [null]);
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.SellerRetParam(args.param);
    }
  }
};
SellerServ_querySellerBatch_args.prototype = {};
SellerServ_querySellerBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.sellerIds = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readI32();
          this.sellerIds.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.SellerRetParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_querySellerBatch_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_querySellerBatch_args');
  if (this.sellerIds !== null && this.sellerIds !== undefined) {
    output.writeFieldBegin('sellerIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sellerIds.length);
    for (var iter17 in this.sellerIds)
    {
      if (this.sellerIds.hasOwnProperty(iter17))
      {
        iter17 = this.sellerIds[iter17];
        output.writeI32(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 2);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_querySellerBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SellersResult(args.success);
    }
  }
};
SellerServ_querySellerBatch_result.prototype = {};
SellerServ_querySellerBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SellersResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_querySellerBatch_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_querySellerBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_isLoginNameExist_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined && args.loginName !== null) {
      this.loginName = args.loginName;
    }
  }
};
SellerServ_isLoginNameExist_args.prototype = {};
SellerServ_isLoginNameExist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_isLoginNameExist_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_isLoginNameExist_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_isLoginNameExist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.BoolResult(args.success);
    }
  }
};
SellerServ_isLoginNameExist_result.prototype = {};
SellerServ_isLoginNameExist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.BoolResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_isLoginNameExist_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_isLoginNameExist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_signup_args = function(args) {
  this.seller = null;
  if (args) {
    if (args.seller !== undefined && args.seller !== null) {
      this.seller = new ttypes.Seller(args.seller);
    }
  }
};
SellerServ_signup_args.prototype = {};
SellerServ_signup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Seller();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_signup_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_signup_args');
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 1);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_signup_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
SellerServ_signup_result.prototype = {};
SellerServ_signup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_signup_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_signup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_signin_args = function(args) {
  this.seller = null;
  this.loginLog = null;
  if (args) {
    if (args.seller !== undefined && args.seller !== null) {
      this.seller = new ttypes.Seller(args.seller);
    }
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
SellerServ_signin_args.prototype = {};
SellerServ_signin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Seller();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_signin_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_signin_args');
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 1);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 2);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_signin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SellerResult(args.success);
    }
  }
};
SellerServ_signin_result.prototype = {};
SellerServ_signin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SellerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_signin_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_signin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_signout_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
SellerServ_signout_args.prototype = {};
SellerServ_signout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_signout_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_signout_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_signout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
SellerServ_signout_result.prototype = {};
SellerServ_signout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_signout_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_signout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_isOnline_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
SellerServ_isOnline_args.prototype = {};
SellerServ_isOnline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_isOnline_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_isOnline_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_isOnline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SellerResult(args.success);
    }
  }
};
SellerServ_isOnline_result.prototype = {};
SellerServ_isOnline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SellerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_isOnline_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_isOnline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_getOnlineInfo_args = function(args) {
  this.loginLog = null;
  if (args) {
    if (args.loginLog !== undefined && args.loginLog !== null) {
      this.loginLog = new ttypes.LoginLog(args.loginLog);
    }
  }
};
SellerServ_getOnlineInfo_args.prototype = {};
SellerServ_getOnlineInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginLog = new ttypes.LoginLog();
        this.loginLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_getOnlineInfo_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_getOnlineInfo_args');
  if (this.loginLog !== null && this.loginLog !== undefined) {
    output.writeFieldBegin('loginLog', Thrift.Type.STRUCT, 1);
    this.loginLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_getOnlineInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SellerResult(args.success);
    }
  }
};
SellerServ_getOnlineInfo_result.prototype = {};
SellerServ_getOnlineInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SellerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_getOnlineInfo_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_getOnlineInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_pwdFind_args = function(args) {
  this.findWay = null;
  this.account = null;
  if (args) {
    if (args.findWay !== undefined && args.findWay !== null) {
      this.findWay = args.findWay;
    }
    if (args.account !== undefined && args.account !== null) {
      this.account = args.account;
    }
  }
};
SellerServ_pwdFind_args.prototype = {};
SellerServ_pwdFind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.findWay = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_pwdFind_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_pwdFind_args');
  if (this.findWay !== null && this.findWay !== undefined) {
    output.writeFieldBegin('findWay', Thrift.Type.I32, 1);
    output.writeI32(this.findWay);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 2);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_pwdFind_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.StringResult(args.success);
    }
  }
};
SellerServ_pwdFind_result.prototype = {};
SellerServ_pwdFind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_pwdFind_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_pwdFind_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_updateSeller_args = function(args) {
  this.seller = null;
  if (args) {
    if (args.seller !== undefined && args.seller !== null) {
      this.seller = new ttypes.Seller(args.seller);
    }
  }
};
SellerServ_updateSeller_args.prototype = {};
SellerServ_updateSeller_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Seller();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_updateSeller_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_updateSeller_args');
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 1);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_updateSeller_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
SellerServ_updateSeller_result.prototype = {};
SellerServ_updateSeller_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_updateSeller_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_updateSeller_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_resetSellerPwd_args = function(args) {
  this.newPwd = null;
  this.seller = null;
  if (args) {
    if (args.newPwd !== undefined && args.newPwd !== null) {
      this.newPwd = args.newPwd;
    }
    if (args.seller !== undefined && args.seller !== null) {
      this.seller = new ttypes.Seller(args.seller);
    }
  }
};
SellerServ_resetSellerPwd_args.prototype = {};
SellerServ_resetSellerPwd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.newPwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Seller();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_resetSellerPwd_args.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_resetSellerPwd_args');
  if (this.newPwd !== null && this.newPwd !== undefined) {
    output.writeFieldBegin('newPwd', Thrift.Type.STRING, 1);
    output.writeString(this.newPwd);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 2);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServ_resetSellerPwd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.Result(args.success);
    }
  }
};
SellerServ_resetSellerPwd_result.prototype = {};
SellerServ_resetSellerPwd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SellerServ_resetSellerPwd_result.prototype.write = function(output) {
  output.writeStructBegin('SellerServ_resetSellerPwd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SellerServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SellerServClient.prototype = {};
SellerServClient.prototype.seqid = function() { return this._seqid; }
SellerServClient.prototype.new_seqid = function() { return this._seqid += 1; }
SellerServClient.prototype.querySeller = function(sellerId, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySeller(sellerId, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySeller(sellerId, param);
  }
};

SellerServClient.prototype.send_querySeller = function(sellerId, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySeller', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_querySeller_args();
  args.sellerId = sellerId;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_querySeller = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_querySeller_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySeller failed: unknown result');
};
SellerServClient.prototype.querySellerBatch = function(sellerIds, param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querySellerBatch(sellerIds, param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querySellerBatch(sellerIds, param);
  }
};

SellerServClient.prototype.send_querySellerBatch = function(sellerIds, param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querySellerBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_querySellerBatch_args();
  args.sellerIds = sellerIds;
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_querySellerBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_querySellerBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querySellerBatch failed: unknown result');
};
SellerServClient.prototype.isLoginNameExist = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isLoginNameExist(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isLoginNameExist(loginName);
  }
};

SellerServClient.prototype.send_isLoginNameExist = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isLoginNameExist', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_isLoginNameExist_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_isLoginNameExist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_isLoginNameExist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isLoginNameExist failed: unknown result');
};
SellerServClient.prototype.signup = function(seller, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signup(seller);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signup(seller);
  }
};

SellerServClient.prototype.send_signup = function(seller) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signup', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_signup_args();
  args.seller = seller;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_signup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_signup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signup failed: unknown result');
};
SellerServClient.prototype.signin = function(seller, loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signin(seller, loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signin(seller, loginLog);
  }
};

SellerServClient.prototype.send_signin = function(seller, loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signin', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_signin_args();
  args.seller = seller;
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_signin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_signin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signin failed: unknown result');
};
SellerServClient.prototype.signout = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signout(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signout(loginLog);
  }
};

SellerServClient.prototype.send_signout = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signout', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_signout_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_signout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_signout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signout failed: unknown result');
};
SellerServClient.prototype.isOnline = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isOnline(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isOnline(loginLog);
  }
};

SellerServClient.prototype.send_isOnline = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isOnline', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_isOnline_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_isOnline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_isOnline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isOnline failed: unknown result');
};
SellerServClient.prototype.getOnlineInfo = function(loginLog, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOnlineInfo(loginLog);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOnlineInfo(loginLog);
  }
};

SellerServClient.prototype.send_getOnlineInfo = function(loginLog) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOnlineInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_getOnlineInfo_args();
  args.loginLog = loginLog;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_getOnlineInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_getOnlineInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOnlineInfo failed: unknown result');
};
SellerServClient.prototype.pwdFind = function(findWay, account, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pwdFind(findWay, account);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pwdFind(findWay, account);
  }
};

SellerServClient.prototype.send_pwdFind = function(findWay, account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pwdFind', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_pwdFind_args();
  args.findWay = findWay;
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_pwdFind = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_pwdFind_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pwdFind failed: unknown result');
};
SellerServClient.prototype.updateSeller = function(seller, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSeller(seller);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSeller(seller);
  }
};

SellerServClient.prototype.send_updateSeller = function(seller) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSeller', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_updateSeller_args();
  args.seller = seller;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_updateSeller = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_updateSeller_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSeller failed: unknown result');
};
SellerServClient.prototype.resetSellerPwd = function(newPwd, seller, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetSellerPwd(newPwd, seller);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetSellerPwd(newPwd, seller);
  }
};

SellerServClient.prototype.send_resetSellerPwd = function(newPwd, seller) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetSellerPwd', Thrift.MessageType.CALL, this.seqid());
  var args = new SellerServ_resetSellerPwd_args();
  args.newPwd = newPwd;
  args.seller = seller;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SellerServClient.prototype.recv_resetSellerPwd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SellerServ_resetSellerPwd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resetSellerPwd failed: unknown result');
};
SellerServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SellerServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SellerServProcessor.prototype.process_querySeller = function(seqid, input, output) {
  var args = new SellerServ_querySeller_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySeller.length === 2) {
    Q.fcall(this._handler.querySeller, args.sellerId, args.param)
      .then(function(result) {
        var result = new SellerServ_querySeller_result({success: result});
        output.writeMessageBegin("querySeller", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySeller", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySeller(args.sellerId, args.param, function (err, result) {
      if (err == null) {
        var result = new SellerServ_querySeller_result((err != null ? err : {success: result}));
        output.writeMessageBegin("querySeller", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySeller", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_querySellerBatch = function(seqid, input, output) {
  var args = new SellerServ_querySellerBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querySellerBatch.length === 2) {
    Q.fcall(this._handler.querySellerBatch, args.sellerIds, args.param)
      .then(function(result) {
        var result = new SellerServ_querySellerBatch_result({success: result});
        output.writeMessageBegin("querySellerBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySellerBatch", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querySellerBatch(args.sellerIds, args.param, function (err, result) {
      if (err == null) {
        var result = new SellerServ_querySellerBatch_result((err != null ? err : {success: result}));
        output.writeMessageBegin("querySellerBatch", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("querySellerBatch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_isLoginNameExist = function(seqid, input, output) {
  var args = new SellerServ_isLoginNameExist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isLoginNameExist.length === 1) {
    Q.fcall(this._handler.isLoginNameExist, args.loginName)
      .then(function(result) {
        var result = new SellerServ_isLoginNameExist_result({success: result});
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isLoginNameExist(args.loginName, function (err, result) {
      if (err == null) {
        var result = new SellerServ_isLoginNameExist_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLoginNameExist", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_signup = function(seqid, input, output) {
  var args = new SellerServ_signup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signup.length === 1) {
    Q.fcall(this._handler.signup, args.seller)
      .then(function(result) {
        var result = new SellerServ_signup_result({success: result});
        output.writeMessageBegin("signup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signup", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signup(args.seller, function (err, result) {
      if (err == null) {
        var result = new SellerServ_signup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("signup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_signin = function(seqid, input, output) {
  var args = new SellerServ_signin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signin.length === 2) {
    Q.fcall(this._handler.signin, args.seller, args.loginLog)
      .then(function(result) {
        var result = new SellerServ_signin_result({success: result});
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signin", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signin(args.seller, args.loginLog, function (err, result) {
      if (err == null) {
        var result = new SellerServ_signin_result((err != null ? err : {success: result}));
        output.writeMessageBegin("signin", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_signout = function(seqid, input, output) {
  var args = new SellerServ_signout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signout.length === 1) {
    Q.fcall(this._handler.signout, args.loginLog)
      .then(function(result) {
        var result = new SellerServ_signout_result({success: result});
        output.writeMessageBegin("signout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signout", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signout(args.loginLog, function (err, result) {
      if (err == null) {
        var result = new SellerServ_signout_result((err != null ? err : {success: result}));
        output.writeMessageBegin("signout", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_isOnline = function(seqid, input, output) {
  var args = new SellerServ_isOnline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isOnline.length === 1) {
    Q.fcall(this._handler.isOnline, args.loginLog)
      .then(function(result) {
        var result = new SellerServ_isOnline_result({success: result});
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isOnline", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isOnline(args.loginLog, function (err, result) {
      if (err == null) {
        var result = new SellerServ_isOnline_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isOnline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_getOnlineInfo = function(seqid, input, output) {
  var args = new SellerServ_getOnlineInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOnlineInfo.length === 1) {
    Q.fcall(this._handler.getOnlineInfo, args.loginLog)
      .then(function(result) {
        var result = new SellerServ_getOnlineInfo_result({success: result});
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getOnlineInfo(args.loginLog, function (err, result) {
      if (err == null) {
        var result = new SellerServ_getOnlineInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOnlineInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_pwdFind = function(seqid, input, output) {
  var args = new SellerServ_pwdFind_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pwdFind.length === 2) {
    Q.fcall(this._handler.pwdFind, args.findWay, args.account)
      .then(function(result) {
        var result = new SellerServ_pwdFind_result({success: result});
        output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("pwdFind", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pwdFind(args.findWay, args.account, function (err, result) {
      if (err == null) {
        var result = new SellerServ_pwdFind_result((err != null ? err : {success: result}));
        output.writeMessageBegin("pwdFind", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("pwdFind", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_updateSeller = function(seqid, input, output) {
  var args = new SellerServ_updateSeller_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSeller.length === 1) {
    Q.fcall(this._handler.updateSeller, args.seller)
      .then(function(result) {
        var result = new SellerServ_updateSeller_result({success: result});
        output.writeMessageBegin("updateSeller", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSeller", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSeller(args.seller, function (err, result) {
      if (err == null) {
        var result = new SellerServ_updateSeller_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateSeller", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSeller", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SellerServProcessor.prototype.process_resetSellerPwd = function(seqid, input, output) {
  var args = new SellerServ_resetSellerPwd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetSellerPwd.length === 2) {
    Q.fcall(this._handler.resetSellerPwd, args.newPwd, args.seller)
      .then(function(result) {
        var result = new SellerServ_resetSellerPwd_result({success: result});
        output.writeMessageBegin("resetSellerPwd", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resetSellerPwd", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetSellerPwd(args.newPwd, args.seller, function (err, result) {
      if (err == null) {
        var result = new SellerServ_resetSellerPwd_result((err != null ? err : {success: result}));
        output.writeMessageBegin("resetSellerPwd", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resetSellerPwd", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

