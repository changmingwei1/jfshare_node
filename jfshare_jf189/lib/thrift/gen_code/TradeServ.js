//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')
var order_ttypes = require('./order_types')
var pay_ttypes = require('./pay_types')


var ttypes = require('./trade_types');
//HELPER FUNCTIONS AND STRUCTURES

TradeServ_orderConfirm_args = function(args) {
  this.buyInfo = null;
  if (args) {
    if (args.buyInfo !== undefined && args.buyInfo !== null) {
      this.buyInfo = new ttypes.BuyInfo(args.buyInfo);
    }
  }
};
TradeServ_orderConfirm_args.prototype = {};
TradeServ_orderConfirm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyInfo = new ttypes.BuyInfo();
        this.buyInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_orderConfirm_args.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_orderConfirm_args');
  if (this.buyInfo !== null && this.buyInfo !== undefined) {
    output.writeFieldBegin('buyInfo', Thrift.Type.STRUCT, 1);
    this.buyInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_orderConfirm_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.OrderConfirmResult(args.success);
    }
  }
};
TradeServ_orderConfirm_result.prototype = {};
TradeServ_orderConfirm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OrderConfirmResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_orderConfirm_result.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_orderConfirm_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_buyCount_args = function(args) {
  this.userId = null;
  this.productId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
  }
};
TradeServ_buyCount_args.prototype = {};
TradeServ_buyCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_buyCount_args.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_buyCount_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_buyCount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new result_ttypes.StringResult(args.success);
    }
  }
};
TradeServ_buyCount_result.prototype = {};
TradeServ_buyCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new result_ttypes.StringResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_buyCount_result.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_buyCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_getExchangeRule_args = function(args) {
};
TradeServ_getExchangeRule_args.prototype = {};
TradeServ_getExchangeRule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_getExchangeRule_args.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_getExchangeRule_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_getExchangeRule_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExchangeRuleResult(args.success);
    }
  }
};
TradeServ_getExchangeRule_result.prototype = {};
TradeServ_getExchangeRule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExchangeRuleResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_getExchangeRule_result.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_getExchangeRule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_getExchangeScore_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.ExchangeParam(args.param);
    }
  }
};
TradeServ_getExchangeScore_args.prototype = {};
TradeServ_getExchangeScore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ExchangeParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_getExchangeScore_args.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_getExchangeScore_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_getExchangeScore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExchangeResult(args.success);
    }
  }
};
TradeServ_getExchangeScore_result.prototype = {};
TradeServ_getExchangeScore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExchangeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_getExchangeScore_result.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_getExchangeScore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_score2cash_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined && args.param !== null) {
      this.param = new ttypes.ExchangeParam(args.param);
    }
  }
};
TradeServ_score2cash_args.prototype = {};
TradeServ_score2cash_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.ExchangeParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_score2cash_args.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_score2cash_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServ_score2cash_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExchangeResult(args.success);
    }
  }
};
TradeServ_score2cash_result.prototype = {};
TradeServ_score2cash_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExchangeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TradeServ_score2cash_result.prototype.write = function(output) {
  output.writeStructBegin('TradeServ_score2cash_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TradeServClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TradeServClient.prototype = {};
TradeServClient.prototype.seqid = function() { return this._seqid; }
TradeServClient.prototype.new_seqid = function() { return this._seqid += 1; }
TradeServClient.prototype.orderConfirm = function(buyInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_orderConfirm(buyInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_orderConfirm(buyInfo);
  }
};

TradeServClient.prototype.send_orderConfirm = function(buyInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('orderConfirm', Thrift.MessageType.CALL, this.seqid());
  var args = new TradeServ_orderConfirm_args();
  args.buyInfo = buyInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TradeServClient.prototype.recv_orderConfirm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TradeServ_orderConfirm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('orderConfirm failed: unknown result');
};
TradeServClient.prototype.buyCount = function(userId, productId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_buyCount(userId, productId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_buyCount(userId, productId);
  }
};

TradeServClient.prototype.send_buyCount = function(userId, productId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('buyCount', Thrift.MessageType.CALL, this.seqid());
  var args = new TradeServ_buyCount_args();
  args.userId = userId;
  args.productId = productId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TradeServClient.prototype.recv_buyCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TradeServ_buyCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('buyCount failed: unknown result');
};
TradeServClient.prototype.getExchangeRule = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getExchangeRule();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getExchangeRule();
  }
};

TradeServClient.prototype.send_getExchangeRule = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExchangeRule', Thrift.MessageType.CALL, this.seqid());
  var args = new TradeServ_getExchangeRule_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TradeServClient.prototype.recv_getExchangeRule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TradeServ_getExchangeRule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExchangeRule failed: unknown result');
};
TradeServClient.prototype.getExchangeScore = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getExchangeScore(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getExchangeScore(param);
  }
};

TradeServClient.prototype.send_getExchangeScore = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExchangeScore', Thrift.MessageType.CALL, this.seqid());
  var args = new TradeServ_getExchangeScore_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TradeServClient.prototype.recv_getExchangeScore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TradeServ_getExchangeScore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExchangeScore failed: unknown result');
};
TradeServClient.prototype.score2cash = function(param, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_score2cash(param);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_score2cash(param);
  }
};

TradeServClient.prototype.send_score2cash = function(param) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('score2cash', Thrift.MessageType.CALL, this.seqid());
  var args = new TradeServ_score2cash_args();
  args.param = param;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TradeServClient.prototype.recv_score2cash = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TradeServ_score2cash_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('score2cash failed: unknown result');
};
TradeServProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TradeServProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TradeServProcessor.prototype.process_orderConfirm = function(seqid, input, output) {
  var args = new TradeServ_orderConfirm_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.orderConfirm.length === 1) {
    Q.fcall(this._handler.orderConfirm, args.buyInfo)
      .then(function(result) {
        var result = new TradeServ_orderConfirm_result({success: result});
        output.writeMessageBegin("orderConfirm", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("orderConfirm", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.orderConfirm(args.buyInfo, function (err, result) {
      if (err == null) {
        var result = new TradeServ_orderConfirm_result((err != null ? err : {success: result}));
        output.writeMessageBegin("orderConfirm", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("orderConfirm", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TradeServProcessor.prototype.process_buyCount = function(seqid, input, output) {
  var args = new TradeServ_buyCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.buyCount.length === 2) {
    Q.fcall(this._handler.buyCount, args.userId, args.productId)
      .then(function(result) {
        var result = new TradeServ_buyCount_result({success: result});
        output.writeMessageBegin("buyCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("buyCount", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.buyCount(args.userId, args.productId, function (err, result) {
      if (err == null) {
        var result = new TradeServ_buyCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("buyCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("buyCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TradeServProcessor.prototype.process_getExchangeRule = function(seqid, input, output) {
  var args = new TradeServ_getExchangeRule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getExchangeRule.length === 0) {
    Q.fcall(this._handler.getExchangeRule)
      .then(function(result) {
        var result = new TradeServ_getExchangeRule_result({success: result});
        output.writeMessageBegin("getExchangeRule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExchangeRule", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getExchangeRule(function (err, result) {
      if (err == null) {
        var result = new TradeServ_getExchangeRule_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getExchangeRule", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExchangeRule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TradeServProcessor.prototype.process_getExchangeScore = function(seqid, input, output) {
  var args = new TradeServ_getExchangeScore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getExchangeScore.length === 1) {
    Q.fcall(this._handler.getExchangeScore, args.param)
      .then(function(result) {
        var result = new TradeServ_getExchangeScore_result({success: result});
        output.writeMessageBegin("getExchangeScore", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExchangeScore", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getExchangeScore(args.param, function (err, result) {
      if (err == null) {
        var result = new TradeServ_getExchangeScore_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getExchangeScore", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExchangeScore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TradeServProcessor.prototype.process_score2cash = function(seqid, input, output) {
  var args = new TradeServ_score2cash_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.score2cash.length === 1) {
    Q.fcall(this._handler.score2cash, args.param)
      .then(function(result) {
        var result = new TradeServ_score2cash_result({success: result});
        output.writeMessageBegin("score2cash", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("score2cash", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.score2cash(args.param, function (err, result) {
      if (err == null) {
        var result = new TradeServ_score2cash_result((err != null ? err : {success: result}));
        output.writeMessageBegin("score2cash", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("score2cash", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

