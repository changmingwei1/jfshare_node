//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var result_ttypes = require('./result_types')


var ttypes = module.exports = {};
FileNameMappedInfo = module.exports.FileNameMappedInfo = function(args) {
  this.id = null;
  this.filenameMd5 = null;
  this.filename = null;
  this.fileid = null;
  this.backupState = null;
  this.backupTime = null;
  this.source = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.filenameMd5 !== undefined) {
      this.filenameMd5 = args.filenameMd5;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
    if (args.fileid !== undefined) {
      this.fileid = args.fileid;
    }
    if (args.backupState !== undefined) {
      this.backupState = args.backupState;
    }
    if (args.backupTime !== undefined) {
      this.backupTime = args.backupTime;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
FileNameMappedInfo.prototype = {};
FileNameMappedInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filenameMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fileid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.backupState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.backupTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileNameMappedInfo.prototype.write = function(output) {
  output.writeStructBegin('FileNameMappedInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.filenameMd5 !== null && this.filenameMd5 !== undefined) {
    output.writeFieldBegin('filenameMd5', Thrift.Type.STRING, 2);
    output.writeString(this.filenameMd5);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 3);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.fileid !== null && this.fileid !== undefined) {
    output.writeFieldBegin('fileid', Thrift.Type.STRING, 4);
    output.writeString(this.fileid);
    output.writeFieldEnd();
  }
  if (this.backupState !== null && this.backupState !== undefined) {
    output.writeFieldBegin('backupState', Thrift.Type.I32, 5);
    output.writeI32(this.backupState);
    output.writeFieldEnd();
  }
  if (this.backupTime !== null && this.backupTime !== undefined) {
    output.writeFieldBegin('backupTime', Thrift.Type.STRING, 6);
    output.writeString(this.backupTime);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 7);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryParam = module.exports.QueryParam = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
  }
};
QueryParam.prototype = {};
QueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryParam.prototype.write = function(output) {
  output.writeStructBegin('QueryParam');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileNameMappedResult = module.exports.FileNameMappedResult = function(args) {
  this.result = null;
  this.fileNameMappedInfo = null;
  if (args) {
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.fileNameMappedInfo !== undefined) {
      this.fileNameMappedInfo = args.fileNameMappedInfo;
    }
  }
};
FileNameMappedResult.prototype = {};
FileNameMappedResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new result_ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fileNameMappedInfo = new ttypes.FileNameMappedInfo();
        this.fileNameMappedInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileNameMappedResult.prototype.write = function(output) {
  output.writeStructBegin('FileNameMappedResult');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.fileNameMappedInfo !== null && this.fileNameMappedInfo !== undefined) {
    output.writeFieldBegin('fileNameMappedInfo', Thrift.Type.STRUCT, 2);
    this.fileNameMappedInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

